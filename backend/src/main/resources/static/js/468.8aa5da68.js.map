{"version":3,"file":"js/468.8aa5da68.js","mappings":"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","sources":["webpack://frontend/./node_modules/@kurkle/color/dist/color.esm.js","webpack://frontend/./node_modules/chart.js/dist/chunks/helpers.dataset.js","webpack://frontend/./node_modules/chart.js/dist/chart.js"],"sourcesContent":["/*!\n * @kurkle/color v0.3.4\n * https://github.com/kurkle/color#readme\n * (c) 2024 Jukka Kurkela\n * Released under the MIT License\n */\nfunction round(v) {\n  return v + 0.5 | 0;\n}\nconst lim = (v, l, h) => Math.max(Math.min(v, h), l);\nfunction p2b(v) {\n  return lim(round(v * 2.55), 0, 255);\n}\nfunction b2p(v) {\n  return lim(round(v / 2.55), 0, 100);\n}\nfunction n2b(v) {\n  return lim(round(v * 255), 0, 255);\n}\nfunction b2n(v) {\n  return lim(round(v / 2.55) / 100, 0, 1);\n}\nfunction n2p(v) {\n  return lim(round(v * 100), 0, 100);\n}\n\nconst map$1 = {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, A: 10, B: 11, C: 12, D: 13, E: 14, F: 15, a: 10, b: 11, c: 12, d: 13, e: 14, f: 15};\nconst hex = [...'0123456789ABCDEF'];\nconst h1 = b => hex[b & 0xF];\nconst h2 = b => hex[(b & 0xF0) >> 4] + hex[b & 0xF];\nconst eq = b => ((b & 0xF0) >> 4) === (b & 0xF);\nconst isShort = v => eq(v.r) && eq(v.g) && eq(v.b) && eq(v.a);\nfunction hexParse(str) {\n  var len = str.length;\n  var ret;\n  if (str[0] === '#') {\n    if (len === 4 || len === 5) {\n      ret = {\n        r: 255 & map$1[str[1]] * 17,\n        g: 255 & map$1[str[2]] * 17,\n        b: 255 & map$1[str[3]] * 17,\n        a: len === 5 ? map$1[str[4]] * 17 : 255\n      };\n    } else if (len === 7 || len === 9) {\n      ret = {\n        r: map$1[str[1]] << 4 | map$1[str[2]],\n        g: map$1[str[3]] << 4 | map$1[str[4]],\n        b: map$1[str[5]] << 4 | map$1[str[6]],\n        a: len === 9 ? (map$1[str[7]] << 4 | map$1[str[8]]) : 255\n      };\n    }\n  }\n  return ret;\n}\nconst alpha = (a, f) => a < 255 ? f(a) : '';\nfunction hexString(v) {\n  var f = isShort(v) ? h1 : h2;\n  return v\n    ? '#' + f(v.r) + f(v.g) + f(v.b) + alpha(v.a, f)\n    : undefined;\n}\n\nconst HUE_RE = /^(hsla?|hwb|hsv)\\(\\s*([-+.e\\d]+)(?:deg)?[\\s,]+([-+.e\\d]+)%[\\s,]+([-+.e\\d]+)%(?:[\\s,]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\nfunction hsl2rgbn(h, s, l) {\n  const a = s * Math.min(l, 1 - l);\n  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n  return [f(0), f(8), f(4)];\n}\nfunction hsv2rgbn(h, s, v) {\n  const f = (n, k = (n + h / 60) % 6) => v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);\n  return [f(5), f(3), f(1)];\n}\nfunction hwb2rgbn(h, w, b) {\n  const rgb = hsl2rgbn(h, 1, 0.5);\n  let i;\n  if (w + b > 1) {\n    i = 1 / (w + b);\n    w *= i;\n    b *= i;\n  }\n  for (i = 0; i < 3; i++) {\n    rgb[i] *= 1 - w - b;\n    rgb[i] += w;\n  }\n  return rgb;\n}\nfunction hueValue(r, g, b, d, max) {\n  if (r === max) {\n    return ((g - b) / d) + (g < b ? 6 : 0);\n  }\n  if (g === max) {\n    return (b - r) / d + 2;\n  }\n  return (r - g) / d + 4;\n}\nfunction rgb2hsl(v) {\n  const range = 255;\n  const r = v.r / range;\n  const g = v.g / range;\n  const b = v.b / range;\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const l = (max + min) / 2;\n  let h, s, d;\n  if (max !== min) {\n    d = max - min;\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n    h = hueValue(r, g, b, d, max);\n    h = h * 60 + 0.5;\n  }\n  return [h | 0, s || 0, l];\n}\nfunction calln(f, a, b, c) {\n  return (\n    Array.isArray(a)\n      ? f(a[0], a[1], a[2])\n      : f(a, b, c)\n  ).map(n2b);\n}\nfunction hsl2rgb(h, s, l) {\n  return calln(hsl2rgbn, h, s, l);\n}\nfunction hwb2rgb(h, w, b) {\n  return calln(hwb2rgbn, h, w, b);\n}\nfunction hsv2rgb(h, s, v) {\n  return calln(hsv2rgbn, h, s, v);\n}\nfunction hue(h) {\n  return (h % 360 + 360) % 360;\n}\nfunction hueParse(str) {\n  const m = HUE_RE.exec(str);\n  let a = 255;\n  let v;\n  if (!m) {\n    return;\n  }\n  if (m[5] !== v) {\n    a = m[6] ? p2b(+m[5]) : n2b(+m[5]);\n  }\n  const h = hue(+m[2]);\n  const p1 = +m[3] / 100;\n  const p2 = +m[4] / 100;\n  if (m[1] === 'hwb') {\n    v = hwb2rgb(h, p1, p2);\n  } else if (m[1] === 'hsv') {\n    v = hsv2rgb(h, p1, p2);\n  } else {\n    v = hsl2rgb(h, p1, p2);\n  }\n  return {\n    r: v[0],\n    g: v[1],\n    b: v[2],\n    a: a\n  };\n}\nfunction rotate(v, deg) {\n  var h = rgb2hsl(v);\n  h[0] = hue(h[0] + deg);\n  h = hsl2rgb(h);\n  v.r = h[0];\n  v.g = h[1];\n  v.b = h[2];\n}\nfunction hslString(v) {\n  if (!v) {\n    return;\n  }\n  const a = rgb2hsl(v);\n  const h = a[0];\n  const s = n2p(a[1]);\n  const l = n2p(a[2]);\n  return v.a < 255\n    ? `hsla(${h}, ${s}%, ${l}%, ${b2n(v.a)})`\n    : `hsl(${h}, ${s}%, ${l}%)`;\n}\n\nconst map = {\n\tx: 'dark',\n\tZ: 'light',\n\tY: 're',\n\tX: 'blu',\n\tW: 'gr',\n\tV: 'medium',\n\tU: 'slate',\n\tA: 'ee',\n\tT: 'ol',\n\tS: 'or',\n\tB: 'ra',\n\tC: 'lateg',\n\tD: 'ights',\n\tR: 'in',\n\tQ: 'turquois',\n\tE: 'hi',\n\tP: 'ro',\n\tO: 'al',\n\tN: 'le',\n\tM: 'de',\n\tL: 'yello',\n\tF: 'en',\n\tK: 'ch',\n\tG: 'arks',\n\tH: 'ea',\n\tI: 'ightg',\n\tJ: 'wh'\n};\nconst names$1 = {\n\tOiceXe: 'f0f8ff',\n\tantiquewEte: 'faebd7',\n\taqua: 'ffff',\n\taquamarRe: '7fffd4',\n\tazuY: 'f0ffff',\n\tbeige: 'f5f5dc',\n\tbisque: 'ffe4c4',\n\tblack: '0',\n\tblanKedOmond: 'ffebcd',\n\tXe: 'ff',\n\tXeviTet: '8a2be2',\n\tbPwn: 'a52a2a',\n\tburlywood: 'deb887',\n\tcaMtXe: '5f9ea0',\n\tKartYuse: '7fff00',\n\tKocTate: 'd2691e',\n\tcSO: 'ff7f50',\n\tcSnflowerXe: '6495ed',\n\tcSnsilk: 'fff8dc',\n\tcrimson: 'dc143c',\n\tcyan: 'ffff',\n\txXe: '8b',\n\txcyan: '8b8b',\n\txgTMnPd: 'b8860b',\n\txWay: 'a9a9a9',\n\txgYF: '6400',\n\txgYy: 'a9a9a9',\n\txkhaki: 'bdb76b',\n\txmagFta: '8b008b',\n\txTivegYF: '556b2f',\n\txSange: 'ff8c00',\n\txScEd: '9932cc',\n\txYd: '8b0000',\n\txsOmon: 'e9967a',\n\txsHgYF: '8fbc8f',\n\txUXe: '483d8b',\n\txUWay: '2f4f4f',\n\txUgYy: '2f4f4f',\n\txQe: 'ced1',\n\txviTet: '9400d3',\n\tdAppRk: 'ff1493',\n\tdApskyXe: 'bfff',\n\tdimWay: '696969',\n\tdimgYy: '696969',\n\tdodgerXe: '1e90ff',\n\tfiYbrick: 'b22222',\n\tflSOwEte: 'fffaf0',\n\tfoYstWAn: '228b22',\n\tfuKsia: 'ff00ff',\n\tgaRsbSo: 'dcdcdc',\n\tghostwEte: 'f8f8ff',\n\tgTd: 'ffd700',\n\tgTMnPd: 'daa520',\n\tWay: '808080',\n\tgYF: '8000',\n\tgYFLw: 'adff2f',\n\tgYy: '808080',\n\thoneyMw: 'f0fff0',\n\thotpRk: 'ff69b4',\n\tRdianYd: 'cd5c5c',\n\tRdigo: '4b0082',\n\tivSy: 'fffff0',\n\tkhaki: 'f0e68c',\n\tlavFMr: 'e6e6fa',\n\tlavFMrXsh: 'fff0f5',\n\tlawngYF: '7cfc00',\n\tNmoncEffon: 'fffacd',\n\tZXe: 'add8e6',\n\tZcSO: 'f08080',\n\tZcyan: 'e0ffff',\n\tZgTMnPdLw: 'fafad2',\n\tZWay: 'd3d3d3',\n\tZgYF: '90ee90',\n\tZgYy: 'd3d3d3',\n\tZpRk: 'ffb6c1',\n\tZsOmon: 'ffa07a',\n\tZsHgYF: '20b2aa',\n\tZskyXe: '87cefa',\n\tZUWay: '778899',\n\tZUgYy: '778899',\n\tZstAlXe: 'b0c4de',\n\tZLw: 'ffffe0',\n\tlime: 'ff00',\n\tlimegYF: '32cd32',\n\tlRF: 'faf0e6',\n\tmagFta: 'ff00ff',\n\tmaPon: '800000',\n\tVaquamarRe: '66cdaa',\n\tVXe: 'cd',\n\tVScEd: 'ba55d3',\n\tVpurpN: '9370db',\n\tVsHgYF: '3cb371',\n\tVUXe: '7b68ee',\n\tVsprRggYF: 'fa9a',\n\tVQe: '48d1cc',\n\tVviTetYd: 'c71585',\n\tmidnightXe: '191970',\n\tmRtcYam: 'f5fffa',\n\tmistyPse: 'ffe4e1',\n\tmoccasR: 'ffe4b5',\n\tnavajowEte: 'ffdead',\n\tnavy: '80',\n\tTdlace: 'fdf5e6',\n\tTive: '808000',\n\tTivedBb: '6b8e23',\n\tSange: 'ffa500',\n\tSangeYd: 'ff4500',\n\tScEd: 'da70d6',\n\tpOegTMnPd: 'eee8aa',\n\tpOegYF: '98fb98',\n\tpOeQe: 'afeeee',\n\tpOeviTetYd: 'db7093',\n\tpapayawEp: 'ffefd5',\n\tpHKpuff: 'ffdab9',\n\tperu: 'cd853f',\n\tpRk: 'ffc0cb',\n\tplum: 'dda0dd',\n\tpowMrXe: 'b0e0e6',\n\tpurpN: '800080',\n\tYbeccapurpN: '663399',\n\tYd: 'ff0000',\n\tPsybrown: 'bc8f8f',\n\tPyOXe: '4169e1',\n\tsaddNbPwn: '8b4513',\n\tsOmon: 'fa8072',\n\tsandybPwn: 'f4a460',\n\tsHgYF: '2e8b57',\n\tsHshell: 'fff5ee',\n\tsiFna: 'a0522d',\n\tsilver: 'c0c0c0',\n\tskyXe: '87ceeb',\n\tUXe: '6a5acd',\n\tUWay: '708090',\n\tUgYy: '708090',\n\tsnow: 'fffafa',\n\tsprRggYF: 'ff7f',\n\tstAlXe: '4682b4',\n\ttan: 'd2b48c',\n\tteO: '8080',\n\ttEstN: 'd8bfd8',\n\ttomato: 'ff6347',\n\tQe: '40e0d0',\n\tviTet: 'ee82ee',\n\tJHt: 'f5deb3',\n\twEte: 'ffffff',\n\twEtesmoke: 'f5f5f5',\n\tLw: 'ffff00',\n\tLwgYF: '9acd32'\n};\nfunction unpack() {\n  const unpacked = {};\n  const keys = Object.keys(names$1);\n  const tkeys = Object.keys(map);\n  let i, j, k, ok, nk;\n  for (i = 0; i < keys.length; i++) {\n    ok = nk = keys[i];\n    for (j = 0; j < tkeys.length; j++) {\n      k = tkeys[j];\n      nk = nk.replace(k, map[k]);\n    }\n    k = parseInt(names$1[ok], 16);\n    unpacked[nk] = [k >> 16 & 0xFF, k >> 8 & 0xFF, k & 0xFF];\n  }\n  return unpacked;\n}\n\nlet names;\nfunction nameParse(str) {\n  if (!names) {\n    names = unpack();\n    names.transparent = [0, 0, 0, 0];\n  }\n  const a = names[str.toLowerCase()];\n  return a && {\n    r: a[0],\n    g: a[1],\n    b: a[2],\n    a: a.length === 4 ? a[3] : 255\n  };\n}\n\nconst RGB_RE = /^rgba?\\(\\s*([-+.\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?(?:[\\s,/]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\nfunction rgbParse(str) {\n  const m = RGB_RE.exec(str);\n  let a = 255;\n  let r, g, b;\n  if (!m) {\n    return;\n  }\n  if (m[7] !== r) {\n    const v = +m[7];\n    a = m[8] ? p2b(v) : lim(v * 255, 0, 255);\n  }\n  r = +m[1];\n  g = +m[3];\n  b = +m[5];\n  r = 255 & (m[2] ? p2b(r) : lim(r, 0, 255));\n  g = 255 & (m[4] ? p2b(g) : lim(g, 0, 255));\n  b = 255 & (m[6] ? p2b(b) : lim(b, 0, 255));\n  return {\n    r: r,\n    g: g,\n    b: b,\n    a: a\n  };\n}\nfunction rgbString(v) {\n  return v && (\n    v.a < 255\n      ? `rgba(${v.r}, ${v.g}, ${v.b}, ${b2n(v.a)})`\n      : `rgb(${v.r}, ${v.g}, ${v.b})`\n  );\n}\n\nconst to = v => v <= 0.0031308 ? v * 12.92 : Math.pow(v, 1.0 / 2.4) * 1.055 - 0.055;\nconst from = v => v <= 0.04045 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);\nfunction interpolate(rgb1, rgb2, t) {\n  const r = from(b2n(rgb1.r));\n  const g = from(b2n(rgb1.g));\n  const b = from(b2n(rgb1.b));\n  return {\n    r: n2b(to(r + t * (from(b2n(rgb2.r)) - r))),\n    g: n2b(to(g + t * (from(b2n(rgb2.g)) - g))),\n    b: n2b(to(b + t * (from(b2n(rgb2.b)) - b))),\n    a: rgb1.a + t * (rgb2.a - rgb1.a)\n  };\n}\n\nfunction modHSL(v, i, ratio) {\n  if (v) {\n    let tmp = rgb2hsl(v);\n    tmp[i] = Math.max(0, Math.min(tmp[i] + tmp[i] * ratio, i === 0 ? 360 : 1));\n    tmp = hsl2rgb(tmp);\n    v.r = tmp[0];\n    v.g = tmp[1];\n    v.b = tmp[2];\n  }\n}\nfunction clone(v, proto) {\n  return v ? Object.assign(proto || {}, v) : v;\n}\nfunction fromObject(input) {\n  var v = {r: 0, g: 0, b: 0, a: 255};\n  if (Array.isArray(input)) {\n    if (input.length >= 3) {\n      v = {r: input[0], g: input[1], b: input[2], a: 255};\n      if (input.length > 3) {\n        v.a = n2b(input[3]);\n      }\n    }\n  } else {\n    v = clone(input, {r: 0, g: 0, b: 0, a: 1});\n    v.a = n2b(v.a);\n  }\n  return v;\n}\nfunction functionParse(str) {\n  if (str.charAt(0) === 'r') {\n    return rgbParse(str);\n  }\n  return hueParse(str);\n}\nclass Color {\n  constructor(input) {\n    if (input instanceof Color) {\n      return input;\n    }\n    const type = typeof input;\n    let v;\n    if (type === 'object') {\n      v = fromObject(input);\n    } else if (type === 'string') {\n      v = hexParse(input) || nameParse(input) || functionParse(input);\n    }\n    this._rgb = v;\n    this._valid = !!v;\n  }\n  get valid() {\n    return this._valid;\n  }\n  get rgb() {\n    var v = clone(this._rgb);\n    if (v) {\n      v.a = b2n(v.a);\n    }\n    return v;\n  }\n  set rgb(obj) {\n    this._rgb = fromObject(obj);\n  }\n  rgbString() {\n    return this._valid ? rgbString(this._rgb) : undefined;\n  }\n  hexString() {\n    return this._valid ? hexString(this._rgb) : undefined;\n  }\n  hslString() {\n    return this._valid ? hslString(this._rgb) : undefined;\n  }\n  mix(color, weight) {\n    if (color) {\n      const c1 = this.rgb;\n      const c2 = color.rgb;\n      let w2;\n      const p = weight === w2 ? 0.5 : weight;\n      const w = 2 * p - 1;\n      const a = c1.a - c2.a;\n      const w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n      w2 = 1 - w1;\n      c1.r = 0xFF & w1 * c1.r + w2 * c2.r + 0.5;\n      c1.g = 0xFF & w1 * c1.g + w2 * c2.g + 0.5;\n      c1.b = 0xFF & w1 * c1.b + w2 * c2.b + 0.5;\n      c1.a = p * c1.a + (1 - p) * c2.a;\n      this.rgb = c1;\n    }\n    return this;\n  }\n  interpolate(color, t) {\n    if (color) {\n      this._rgb = interpolate(this._rgb, color._rgb, t);\n    }\n    return this;\n  }\n  clone() {\n    return new Color(this.rgb);\n  }\n  alpha(a) {\n    this._rgb.a = n2b(a);\n    return this;\n  }\n  clearer(ratio) {\n    const rgb = this._rgb;\n    rgb.a *= 1 - ratio;\n    return this;\n  }\n  greyscale() {\n    const rgb = this._rgb;\n    const val = round(rgb.r * 0.3 + rgb.g * 0.59 + rgb.b * 0.11);\n    rgb.r = rgb.g = rgb.b = val;\n    return this;\n  }\n  opaquer(ratio) {\n    const rgb = this._rgb;\n    rgb.a *= 1 + ratio;\n    return this;\n  }\n  negate() {\n    const v = this._rgb;\n    v.r = 255 - v.r;\n    v.g = 255 - v.g;\n    v.b = 255 - v.b;\n    return this;\n  }\n  lighten(ratio) {\n    modHSL(this._rgb, 2, ratio);\n    return this;\n  }\n  darken(ratio) {\n    modHSL(this._rgb, 2, -ratio);\n    return this;\n  }\n  saturate(ratio) {\n    modHSL(this._rgb, 1, ratio);\n    return this;\n  }\n  desaturate(ratio) {\n    modHSL(this._rgb, 1, -ratio);\n    return this;\n  }\n  rotate(deg) {\n    rotate(this._rgb, deg);\n    return this;\n  }\n}\n\nfunction index_esm(input) {\n  return new Color(input);\n}\n\nexport { Color, b2n, b2p, index_esm as default, hexParse, hexString, hsl2rgb, hslString, hsv2rgb, hueParse, hwb2rgb, lim, n2b, n2p, nameParse, p2b, rgb2hsl, rgbParse, rgbString, rotate, round };\n","/*!\n * Chart.js v4.5.1\n * https://www.chartjs.org\n * (c) 2025 Chart.js Contributors\n * Released under the MIT License\n */\nimport { Color } from '@kurkle/color';\n\n/**\n * @namespace Chart.helpers\n */ /**\n * An empty function that can be used, for example, for optional callback.\n */ function noop() {\n/* noop */ }\n/**\n * Returns a unique id, sequentially generated from a global variable.\n */ const uid = (()=>{\n    let id = 0;\n    return ()=>id++;\n})();\n/**\n * Returns true if `value` is neither null nor undefined, else returns false.\n * @param value - The value to test.\n * @since 2.7.0\n */ function isNullOrUndef(value) {\n    return value === null || value === undefined;\n}\n/**\n * Returns true if `value` is an array (including typed arrays), else returns false.\n * @param value - The value to test.\n * @function\n */ function isArray(value) {\n    if (Array.isArray && Array.isArray(value)) {\n        return true;\n    }\n    const type = Object.prototype.toString.call(value);\n    if (type.slice(0, 7) === '[object' && type.slice(-6) === 'Array]') {\n        return true;\n    }\n    return false;\n}\n/**\n * Returns true if `value` is an object (excluding null), else returns false.\n * @param value - The value to test.\n * @since 2.7.0\n */ function isObject(value) {\n    return value !== null && Object.prototype.toString.call(value) === '[object Object]';\n}\n/**\n * Returns true if `value` is a finite number, else returns false\n * @param value  - The value to test.\n */ function isNumberFinite(value) {\n    return (typeof value === 'number' || value instanceof Number) && isFinite(+value);\n}\n/**\n * Returns `value` if finite, else returns `defaultValue`.\n * @param value - The value to return if defined.\n * @param defaultValue - The value to return if `value` is not finite.\n */ function finiteOrDefault(value, defaultValue) {\n    return isNumberFinite(value) ? value : defaultValue;\n}\n/**\n * Returns `value` if defined, else returns `defaultValue`.\n * @param value - The value to return if defined.\n * @param defaultValue - The value to return if `value` is undefined.\n */ function valueOrDefault(value, defaultValue) {\n    return typeof value === 'undefined' ? defaultValue : value;\n}\nconst toPercentage = (value, dimension)=>typeof value === 'string' && value.endsWith('%') ? parseFloat(value) / 100 : +value / dimension;\nconst toDimension = (value, dimension)=>typeof value === 'string' && value.endsWith('%') ? parseFloat(value) / 100 * dimension : +value;\n/**\n * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the\n * value returned by `fn`. If `fn` is not a function, this method returns undefined.\n * @param fn - The function to call.\n * @param args - The arguments with which `fn` should be called.\n * @param [thisArg] - The value of `this` provided for the call to `fn`.\n */ function callback(fn, args, thisArg) {\n    if (fn && typeof fn.call === 'function') {\n        return fn.apply(thisArg, args);\n    }\n}\nfunction each(loopable, fn, thisArg, reverse) {\n    let i, len, keys;\n    if (isArray(loopable)) {\n        len = loopable.length;\n        if (reverse) {\n            for(i = len - 1; i >= 0; i--){\n                fn.call(thisArg, loopable[i], i);\n            }\n        } else {\n            for(i = 0; i < len; i++){\n                fn.call(thisArg, loopable[i], i);\n            }\n        }\n    } else if (isObject(loopable)) {\n        keys = Object.keys(loopable);\n        len = keys.length;\n        for(i = 0; i < len; i++){\n            fn.call(thisArg, loopable[keys[i]], keys[i]);\n        }\n    }\n}\n/**\n * Returns true if the `a0` and `a1` arrays have the same content, else returns false.\n * @param a0 - The array to compare\n * @param a1 - The array to compare\n * @private\n */ function _elementsEqual(a0, a1) {\n    let i, ilen, v0, v1;\n    if (!a0 || !a1 || a0.length !== a1.length) {\n        return false;\n    }\n    for(i = 0, ilen = a0.length; i < ilen; ++i){\n        v0 = a0[i];\n        v1 = a1[i];\n        if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Returns a deep copy of `source` without keeping references on objects and arrays.\n * @param source - The value to clone.\n */ function clone(source) {\n    if (isArray(source)) {\n        return source.map(clone);\n    }\n    if (isObject(source)) {\n        const target = Object.create(null);\n        const keys = Object.keys(source);\n        const klen = keys.length;\n        let k = 0;\n        for(; k < klen; ++k){\n            target[keys[k]] = clone(source[keys[k]]);\n        }\n        return target;\n    }\n    return source;\n}\nfunction isValidKey(key) {\n    return [\n        '__proto__',\n        'prototype',\n        'constructor'\n    ].indexOf(key) === -1;\n}\n/**\n * The default merger when Chart.helpers.merge is called without merger option.\n * Note(SB): also used by mergeConfig and mergeScaleConfig as fallback.\n * @private\n */ function _merger(key, target, source, options) {\n    if (!isValidKey(key)) {\n        return;\n    }\n    const tval = target[key];\n    const sval = source[key];\n    if (isObject(tval) && isObject(sval)) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        merge(tval, sval, options);\n    } else {\n        target[key] = clone(sval);\n    }\n}\nfunction merge(target, source, options) {\n    const sources = isArray(source) ? source : [\n        source\n    ];\n    const ilen = sources.length;\n    if (!isObject(target)) {\n        return target;\n    }\n    options = options || {};\n    const merger = options.merger || _merger;\n    let current;\n    for(let i = 0; i < ilen; ++i){\n        current = sources[i];\n        if (!isObject(current)) {\n            continue;\n        }\n        const keys = Object.keys(current);\n        for(let k = 0, klen = keys.length; k < klen; ++k){\n            merger(keys[k], target, current, options);\n        }\n    }\n    return target;\n}\nfunction mergeIf(target, source) {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return merge(target, source, {\n        merger: _mergerIf\n    });\n}\n/**\n * Merges source[key] in target[key] only if target[key] is undefined.\n * @private\n */ function _mergerIf(key, target, source) {\n    if (!isValidKey(key)) {\n        return;\n    }\n    const tval = target[key];\n    const sval = source[key];\n    if (isObject(tval) && isObject(sval)) {\n        mergeIf(tval, sval);\n    } else if (!Object.prototype.hasOwnProperty.call(target, key)) {\n        target[key] = clone(sval);\n    }\n}\n/**\n * @private\n */ function _deprecated(scope, value, previous, current) {\n    if (value !== undefined) {\n        console.warn(scope + ': \"' + previous + '\" is deprecated. Please use \"' + current + '\" instead');\n    }\n}\n// resolveObjectKey resolver cache\nconst keyResolvers = {\n    // Chart.helpers.core resolveObjectKey should resolve empty key to root object\n    '': (v)=>v,\n    // default resolvers\n    x: (o)=>o.x,\n    y: (o)=>o.y\n};\n/**\n * @private\n */ function _splitKey(key) {\n    const parts = key.split('.');\n    const keys = [];\n    let tmp = '';\n    for (const part of parts){\n        tmp += part;\n        if (tmp.endsWith('\\\\')) {\n            tmp = tmp.slice(0, -1) + '.';\n        } else {\n            keys.push(tmp);\n            tmp = '';\n        }\n    }\n    return keys;\n}\nfunction _getKeyResolver(key) {\n    const keys = _splitKey(key);\n    return (obj)=>{\n        for (const k of keys){\n            if (k === '') {\n                break;\n            }\n            obj = obj && obj[k];\n        }\n        return obj;\n    };\n}\nfunction resolveObjectKey(obj, key) {\n    const resolver = keyResolvers[key] || (keyResolvers[key] = _getKeyResolver(key));\n    return resolver(obj);\n}\n/**\n * @private\n */ function _capitalize(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}\nconst defined = (value)=>typeof value !== 'undefined';\nconst isFunction = (value)=>typeof value === 'function';\n// Adapted from https://stackoverflow.com/questions/31128855/comparing-ecma6-sets-for-equality#31129384\nconst setsEqual = (a, b)=>{\n    if (a.size !== b.size) {\n        return false;\n    }\n    for (const item of a){\n        if (!b.has(item)) {\n            return false;\n        }\n    }\n    return true;\n};\n/**\n * @param e - The event\n * @private\n */ function _isClickEvent(e) {\n    return e.type === 'mouseup' || e.type === 'click' || e.type === 'contextmenu';\n}\n\n/**\n * @alias Chart.helpers.math\n * @namespace\n */ const PI = Math.PI;\nconst TAU = 2 * PI;\nconst PITAU = TAU + PI;\nconst INFINITY = Number.POSITIVE_INFINITY;\nconst RAD_PER_DEG = PI / 180;\nconst HALF_PI = PI / 2;\nconst QUARTER_PI = PI / 4;\nconst TWO_THIRDS_PI = PI * 2 / 3;\nconst log10 = Math.log10;\nconst sign = Math.sign;\nfunction almostEquals(x, y, epsilon) {\n    return Math.abs(x - y) < epsilon;\n}\n/**\n * Implementation of the nice number algorithm used in determining where axis labels will go\n */ function niceNum(range) {\n    const roundedRange = Math.round(range);\n    range = almostEquals(range, roundedRange, range / 1000) ? roundedRange : range;\n    const niceRange = Math.pow(10, Math.floor(log10(range)));\n    const fraction = range / niceRange;\n    const niceFraction = fraction <= 1 ? 1 : fraction <= 2 ? 2 : fraction <= 5 ? 5 : 10;\n    return niceFraction * niceRange;\n}\n/**\n * Returns an array of factors sorted from 1 to sqrt(value)\n * @private\n */ function _factorize(value) {\n    const result = [];\n    const sqrt = Math.sqrt(value);\n    let i;\n    for(i = 1; i < sqrt; i++){\n        if (value % i === 0) {\n            result.push(i);\n            result.push(value / i);\n        }\n    }\n    if (sqrt === (sqrt | 0)) {\n        result.push(sqrt);\n    }\n    result.sort((a, b)=>a - b).pop();\n    return result;\n}\n/**\n * Verifies that attempting to coerce n to string or number won't throw a TypeError.\n */ function isNonPrimitive(n) {\n    return typeof n === 'symbol' || typeof n === 'object' && n !== null && !(Symbol.toPrimitive in n || 'toString' in n || 'valueOf' in n);\n}\nfunction isNumber(n) {\n    return !isNonPrimitive(n) && !isNaN(parseFloat(n)) && isFinite(n);\n}\nfunction almostWhole(x, epsilon) {\n    const rounded = Math.round(x);\n    return rounded - epsilon <= x && rounded + epsilon >= x;\n}\n/**\n * @private\n */ function _setMinAndMaxByKey(array, target, property) {\n    let i, ilen, value;\n    for(i = 0, ilen = array.length; i < ilen; i++){\n        value = array[i][property];\n        if (!isNaN(value)) {\n            target.min = Math.min(target.min, value);\n            target.max = Math.max(target.max, value);\n        }\n    }\n}\nfunction toRadians(degrees) {\n    return degrees * (PI / 180);\n}\nfunction toDegrees(radians) {\n    return radians * (180 / PI);\n}\n/**\n * Returns the number of decimal places\n * i.e. the number of digits after the decimal point, of the value of this Number.\n * @param x - A number.\n * @returns The number of decimal places.\n * @private\n */ function _decimalPlaces(x) {\n    if (!isNumberFinite(x)) {\n        return;\n    }\n    let e = 1;\n    let p = 0;\n    while(Math.round(x * e) / e !== x){\n        e *= 10;\n        p++;\n    }\n    return p;\n}\n// Gets the angle from vertical upright to the point about a centre.\nfunction getAngleFromPoint(centrePoint, anglePoint) {\n    const distanceFromXCenter = anglePoint.x - centrePoint.x;\n    const distanceFromYCenter = anglePoint.y - centrePoint.y;\n    const radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);\n    let angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);\n    if (angle < -0.5 * PI) {\n        angle += TAU; // make sure the returned angle is in the range of (-PI/2, 3PI/2]\n    }\n    return {\n        angle,\n        distance: radialDistanceFromCenter\n    };\n}\nfunction distanceBetweenPoints(pt1, pt2) {\n    return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));\n}\n/**\n * Shortest distance between angles, in either direction.\n * @private\n */ function _angleDiff(a, b) {\n    return (a - b + PITAU) % TAU - PI;\n}\n/**\n * Normalize angle to be between 0 and 2*PI\n * @private\n */ function _normalizeAngle(a) {\n    return (a % TAU + TAU) % TAU;\n}\n/**\n * @private\n */ function _angleBetween(angle, start, end, sameAngleIsFullCircle) {\n    const a = _normalizeAngle(angle);\n    const s = _normalizeAngle(start);\n    const e = _normalizeAngle(end);\n    const angleToStart = _normalizeAngle(s - a);\n    const angleToEnd = _normalizeAngle(e - a);\n    const startToAngle = _normalizeAngle(a - s);\n    const endToAngle = _normalizeAngle(a - e);\n    return a === s || a === e || sameAngleIsFullCircle && s === e || angleToStart > angleToEnd && startToAngle < endToAngle;\n}\n/**\n * Limit `value` between `min` and `max`\n * @param value\n * @param min\n * @param max\n * @private\n */ function _limitValue(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/**\n * @param {number} value\n * @private\n */ function _int16Range(value) {\n    return _limitValue(value, -32768, 32767);\n}\n/**\n * @param value\n * @param start\n * @param end\n * @param [epsilon]\n * @private\n */ function _isBetween(value, start, end, epsilon = 1e-6) {\n    return value >= Math.min(start, end) - epsilon && value <= Math.max(start, end) + epsilon;\n}\n\nfunction _lookup(table, value, cmp) {\n    cmp = cmp || ((index)=>table[index] < value);\n    let hi = table.length - 1;\n    let lo = 0;\n    let mid;\n    while(hi - lo > 1){\n        mid = lo + hi >> 1;\n        if (cmp(mid)) {\n            lo = mid;\n        } else {\n            hi = mid;\n        }\n    }\n    return {\n        lo,\n        hi\n    };\n}\n/**\n * Binary search\n * @param table - the table search. must be sorted!\n * @param key - property name for the value in each entry\n * @param value - value to find\n * @param last - lookup last index\n * @private\n */ const _lookupByKey = (table, key, value, last)=>_lookup(table, value, last ? (index)=>{\n        const ti = table[index][key];\n        return ti < value || ti === value && table[index + 1][key] === value;\n    } : (index)=>table[index][key] < value);\n/**\n * Reverse binary search\n * @param table - the table search. must be sorted!\n * @param key - property name for the value in each entry\n * @param value - value to find\n * @private\n */ const _rlookupByKey = (table, key, value)=>_lookup(table, value, (index)=>table[index][key] >= value);\n/**\n * Return subset of `values` between `min` and `max` inclusive.\n * Values are assumed to be in sorted order.\n * @param values - sorted array of values\n * @param min - min value\n * @param max - max value\n */ function _filterBetween(values, min, max) {\n    let start = 0;\n    let end = values.length;\n    while(start < end && values[start] < min){\n        start++;\n    }\n    while(end > start && values[end - 1] > max){\n        end--;\n    }\n    return start > 0 || end < values.length ? values.slice(start, end) : values;\n}\nconst arrayEvents = [\n    'push',\n    'pop',\n    'shift',\n    'splice',\n    'unshift'\n];\nfunction listenArrayEvents(array, listener) {\n    if (array._chartjs) {\n        array._chartjs.listeners.push(listener);\n        return;\n    }\n    Object.defineProperty(array, '_chartjs', {\n        configurable: true,\n        enumerable: false,\n        value: {\n            listeners: [\n                listener\n            ]\n        }\n    });\n    arrayEvents.forEach((key)=>{\n        const method = '_onData' + _capitalize(key);\n        const base = array[key];\n        Object.defineProperty(array, key, {\n            configurable: true,\n            enumerable: false,\n            value (...args) {\n                const res = base.apply(this, args);\n                array._chartjs.listeners.forEach((object)=>{\n                    if (typeof object[method] === 'function') {\n                        object[method](...args);\n                    }\n                });\n                return res;\n            }\n        });\n    });\n}\nfunction unlistenArrayEvents(array, listener) {\n    const stub = array._chartjs;\n    if (!stub) {\n        return;\n    }\n    const listeners = stub.listeners;\n    const index = listeners.indexOf(listener);\n    if (index !== -1) {\n        listeners.splice(index, 1);\n    }\n    if (listeners.length > 0) {\n        return;\n    }\n    arrayEvents.forEach((key)=>{\n        delete array[key];\n    });\n    delete array._chartjs;\n}\n/**\n * @param items\n */ function _arrayUnique(items) {\n    const set = new Set(items);\n    if (set.size === items.length) {\n        return items;\n    }\n    return Array.from(set);\n}\n\nfunction fontString(pixelSize, fontStyle, fontFamily) {\n    return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;\n}\n/**\n* Request animation polyfill\n*/ const requestAnimFrame = function() {\n    if (typeof window === 'undefined') {\n        return function(callback) {\n            return callback();\n        };\n    }\n    return window.requestAnimationFrame;\n}();\n/**\n * Throttles calling `fn` once per animation frame\n * Latest arguments are used on the actual call\n */ function throttled(fn, thisArg) {\n    let argsToUse = [];\n    let ticking = false;\n    return function(...args) {\n        // Save the args for use later\n        argsToUse = args;\n        if (!ticking) {\n            ticking = true;\n            requestAnimFrame.call(window, ()=>{\n                ticking = false;\n                fn.apply(thisArg, argsToUse);\n            });\n        }\n    };\n}\n/**\n * Debounces calling `fn` for `delay` ms\n */ function debounce(fn, delay) {\n    let timeout;\n    return function(...args) {\n        if (delay) {\n            clearTimeout(timeout);\n            timeout = setTimeout(fn, delay, args);\n        } else {\n            fn.apply(this, args);\n        }\n        return delay;\n    };\n}\n/**\n * Converts 'start' to 'left', 'end' to 'right' and others to 'center'\n * @private\n */ const _toLeftRightCenter = (align)=>align === 'start' ? 'left' : align === 'end' ? 'right' : 'center';\n/**\n * Returns `start`, `end` or `(start + end) / 2` depending on `align`. Defaults to `center`\n * @private\n */ const _alignStartEnd = (align, start, end)=>align === 'start' ? start : align === 'end' ? end : (start + end) / 2;\n/**\n * Returns `left`, `right` or `(left + right) / 2` depending on `align`. Defaults to `left`\n * @private\n */ const _textX = (align, left, right, rtl)=>{\n    const check = rtl ? 'left' : 'right';\n    return align === check ? right : align === 'center' ? (left + right) / 2 : left;\n};\n/**\n * Return start and count of visible points.\n * @private\n */ function _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled) {\n    const pointCount = points.length;\n    let start = 0;\n    let count = pointCount;\n    if (meta._sorted) {\n        const { iScale , vScale , _parsed  } = meta;\n        const spanGaps = meta.dataset ? meta.dataset.options ? meta.dataset.options.spanGaps : null : null;\n        const axis = iScale.axis;\n        const { min , max , minDefined , maxDefined  } = iScale.getUserBounds();\n        if (minDefined) {\n            start = Math.min(// @ts-expect-error Need to type _parsed\n            _lookupByKey(_parsed, axis, min).lo, // @ts-expect-error Need to fix types on _lookupByKey\n            animationsDisabled ? pointCount : _lookupByKey(points, axis, iScale.getPixelForValue(min)).lo);\n            if (spanGaps) {\n                const distanceToDefinedLo = _parsed.slice(0, start + 1).reverse().findIndex((point)=>!isNullOrUndef(point[vScale.axis]));\n                start -= Math.max(0, distanceToDefinedLo);\n            }\n            start = _limitValue(start, 0, pointCount - 1);\n        }\n        if (maxDefined) {\n            let end = Math.max(// @ts-expect-error Need to type _parsed\n            _lookupByKey(_parsed, iScale.axis, max, true).hi + 1, // @ts-expect-error Need to fix types on _lookupByKey\n            animationsDisabled ? 0 : _lookupByKey(points, axis, iScale.getPixelForValue(max), true).hi + 1);\n            if (spanGaps) {\n                const distanceToDefinedHi = _parsed.slice(end - 1).findIndex((point)=>!isNullOrUndef(point[vScale.axis]));\n                end += Math.max(0, distanceToDefinedHi);\n            }\n            count = _limitValue(end, start, pointCount) - start;\n        } else {\n            count = pointCount - start;\n        }\n    }\n    return {\n        start,\n        count\n    };\n}\n/**\n * Checks if the scale ranges have changed.\n * @param {object} meta - dataset meta.\n * @returns {boolean}\n * @private\n */ function _scaleRangesChanged(meta) {\n    const { xScale , yScale , _scaleRanges  } = meta;\n    const newRanges = {\n        xmin: xScale.min,\n        xmax: xScale.max,\n        ymin: yScale.min,\n        ymax: yScale.max\n    };\n    if (!_scaleRanges) {\n        meta._scaleRanges = newRanges;\n        return true;\n    }\n    const changed = _scaleRanges.xmin !== xScale.min || _scaleRanges.xmax !== xScale.max || _scaleRanges.ymin !== yScale.min || _scaleRanges.ymax !== yScale.max;\n    Object.assign(_scaleRanges, newRanges);\n    return changed;\n}\n\nconst atEdge = (t)=>t === 0 || t === 1;\nconst elasticIn = (t, s, p)=>-(Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * TAU / p));\nconst elasticOut = (t, s, p)=>Math.pow(2, -10 * t) * Math.sin((t - s) * TAU / p) + 1;\n/**\n * Easing functions adapted from Robert Penner's easing equations.\n * @namespace Chart.helpers.easing.effects\n * @see http://www.robertpenner.com/easing/\n */ const effects = {\n    linear: (t)=>t,\n    easeInQuad: (t)=>t * t,\n    easeOutQuad: (t)=>-t * (t - 2),\n    easeInOutQuad: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t : -0.5 * (--t * (t - 2) - 1),\n    easeInCubic: (t)=>t * t * t,\n    easeOutCubic: (t)=>(t -= 1) * t * t + 1,\n    easeInOutCubic: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t : 0.5 * ((t -= 2) * t * t + 2),\n    easeInQuart: (t)=>t * t * t * t,\n    easeOutQuart: (t)=>-((t -= 1) * t * t * t - 1),\n    easeInOutQuart: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t * t : -0.5 * ((t -= 2) * t * t * t - 2),\n    easeInQuint: (t)=>t * t * t * t * t,\n    easeOutQuint: (t)=>(t -= 1) * t * t * t * t + 1,\n    easeInOutQuint: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t * t * t : 0.5 * ((t -= 2) * t * t * t * t + 2),\n    easeInSine: (t)=>-Math.cos(t * HALF_PI) + 1,\n    easeOutSine: (t)=>Math.sin(t * HALF_PI),\n    easeInOutSine: (t)=>-0.5 * (Math.cos(PI * t) - 1),\n    easeInExpo: (t)=>t === 0 ? 0 : Math.pow(2, 10 * (t - 1)),\n    easeOutExpo: (t)=>t === 1 ? 1 : -Math.pow(2, -10 * t) + 1,\n    easeInOutExpo: (t)=>atEdge(t) ? t : t < 0.5 ? 0.5 * Math.pow(2, 10 * (t * 2 - 1)) : 0.5 * (-Math.pow(2, -10 * (t * 2 - 1)) + 2),\n    easeInCirc: (t)=>t >= 1 ? t : -(Math.sqrt(1 - t * t) - 1),\n    easeOutCirc: (t)=>Math.sqrt(1 - (t -= 1) * t),\n    easeInOutCirc: (t)=>(t /= 0.5) < 1 ? -0.5 * (Math.sqrt(1 - t * t) - 1) : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1),\n    easeInElastic: (t)=>atEdge(t) ? t : elasticIn(t, 0.075, 0.3),\n    easeOutElastic: (t)=>atEdge(t) ? t : elasticOut(t, 0.075, 0.3),\n    easeInOutElastic (t) {\n        const s = 0.1125;\n        const p = 0.45;\n        return atEdge(t) ? t : t < 0.5 ? 0.5 * elasticIn(t * 2, s, p) : 0.5 + 0.5 * elasticOut(t * 2 - 1, s, p);\n    },\n    easeInBack (t) {\n        const s = 1.70158;\n        return t * t * ((s + 1) * t - s);\n    },\n    easeOutBack (t) {\n        const s = 1.70158;\n        return (t -= 1) * t * ((s + 1) * t + s) + 1;\n    },\n    easeInOutBack (t) {\n        let s = 1.70158;\n        if ((t /= 0.5) < 1) {\n            return 0.5 * (t * t * (((s *= 1.525) + 1) * t - s));\n        }\n        return 0.5 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2);\n    },\n    easeInBounce: (t)=>1 - effects.easeOutBounce(1 - t),\n    easeOutBounce (t) {\n        const m = 7.5625;\n        const d = 2.75;\n        if (t < 1 / d) {\n            return m * t * t;\n        }\n        if (t < 2 / d) {\n            return m * (t -= 1.5 / d) * t + 0.75;\n        }\n        if (t < 2.5 / d) {\n            return m * (t -= 2.25 / d) * t + 0.9375;\n        }\n        return m * (t -= 2.625 / d) * t + 0.984375;\n    },\n    easeInOutBounce: (t)=>t < 0.5 ? effects.easeInBounce(t * 2) * 0.5 : effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5\n};\n\nfunction isPatternOrGradient(value) {\n    if (value && typeof value === 'object') {\n        const type = value.toString();\n        return type === '[object CanvasPattern]' || type === '[object CanvasGradient]';\n    }\n    return false;\n}\nfunction color(value) {\n    return isPatternOrGradient(value) ? value : new Color(value);\n}\nfunction getHoverColor(value) {\n    return isPatternOrGradient(value) ? value : new Color(value).saturate(0.5).darken(0.1).hexString();\n}\n\nconst numbers = [\n    'x',\n    'y',\n    'borderWidth',\n    'radius',\n    'tension'\n];\nconst colors = [\n    'color',\n    'borderColor',\n    'backgroundColor'\n];\nfunction applyAnimationsDefaults(defaults) {\n    defaults.set('animation', {\n        delay: undefined,\n        duration: 1000,\n        easing: 'easeOutQuart',\n        fn: undefined,\n        from: undefined,\n        loop: undefined,\n        to: undefined,\n        type: undefined\n    });\n    defaults.describe('animation', {\n        _fallback: false,\n        _indexable: false,\n        _scriptable: (name)=>name !== 'onProgress' && name !== 'onComplete' && name !== 'fn'\n    });\n    defaults.set('animations', {\n        colors: {\n            type: 'color',\n            properties: colors\n        },\n        numbers: {\n            type: 'number',\n            properties: numbers\n        }\n    });\n    defaults.describe('animations', {\n        _fallback: 'animation'\n    });\n    defaults.set('transitions', {\n        active: {\n            animation: {\n                duration: 400\n            }\n        },\n        resize: {\n            animation: {\n                duration: 0\n            }\n        },\n        show: {\n            animations: {\n                colors: {\n                    from: 'transparent'\n                },\n                visible: {\n                    type: 'boolean',\n                    duration: 0\n                }\n            }\n        },\n        hide: {\n            animations: {\n                colors: {\n                    to: 'transparent'\n                },\n                visible: {\n                    type: 'boolean',\n                    easing: 'linear',\n                    fn: (v)=>v | 0\n                }\n            }\n        }\n    });\n}\n\nfunction applyLayoutsDefaults(defaults) {\n    defaults.set('layout', {\n        autoPadding: true,\n        padding: {\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0\n        }\n    });\n}\n\nconst intlCache = new Map();\nfunction getNumberFormat(locale, options) {\n    options = options || {};\n    const cacheKey = locale + JSON.stringify(options);\n    let formatter = intlCache.get(cacheKey);\n    if (!formatter) {\n        formatter = new Intl.NumberFormat(locale, options);\n        intlCache.set(cacheKey, formatter);\n    }\n    return formatter;\n}\nfunction formatNumber(num, locale, options) {\n    return getNumberFormat(locale, options).format(num);\n}\n\nconst formatters = {\n values (value) {\n        return isArray(value) ?  value : '' + value;\n    },\n numeric (tickValue, index, ticks) {\n        if (tickValue === 0) {\n            return '0';\n        }\n        const locale = this.chart.options.locale;\n        let notation;\n        let delta = tickValue;\n        if (ticks.length > 1) {\n            const maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));\n            if (maxTick < 1e-4 || maxTick > 1e+15) {\n                notation = 'scientific';\n            }\n            delta = calculateDelta(tickValue, ticks);\n        }\n        const logDelta = log10(Math.abs(delta));\n        const numDecimal = isNaN(logDelta) ? 1 : Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0);\n        const options = {\n            notation,\n            minimumFractionDigits: numDecimal,\n            maximumFractionDigits: numDecimal\n        };\n        Object.assign(options, this.options.ticks.format);\n        return formatNumber(tickValue, locale, options);\n    },\n logarithmic (tickValue, index, ticks) {\n        if (tickValue === 0) {\n            return '0';\n        }\n        const remain = ticks[index].significand || tickValue / Math.pow(10, Math.floor(log10(tickValue)));\n        if ([\n            1,\n            2,\n            3,\n            5,\n            10,\n            15\n        ].includes(remain) || index > 0.8 * ticks.length) {\n            return formatters.numeric.call(this, tickValue, index, ticks);\n        }\n        return '';\n    }\n};\nfunction calculateDelta(tickValue, ticks) {\n    let delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;\n    if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) {\n        delta = tickValue - Math.floor(tickValue);\n    }\n    return delta;\n}\n var Ticks = {\n    formatters\n};\n\nfunction applyScaleDefaults(defaults) {\n    defaults.set('scale', {\n        display: true,\n        offset: false,\n        reverse: false,\n        beginAtZero: false,\n bounds: 'ticks',\n        clip: true,\n grace: 0,\n        grid: {\n            display: true,\n            lineWidth: 1,\n            drawOnChartArea: true,\n            drawTicks: true,\n            tickLength: 8,\n            tickWidth: (_ctx, options)=>options.lineWidth,\n            tickColor: (_ctx, options)=>options.color,\n            offset: false\n        },\n        border: {\n            display: true,\n            dash: [],\n            dashOffset: 0.0,\n            width: 1\n        },\n        title: {\n            display: false,\n            text: '',\n            padding: {\n                top: 4,\n                bottom: 4\n            }\n        },\n        ticks: {\n            minRotation: 0,\n            maxRotation: 50,\n            mirror: false,\n            textStrokeWidth: 0,\n            textStrokeColor: '',\n            padding: 3,\n            display: true,\n            autoSkip: true,\n            autoSkipPadding: 3,\n            labelOffset: 0,\n            callback: Ticks.formatters.values,\n            minor: {},\n            major: {},\n            align: 'center',\n            crossAlign: 'near',\n            showLabelBackdrop: false,\n            backdropColor: 'rgba(255, 255, 255, 0.75)',\n            backdropPadding: 2\n        }\n    });\n    defaults.route('scale.ticks', 'color', '', 'color');\n    defaults.route('scale.grid', 'color', '', 'borderColor');\n    defaults.route('scale.border', 'color', '', 'borderColor');\n    defaults.route('scale.title', 'color', '', 'color');\n    defaults.describe('scale', {\n        _fallback: false,\n        _scriptable: (name)=>!name.startsWith('before') && !name.startsWith('after') && name !== 'callback' && name !== 'parser',\n        _indexable: (name)=>name !== 'borderDash' && name !== 'tickBorderDash' && name !== 'dash'\n    });\n    defaults.describe('scales', {\n        _fallback: 'scale'\n    });\n    defaults.describe('scale.ticks', {\n        _scriptable: (name)=>name !== 'backdropPadding' && name !== 'callback',\n        _indexable: (name)=>name !== 'backdropPadding'\n    });\n}\n\nconst overrides = Object.create(null);\nconst descriptors = Object.create(null);\n function getScope$1(node, key) {\n    if (!key) {\n        return node;\n    }\n    const keys = key.split('.');\n    for(let i = 0, n = keys.length; i < n; ++i){\n        const k = keys[i];\n        node = node[k] || (node[k] = Object.create(null));\n    }\n    return node;\n}\nfunction set(root, scope, values) {\n    if (typeof scope === 'string') {\n        return merge(getScope$1(root, scope), values);\n    }\n    return merge(getScope$1(root, ''), scope);\n}\n class Defaults {\n    constructor(_descriptors, _appliers){\n        this.animation = undefined;\n        this.backgroundColor = 'rgba(0,0,0,0.1)';\n        this.borderColor = 'rgba(0,0,0,0.1)';\n        this.color = '#666';\n        this.datasets = {};\n        this.devicePixelRatio = (context)=>context.chart.platform.getDevicePixelRatio();\n        this.elements = {};\n        this.events = [\n            'mousemove',\n            'mouseout',\n            'click',\n            'touchstart',\n            'touchmove'\n        ];\n        this.font = {\n            family: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n            size: 12,\n            style: 'normal',\n            lineHeight: 1.2,\n            weight: null\n        };\n        this.hover = {};\n        this.hoverBackgroundColor = (ctx, options)=>getHoverColor(options.backgroundColor);\n        this.hoverBorderColor = (ctx, options)=>getHoverColor(options.borderColor);\n        this.hoverColor = (ctx, options)=>getHoverColor(options.color);\n        this.indexAxis = 'x';\n        this.interaction = {\n            mode: 'nearest',\n            intersect: true,\n            includeInvisible: false\n        };\n        this.maintainAspectRatio = true;\n        this.onHover = null;\n        this.onClick = null;\n        this.parsing = true;\n        this.plugins = {};\n        this.responsive = true;\n        this.scale = undefined;\n        this.scales = {};\n        this.showLine = true;\n        this.drawActiveElementsOnTop = true;\n        this.describe(_descriptors);\n        this.apply(_appliers);\n    }\n set(scope, values) {\n        return set(this, scope, values);\n    }\n get(scope) {\n        return getScope$1(this, scope);\n    }\n describe(scope, values) {\n        return set(descriptors, scope, values);\n    }\n    override(scope, values) {\n        return set(overrides, scope, values);\n    }\n route(scope, name, targetScope, targetName) {\n        const scopeObject = getScope$1(this, scope);\n        const targetScopeObject = getScope$1(this, targetScope);\n        const privateName = '_' + name;\n        Object.defineProperties(scopeObject, {\n            [privateName]: {\n                value: scopeObject[name],\n                writable: true\n            },\n            [name]: {\n                enumerable: true,\n                get () {\n                    const local = this[privateName];\n                    const target = targetScopeObject[targetName];\n                    if (isObject(local)) {\n                        return Object.assign({}, target, local);\n                    }\n                    return valueOrDefault(local, target);\n                },\n                set (value) {\n                    this[privateName] = value;\n                }\n            }\n        });\n    }\n    apply(appliers) {\n        appliers.forEach((apply)=>apply(this));\n    }\n}\nvar defaults = /* #__PURE__ */ new Defaults({\n    _scriptable: (name)=>!name.startsWith('on'),\n    _indexable: (name)=>name !== 'events',\n    hover: {\n        _fallback: 'interaction'\n    },\n    interaction: {\n        _scriptable: false,\n        _indexable: false\n    }\n}, [\n    applyAnimationsDefaults,\n    applyLayoutsDefaults,\n    applyScaleDefaults\n]);\n\n/**\n * Converts the given font object into a CSS font string.\n * @param font - A font object.\n * @return The CSS font string. See https://developer.mozilla.org/en-US/docs/Web/CSS/font\n * @private\n */ function toFontString(font) {\n    if (!font || isNullOrUndef(font.size) || isNullOrUndef(font.family)) {\n        return null;\n    }\n    return (font.style ? font.style + ' ' : '') + (font.weight ? font.weight + ' ' : '') + font.size + 'px ' + font.family;\n}\n/**\n * @private\n */ function _measureText(ctx, data, gc, longest, string) {\n    let textWidth = data[string];\n    if (!textWidth) {\n        textWidth = data[string] = ctx.measureText(string).width;\n        gc.push(string);\n    }\n    if (textWidth > longest) {\n        longest = textWidth;\n    }\n    return longest;\n}\n/**\n * @private\n */ // eslint-disable-next-line complexity\nfunction _longestText(ctx, font, arrayOfThings, cache) {\n    cache = cache || {};\n    let data = cache.data = cache.data || {};\n    let gc = cache.garbageCollect = cache.garbageCollect || [];\n    if (cache.font !== font) {\n        data = cache.data = {};\n        gc = cache.garbageCollect = [];\n        cache.font = font;\n    }\n    ctx.save();\n    ctx.font = font;\n    let longest = 0;\n    const ilen = arrayOfThings.length;\n    let i, j, jlen, thing, nestedThing;\n    for(i = 0; i < ilen; i++){\n        thing = arrayOfThings[i];\n        // Undefined strings and arrays should not be measured\n        if (thing !== undefined && thing !== null && !isArray(thing)) {\n            longest = _measureText(ctx, data, gc, longest, thing);\n        } else if (isArray(thing)) {\n            // if it is an array lets measure each element\n            // to do maybe simplify this function a bit so we can do this more recursively?\n            for(j = 0, jlen = thing.length; j < jlen; j++){\n                nestedThing = thing[j];\n                // Undefined strings and arrays should not be measured\n                if (nestedThing !== undefined && nestedThing !== null && !isArray(nestedThing)) {\n                    longest = _measureText(ctx, data, gc, longest, nestedThing);\n                }\n            }\n        }\n    }\n    ctx.restore();\n    const gcLen = gc.length / 2;\n    if (gcLen > arrayOfThings.length) {\n        for(i = 0; i < gcLen; i++){\n            delete data[gc[i]];\n        }\n        gc.splice(0, gcLen);\n    }\n    return longest;\n}\n/**\n * Returns the aligned pixel value to avoid anti-aliasing blur\n * @param chart - The chart instance.\n * @param pixel - A pixel value.\n * @param width - The width of the element.\n * @returns The aligned pixel value.\n * @private\n */ function _alignPixel(chart, pixel, width) {\n    const devicePixelRatio = chart.currentDevicePixelRatio;\n    const halfWidth = width !== 0 ? Math.max(width / 2, 0.5) : 0;\n    return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;\n}\n/**\n * Clears the entire canvas.\n */ function clearCanvas(canvas, ctx) {\n    if (!ctx && !canvas) {\n        return;\n    }\n    ctx = ctx || canvas.getContext('2d');\n    ctx.save();\n    // canvas.width and canvas.height do not consider the canvas transform,\n    // while clearRect does\n    ctx.resetTransform();\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.restore();\n}\nfunction drawPoint(ctx, options, x, y) {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    drawPointLegend(ctx, options, x, y, null);\n}\n// eslint-disable-next-line complexity\nfunction drawPointLegend(ctx, options, x, y, w) {\n    let type, xOffset, yOffset, size, cornerRadius, width, xOffsetW, yOffsetW;\n    const style = options.pointStyle;\n    const rotation = options.rotation;\n    const radius = options.radius;\n    let rad = (rotation || 0) * RAD_PER_DEG;\n    if (style && typeof style === 'object') {\n        type = style.toString();\n        if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {\n            ctx.save();\n            ctx.translate(x, y);\n            ctx.rotate(rad);\n            ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);\n            ctx.restore();\n            return;\n        }\n    }\n    if (isNaN(radius) || radius <= 0) {\n        return;\n    }\n    ctx.beginPath();\n    switch(style){\n        // Default includes circle\n        default:\n            if (w) {\n                ctx.ellipse(x, y, w / 2, radius, 0, 0, TAU);\n            } else {\n                ctx.arc(x, y, radius, 0, TAU);\n            }\n            ctx.closePath();\n            break;\n        case 'triangle':\n            width = w ? w / 2 : radius;\n            ctx.moveTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\n            rad += TWO_THIRDS_PI;\n            ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\n            rad += TWO_THIRDS_PI;\n            ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\n            ctx.closePath();\n            break;\n        case 'rectRounded':\n            // NOTE: the rounded rect implementation changed to use `arc` instead of\n            // `quadraticCurveTo` since it generates better results when rect is\n            // almost a circle. 0.516 (instead of 0.5) produces results with visually\n            // closer proportion to the previous impl and it is inscribed in the\n            // circle with `radius`. For more details, see the following PRs:\n            // https://github.com/chartjs/Chart.js/issues/5597\n            // https://github.com/chartjs/Chart.js/issues/5858\n            cornerRadius = radius * 0.516;\n            size = radius - cornerRadius;\n            xOffset = Math.cos(rad + QUARTER_PI) * size;\n            xOffsetW = Math.cos(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);\n            yOffset = Math.sin(rad + QUARTER_PI) * size;\n            yOffsetW = Math.sin(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);\n            ctx.arc(x - xOffsetW, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);\n            ctx.arc(x + yOffsetW, y - xOffset, cornerRadius, rad - HALF_PI, rad);\n            ctx.arc(x + xOffsetW, y + yOffset, cornerRadius, rad, rad + HALF_PI);\n            ctx.arc(x - yOffsetW, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);\n            ctx.closePath();\n            break;\n        case 'rect':\n            if (!rotation) {\n                size = Math.SQRT1_2 * radius;\n                width = w ? w / 2 : size;\n                ctx.rect(x - width, y - size, 2 * width, 2 * size);\n                break;\n            }\n            rad += QUARTER_PI;\n        /* falls through */ case 'rectRot':\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            ctx.closePath();\n            break;\n        case 'crossRot':\n            rad += QUARTER_PI;\n        /* falls through */ case 'cross':\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.moveTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            break;\n        case 'star':\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.moveTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            rad += QUARTER_PI;\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.moveTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            break;\n        case 'line':\n            xOffset = w ? w / 2 : Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            ctx.moveTo(x - xOffset, y - yOffset);\n            ctx.lineTo(x + xOffset, y + yOffset);\n            break;\n        case 'dash':\n            ctx.moveTo(x, y);\n            ctx.lineTo(x + Math.cos(rad) * (w ? w / 2 : radius), y + Math.sin(rad) * radius);\n            break;\n        case false:\n            ctx.closePath();\n            break;\n    }\n    ctx.fill();\n    if (options.borderWidth > 0) {\n        ctx.stroke();\n    }\n}\n/**\n * Returns true if the point is inside the rectangle\n * @param point - The point to test\n * @param area - The rectangle\n * @param margin - allowed margin\n * @private\n */ function _isPointInArea(point, area, margin) {\n    margin = margin || 0.5; // margin - default is to match rounded decimals\n    return !area || point && point.x > area.left - margin && point.x < area.right + margin && point.y > area.top - margin && point.y < area.bottom + margin;\n}\nfunction clipArea(ctx, area) {\n    ctx.save();\n    ctx.beginPath();\n    ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);\n    ctx.clip();\n}\nfunction unclipArea(ctx) {\n    ctx.restore();\n}\n/**\n * @private\n */ function _steppedLineTo(ctx, previous, target, flip, mode) {\n    if (!previous) {\n        return ctx.lineTo(target.x, target.y);\n    }\n    if (mode === 'middle') {\n        const midpoint = (previous.x + target.x) / 2.0;\n        ctx.lineTo(midpoint, previous.y);\n        ctx.lineTo(midpoint, target.y);\n    } else if (mode === 'after' !== !!flip) {\n        ctx.lineTo(previous.x, target.y);\n    } else {\n        ctx.lineTo(target.x, previous.y);\n    }\n    ctx.lineTo(target.x, target.y);\n}\n/**\n * @private\n */ function _bezierCurveTo(ctx, previous, target, flip) {\n    if (!previous) {\n        return ctx.lineTo(target.x, target.y);\n    }\n    ctx.bezierCurveTo(flip ? previous.cp1x : previous.cp2x, flip ? previous.cp1y : previous.cp2y, flip ? target.cp2x : target.cp1x, flip ? target.cp2y : target.cp1y, target.x, target.y);\n}\nfunction setRenderOpts(ctx, opts) {\n    if (opts.translation) {\n        ctx.translate(opts.translation[0], opts.translation[1]);\n    }\n    if (!isNullOrUndef(opts.rotation)) {\n        ctx.rotate(opts.rotation);\n    }\n    if (opts.color) {\n        ctx.fillStyle = opts.color;\n    }\n    if (opts.textAlign) {\n        ctx.textAlign = opts.textAlign;\n    }\n    if (opts.textBaseline) {\n        ctx.textBaseline = opts.textBaseline;\n    }\n}\nfunction decorateText(ctx, x, y, line, opts) {\n    if (opts.strikethrough || opts.underline) {\n        /**\n     * Now that IE11 support has been dropped, we can use more\n     * of the TextMetrics object. The actual bounding boxes\n     * are unflagged in Chrome, Firefox, Edge, and Safari so they\n     * can be safely used.\n     * See https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics#Browser_compatibility\n     */ const metrics = ctx.measureText(line);\n        const left = x - metrics.actualBoundingBoxLeft;\n        const right = x + metrics.actualBoundingBoxRight;\n        const top = y - metrics.actualBoundingBoxAscent;\n        const bottom = y + metrics.actualBoundingBoxDescent;\n        const yDecoration = opts.strikethrough ? (top + bottom) / 2 : bottom;\n        ctx.strokeStyle = ctx.fillStyle;\n        ctx.beginPath();\n        ctx.lineWidth = opts.decorationWidth || 2;\n        ctx.moveTo(left, yDecoration);\n        ctx.lineTo(right, yDecoration);\n        ctx.stroke();\n    }\n}\nfunction drawBackdrop(ctx, opts) {\n    const oldColor = ctx.fillStyle;\n    ctx.fillStyle = opts.color;\n    ctx.fillRect(opts.left, opts.top, opts.width, opts.height);\n    ctx.fillStyle = oldColor;\n}\n/**\n * Render text onto the canvas\n */ function renderText(ctx, text, x, y, font, opts = {}) {\n    const lines = isArray(text) ? text : [\n        text\n    ];\n    const stroke = opts.strokeWidth > 0 && opts.strokeColor !== '';\n    let i, line;\n    ctx.save();\n    ctx.font = font.string;\n    setRenderOpts(ctx, opts);\n    for(i = 0; i < lines.length; ++i){\n        line = lines[i];\n        if (opts.backdrop) {\n            drawBackdrop(ctx, opts.backdrop);\n        }\n        if (stroke) {\n            if (opts.strokeColor) {\n                ctx.strokeStyle = opts.strokeColor;\n            }\n            if (!isNullOrUndef(opts.strokeWidth)) {\n                ctx.lineWidth = opts.strokeWidth;\n            }\n            ctx.strokeText(line, x, y, opts.maxWidth);\n        }\n        ctx.fillText(line, x, y, opts.maxWidth);\n        decorateText(ctx, x, y, line, opts);\n        y += Number(font.lineHeight);\n    }\n    ctx.restore();\n}\n/**\n * Add a path of a rectangle with rounded corners to the current sub-path\n * @param ctx - Context\n * @param rect - Bounding rect\n */ function addRoundedRectPath(ctx, rect) {\n    const { x , y , w , h , radius  } = rect;\n    // top left arc\n    ctx.arc(x + radius.topLeft, y + radius.topLeft, radius.topLeft, 1.5 * PI, PI, true);\n    // line from top left to bottom left\n    ctx.lineTo(x, y + h - radius.bottomLeft);\n    // bottom left arc\n    ctx.arc(x + radius.bottomLeft, y + h - radius.bottomLeft, radius.bottomLeft, PI, HALF_PI, true);\n    // line from bottom left to bottom right\n    ctx.lineTo(x + w - radius.bottomRight, y + h);\n    // bottom right arc\n    ctx.arc(x + w - radius.bottomRight, y + h - radius.bottomRight, radius.bottomRight, HALF_PI, 0, true);\n    // line from bottom right to top right\n    ctx.lineTo(x + w, y + radius.topRight);\n    // top right arc\n    ctx.arc(x + w - radius.topRight, y + radius.topRight, radius.topRight, 0, -HALF_PI, true);\n    // line from top right to top left\n    ctx.lineTo(x + radius.topLeft, y);\n}\n\nconst LINE_HEIGHT = /^(normal|(\\d+(?:\\.\\d+)?)(px|em|%)?)$/;\nconst FONT_STYLE = /^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;\n/**\n * @alias Chart.helpers.options\n * @namespace\n */ /**\n * Converts the given line height `value` in pixels for a specific font `size`.\n * @param value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').\n * @param size - The font size (in pixels) used to resolve relative `value`.\n * @returns The effective line height in pixels (size * 1.2 if value is invalid).\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height\n * @since 2.7.0\n */ function toLineHeight(value, size) {\n    const matches = ('' + value).match(LINE_HEIGHT);\n    if (!matches || matches[1] === 'normal') {\n        return size * 1.2;\n    }\n    value = +matches[2];\n    switch(matches[3]){\n        case 'px':\n            return value;\n        case '%':\n            value /= 100;\n            break;\n    }\n    return size * value;\n}\nconst numberOrZero = (v)=>+v || 0;\nfunction _readValueToProps(value, props) {\n    const ret = {};\n    const objProps = isObject(props);\n    const keys = objProps ? Object.keys(props) : props;\n    const read = isObject(value) ? objProps ? (prop)=>valueOrDefault(value[prop], value[props[prop]]) : (prop)=>value[prop] : ()=>value;\n    for (const prop of keys){\n        ret[prop] = numberOrZero(read(prop));\n    }\n    return ret;\n}\n/**\n * Converts the given value into a TRBL object.\n * @param value - If a number, set the value to all TRBL component,\n *  else, if an object, use defined properties and sets undefined ones to 0.\n *  x / y are shorthands for same value for left/right and top/bottom.\n * @returns The padding values (top, right, bottom, left)\n * @since 3.0.0\n */ function toTRBL(value) {\n    return _readValueToProps(value, {\n        top: 'y',\n        right: 'x',\n        bottom: 'y',\n        left: 'x'\n    });\n}\n/**\n * Converts the given value into a TRBL corners object (similar with css border-radius).\n * @param value - If a number, set the value to all TRBL corner components,\n *  else, if an object, use defined properties and sets undefined ones to 0.\n * @returns The TRBL corner values (topLeft, topRight, bottomLeft, bottomRight)\n * @since 3.0.0\n */ function toTRBLCorners(value) {\n    return _readValueToProps(value, [\n        'topLeft',\n        'topRight',\n        'bottomLeft',\n        'bottomRight'\n    ]);\n}\n/**\n * Converts the given value into a padding object with pre-computed width/height.\n * @param value - If a number, set the value to all TRBL component,\n *  else, if an object, use defined properties and sets undefined ones to 0.\n *  x / y are shorthands for same value for left/right and top/bottom.\n * @returns The padding values (top, right, bottom, left, width, height)\n * @since 2.7.0\n */ function toPadding(value) {\n    const obj = toTRBL(value);\n    obj.width = obj.left + obj.right;\n    obj.height = obj.top + obj.bottom;\n    return obj;\n}\n/**\n * Parses font options and returns the font object.\n * @param options - A object that contains font options to be parsed.\n * @param fallback - A object that contains fallback font options.\n * @return The font object.\n * @private\n */ function toFont(options, fallback) {\n    options = options || {};\n    fallback = fallback || defaults.font;\n    let size = valueOrDefault(options.size, fallback.size);\n    if (typeof size === 'string') {\n        size = parseInt(size, 10);\n    }\n    let style = valueOrDefault(options.style, fallback.style);\n    if (style && !('' + style).match(FONT_STYLE)) {\n        console.warn('Invalid font style specified: \"' + style + '\"');\n        style = undefined;\n    }\n    const font = {\n        family: valueOrDefault(options.family, fallback.family),\n        lineHeight: toLineHeight(valueOrDefault(options.lineHeight, fallback.lineHeight), size),\n        size,\n        style,\n        weight: valueOrDefault(options.weight, fallback.weight),\n        string: ''\n    };\n    font.string = toFontString(font);\n    return font;\n}\n/**\n * Evaluates the given `inputs` sequentially and returns the first defined value.\n * @param inputs - An array of values, falling back to the last value.\n * @param context - If defined and the current value is a function, the value\n * is called with `context` as first argument and the result becomes the new input.\n * @param index - If defined and the current value is an array, the value\n * at `index` become the new input.\n * @param info - object to return information about resolution in\n * @param info.cacheable - Will be set to `false` if option is not cacheable.\n * @since 2.7.0\n */ function resolve(inputs, context, index, info) {\n    let cacheable = true;\n    let i, ilen, value;\n    for(i = 0, ilen = inputs.length; i < ilen; ++i){\n        value = inputs[i];\n        if (value === undefined) {\n            continue;\n        }\n        if (context !== undefined && typeof value === 'function') {\n            value = value(context);\n            cacheable = false;\n        }\n        if (index !== undefined && isArray(value)) {\n            value = value[index % value.length];\n            cacheable = false;\n        }\n        if (value !== undefined) {\n            if (info && !cacheable) {\n                info.cacheable = false;\n            }\n            return value;\n        }\n    }\n}\n/**\n * @param minmax\n * @param grace\n * @param beginAtZero\n * @private\n */ function _addGrace(minmax, grace, beginAtZero) {\n    const { min , max  } = minmax;\n    const change = toDimension(grace, (max - min) / 2);\n    const keepZero = (value, add)=>beginAtZero && value === 0 ? 0 : value + add;\n    return {\n        min: keepZero(min, -Math.abs(change)),\n        max: keepZero(max, change)\n    };\n}\nfunction createContext(parentContext, context) {\n    return Object.assign(Object.create(parentContext), context);\n}\n\n/**\n * Creates a Proxy for resolving raw values for options.\n * @param scopes - The option scopes to look for values, in resolution order\n * @param prefixes - The prefixes for values, in resolution order.\n * @param rootScopes - The root option scopes\n * @param fallback - Parent scopes fallback\n * @param getTarget - callback for getting the target for changed values\n * @returns Proxy\n * @private\n */ function _createResolver(scopes, prefixes = [\n    ''\n], rootScopes, fallback, getTarget = ()=>scopes[0]) {\n    const finalRootScopes = rootScopes || scopes;\n    if (typeof fallback === 'undefined') {\n        fallback = _resolve('_fallback', scopes);\n    }\n    const cache = {\n        [Symbol.toStringTag]: 'Object',\n        _cacheable: true,\n        _scopes: scopes,\n        _rootScopes: finalRootScopes,\n        _fallback: fallback,\n        _getTarget: getTarget,\n        override: (scope)=>_createResolver([\n                scope,\n                ...scopes\n            ], prefixes, finalRootScopes, fallback)\n    };\n    return new Proxy(cache, {\n        /**\n     * A trap for the delete operator.\n     */ deleteProperty (target, prop) {\n            delete target[prop]; // remove from cache\n            delete target._keys; // remove cached keys\n            delete scopes[0][prop]; // remove from top level scope\n            return true;\n        },\n        /**\n     * A trap for getting property values.\n     */ get (target, prop) {\n            return _cached(target, prop, ()=>_resolveWithPrefixes(prop, prefixes, scopes, target));\n        },\n        /**\n     * A trap for Object.getOwnPropertyDescriptor.\n     * Also used by Object.hasOwnProperty.\n     */ getOwnPropertyDescriptor (target, prop) {\n            return Reflect.getOwnPropertyDescriptor(target._scopes[0], prop);\n        },\n        /**\n     * A trap for Object.getPrototypeOf.\n     */ getPrototypeOf () {\n            return Reflect.getPrototypeOf(scopes[0]);\n        },\n        /**\n     * A trap for the in operator.\n     */ has (target, prop) {\n            return getKeysFromAllScopes(target).includes(prop);\n        },\n        /**\n     * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.\n     */ ownKeys (target) {\n            return getKeysFromAllScopes(target);\n        },\n        /**\n     * A trap for setting property values.\n     */ set (target, prop, value) {\n            const storage = target._storage || (target._storage = getTarget());\n            target[prop] = storage[prop] = value; // set to top level scope + cache\n            delete target._keys; // remove cached keys\n            return true;\n        }\n    });\n}\n/**\n * Returns an Proxy for resolving option values with context.\n * @param proxy - The Proxy returned by `_createResolver`\n * @param context - Context object for scriptable/indexable options\n * @param subProxy - The proxy provided for scriptable options\n * @param descriptorDefaults - Defaults for descriptors\n * @private\n */ function _attachContext(proxy, context, subProxy, descriptorDefaults) {\n    const cache = {\n        _cacheable: false,\n        _proxy: proxy,\n        _context: context,\n        _subProxy: subProxy,\n        _stack: new Set(),\n        _descriptors: _descriptors(proxy, descriptorDefaults),\n        setContext: (ctx)=>_attachContext(proxy, ctx, subProxy, descriptorDefaults),\n        override: (scope)=>_attachContext(proxy.override(scope), context, subProxy, descriptorDefaults)\n    };\n    return new Proxy(cache, {\n        /**\n     * A trap for the delete operator.\n     */ deleteProperty (target, prop) {\n            delete target[prop]; // remove from cache\n            delete proxy[prop]; // remove from proxy\n            return true;\n        },\n        /**\n     * A trap for getting property values.\n     */ get (target, prop, receiver) {\n            return _cached(target, prop, ()=>_resolveWithContext(target, prop, receiver));\n        },\n        /**\n     * A trap for Object.getOwnPropertyDescriptor.\n     * Also used by Object.hasOwnProperty.\n     */ getOwnPropertyDescriptor (target, prop) {\n            return target._descriptors.allKeys ? Reflect.has(proxy, prop) ? {\n                enumerable: true,\n                configurable: true\n            } : undefined : Reflect.getOwnPropertyDescriptor(proxy, prop);\n        },\n        /**\n     * A trap for Object.getPrototypeOf.\n     */ getPrototypeOf () {\n            return Reflect.getPrototypeOf(proxy);\n        },\n        /**\n     * A trap for the in operator.\n     */ has (target, prop) {\n            return Reflect.has(proxy, prop);\n        },\n        /**\n     * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.\n     */ ownKeys () {\n            return Reflect.ownKeys(proxy);\n        },\n        /**\n     * A trap for setting property values.\n     */ set (target, prop, value) {\n            proxy[prop] = value; // set to proxy\n            delete target[prop]; // remove from cache\n            return true;\n        }\n    });\n}\n/**\n * @private\n */ function _descriptors(proxy, defaults = {\n    scriptable: true,\n    indexable: true\n}) {\n    const { _scriptable =defaults.scriptable , _indexable =defaults.indexable , _allKeys =defaults.allKeys  } = proxy;\n    return {\n        allKeys: _allKeys,\n        scriptable: _scriptable,\n        indexable: _indexable,\n        isScriptable: isFunction(_scriptable) ? _scriptable : ()=>_scriptable,\n        isIndexable: isFunction(_indexable) ? _indexable : ()=>_indexable\n    };\n}\nconst readKey = (prefix, name)=>prefix ? prefix + _capitalize(name) : name;\nconst needsSubResolver = (prop, value)=>isObject(value) && prop !== 'adapters' && (Object.getPrototypeOf(value) === null || value.constructor === Object);\nfunction _cached(target, prop, resolve) {\n    if (Object.prototype.hasOwnProperty.call(target, prop) || prop === 'constructor') {\n        return target[prop];\n    }\n    const value = resolve();\n    // cache the resolved value\n    target[prop] = value;\n    return value;\n}\nfunction _resolveWithContext(target, prop, receiver) {\n    const { _proxy , _context , _subProxy , _descriptors: descriptors  } = target;\n    let value = _proxy[prop]; // resolve from proxy\n    // resolve with context\n    if (isFunction(value) && descriptors.isScriptable(prop)) {\n        value = _resolveScriptable(prop, value, target, receiver);\n    }\n    if (isArray(value) && value.length) {\n        value = _resolveArray(prop, value, target, descriptors.isIndexable);\n    }\n    if (needsSubResolver(prop, value)) {\n        // if the resolved value is an object, create a sub resolver for it\n        value = _attachContext(value, _context, _subProxy && _subProxy[prop], descriptors);\n    }\n    return value;\n}\nfunction _resolveScriptable(prop, getValue, target, receiver) {\n    const { _proxy , _context , _subProxy , _stack  } = target;\n    if (_stack.has(prop)) {\n        throw new Error('Recursion detected: ' + Array.from(_stack).join('->') + '->' + prop);\n    }\n    _stack.add(prop);\n    let value = getValue(_context, _subProxy || receiver);\n    _stack.delete(prop);\n    if (needsSubResolver(prop, value)) {\n        // When scriptable option returns an object, create a resolver on that.\n        value = createSubResolver(_proxy._scopes, _proxy, prop, value);\n    }\n    return value;\n}\nfunction _resolveArray(prop, value, target, isIndexable) {\n    const { _proxy , _context , _subProxy , _descriptors: descriptors  } = target;\n    if (typeof _context.index !== 'undefined' && isIndexable(prop)) {\n        return value[_context.index % value.length];\n    } else if (isObject(value[0])) {\n        // Array of objects, return array or resolvers\n        const arr = value;\n        const scopes = _proxy._scopes.filter((s)=>s !== arr);\n        value = [];\n        for (const item of arr){\n            const resolver = createSubResolver(scopes, _proxy, prop, item);\n            value.push(_attachContext(resolver, _context, _subProxy && _subProxy[prop], descriptors));\n        }\n    }\n    return value;\n}\nfunction resolveFallback(fallback, prop, value) {\n    return isFunction(fallback) ? fallback(prop, value) : fallback;\n}\nconst getScope = (key, parent)=>key === true ? parent : typeof key === 'string' ? resolveObjectKey(parent, key) : undefined;\nfunction addScopes(set, parentScopes, key, parentFallback, value) {\n    for (const parent of parentScopes){\n        const scope = getScope(key, parent);\n        if (scope) {\n            set.add(scope);\n            const fallback = resolveFallback(scope._fallback, key, value);\n            if (typeof fallback !== 'undefined' && fallback !== key && fallback !== parentFallback) {\n                // When we reach the descriptor that defines a new _fallback, return that.\n                // The fallback will resume to that new scope.\n                return fallback;\n            }\n        } else if (scope === false && typeof parentFallback !== 'undefined' && key !== parentFallback) {\n            // Fallback to `false` results to `false`, when falling back to different key.\n            // For example `interaction` from `hover` or `plugins.tooltip` and `animation` from `animations`\n            return null;\n        }\n    }\n    return false;\n}\nfunction createSubResolver(parentScopes, resolver, prop, value) {\n    const rootScopes = resolver._rootScopes;\n    const fallback = resolveFallback(resolver._fallback, prop, value);\n    const allScopes = [\n        ...parentScopes,\n        ...rootScopes\n    ];\n    const set = new Set();\n    set.add(value);\n    let key = addScopesFromKey(set, allScopes, prop, fallback || prop, value);\n    if (key === null) {\n        return false;\n    }\n    if (typeof fallback !== 'undefined' && fallback !== prop) {\n        key = addScopesFromKey(set, allScopes, fallback, key, value);\n        if (key === null) {\n            return false;\n        }\n    }\n    return _createResolver(Array.from(set), [\n        ''\n    ], rootScopes, fallback, ()=>subGetTarget(resolver, prop, value));\n}\nfunction addScopesFromKey(set, allScopes, key, fallback, item) {\n    while(key){\n        key = addScopes(set, allScopes, key, fallback, item);\n    }\n    return key;\n}\nfunction subGetTarget(resolver, prop, value) {\n    const parent = resolver._getTarget();\n    if (!(prop in parent)) {\n        parent[prop] = {};\n    }\n    const target = parent[prop];\n    if (isArray(target) && isObject(value)) {\n        // For array of objects, the object is used to store updated values\n        return value;\n    }\n    return target || {};\n}\nfunction _resolveWithPrefixes(prop, prefixes, scopes, proxy) {\n    let value;\n    for (const prefix of prefixes){\n        value = _resolve(readKey(prefix, prop), scopes);\n        if (typeof value !== 'undefined') {\n            return needsSubResolver(prop, value) ? createSubResolver(scopes, proxy, prop, value) : value;\n        }\n    }\n}\nfunction _resolve(key, scopes) {\n    for (const scope of scopes){\n        if (!scope) {\n            continue;\n        }\n        const value = scope[key];\n        if (typeof value !== 'undefined') {\n            return value;\n        }\n    }\n}\nfunction getKeysFromAllScopes(target) {\n    let keys = target._keys;\n    if (!keys) {\n        keys = target._keys = resolveKeysFromAllScopes(target._scopes);\n    }\n    return keys;\n}\nfunction resolveKeysFromAllScopes(scopes) {\n    const set = new Set();\n    for (const scope of scopes){\n        for (const key of Object.keys(scope).filter((k)=>!k.startsWith('_'))){\n            set.add(key);\n        }\n    }\n    return Array.from(set);\n}\nfunction _parseObjectDataRadialScale(meta, data, start, count) {\n    const { iScale  } = meta;\n    const { key ='r'  } = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n    for(i = 0, ilen = count; i < ilen; ++i){\n        index = i + start;\n        item = data[index];\n        parsed[i] = {\n            r: iScale.parse(resolveObjectKey(item, key), index)\n        };\n    }\n    return parsed;\n}\n\nconst EPSILON = Number.EPSILON || 1e-14;\nconst getPoint = (points, i)=>i < points.length && !points[i].skip && points[i];\nconst getValueAxis = (indexAxis)=>indexAxis === 'x' ? 'y' : 'x';\nfunction splineCurve(firstPoint, middlePoint, afterPoint, t) {\n    // Props to Rob Spencer at scaled innovation for his post on splining between points\n    // http://scaledinnovation.com/analytics/splines/aboutSplines.html\n    // This function must also respect \"skipped\" points\n    const previous = firstPoint.skip ? middlePoint : firstPoint;\n    const current = middlePoint;\n    const next = afterPoint.skip ? middlePoint : afterPoint;\n    const d01 = distanceBetweenPoints(current, previous);\n    const d12 = distanceBetweenPoints(next, current);\n    let s01 = d01 / (d01 + d12);\n    let s12 = d12 / (d01 + d12);\n    // If all points are the same, s01 & s02 will be inf\n    s01 = isNaN(s01) ? 0 : s01;\n    s12 = isNaN(s12) ? 0 : s12;\n    const fa = t * s01; // scaling factor for triangle Ta\n    const fb = t * s12;\n    return {\n        previous: {\n            x: current.x - fa * (next.x - previous.x),\n            y: current.y - fa * (next.y - previous.y)\n        },\n        next: {\n            x: current.x + fb * (next.x - previous.x),\n            y: current.y + fb * (next.y - previous.y)\n        }\n    };\n}\n/**\n * Adjust tangents to ensure monotonic properties\n */ function monotoneAdjust(points, deltaK, mK) {\n    const pointsLen = points.length;\n    let alphaK, betaK, tauK, squaredMagnitude, pointCurrent;\n    let pointAfter = getPoint(points, 0);\n    for(let i = 0; i < pointsLen - 1; ++i){\n        pointCurrent = pointAfter;\n        pointAfter = getPoint(points, i + 1);\n        if (!pointCurrent || !pointAfter) {\n            continue;\n        }\n        if (almostEquals(deltaK[i], 0, EPSILON)) {\n            mK[i] = mK[i + 1] = 0;\n            continue;\n        }\n        alphaK = mK[i] / deltaK[i];\n        betaK = mK[i + 1] / deltaK[i];\n        squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);\n        if (squaredMagnitude <= 9) {\n            continue;\n        }\n        tauK = 3 / Math.sqrt(squaredMagnitude);\n        mK[i] = alphaK * tauK * deltaK[i];\n        mK[i + 1] = betaK * tauK * deltaK[i];\n    }\n}\nfunction monotoneCompute(points, mK, indexAxis = 'x') {\n    const valueAxis = getValueAxis(indexAxis);\n    const pointsLen = points.length;\n    let delta, pointBefore, pointCurrent;\n    let pointAfter = getPoint(points, 0);\n    for(let i = 0; i < pointsLen; ++i){\n        pointBefore = pointCurrent;\n        pointCurrent = pointAfter;\n        pointAfter = getPoint(points, i + 1);\n        if (!pointCurrent) {\n            continue;\n        }\n        const iPixel = pointCurrent[indexAxis];\n        const vPixel = pointCurrent[valueAxis];\n        if (pointBefore) {\n            delta = (iPixel - pointBefore[indexAxis]) / 3;\n            pointCurrent[`cp1${indexAxis}`] = iPixel - delta;\n            pointCurrent[`cp1${valueAxis}`] = vPixel - delta * mK[i];\n        }\n        if (pointAfter) {\n            delta = (pointAfter[indexAxis] - iPixel) / 3;\n            pointCurrent[`cp2${indexAxis}`] = iPixel + delta;\n            pointCurrent[`cp2${valueAxis}`] = vPixel + delta * mK[i];\n        }\n    }\n}\n/**\n * This function calculates Bézier control points in a similar way than |splineCurve|,\n * but preserves monotonicity of the provided data and ensures no local extremums are added\n * between the dataset discrete points due to the interpolation.\n * See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation\n */ function splineCurveMonotone(points, indexAxis = 'x') {\n    const valueAxis = getValueAxis(indexAxis);\n    const pointsLen = points.length;\n    const deltaK = Array(pointsLen).fill(0);\n    const mK = Array(pointsLen);\n    // Calculate slopes (deltaK) and initialize tangents (mK)\n    let i, pointBefore, pointCurrent;\n    let pointAfter = getPoint(points, 0);\n    for(i = 0; i < pointsLen; ++i){\n        pointBefore = pointCurrent;\n        pointCurrent = pointAfter;\n        pointAfter = getPoint(points, i + 1);\n        if (!pointCurrent) {\n            continue;\n        }\n        if (pointAfter) {\n            const slopeDelta = pointAfter[indexAxis] - pointCurrent[indexAxis];\n            // In the case of two points that appear at the same x pixel, slopeDeltaX is 0\n            deltaK[i] = slopeDelta !== 0 ? (pointAfter[valueAxis] - pointCurrent[valueAxis]) / slopeDelta : 0;\n        }\n        mK[i] = !pointBefore ? deltaK[i] : !pointAfter ? deltaK[i - 1] : sign(deltaK[i - 1]) !== sign(deltaK[i]) ? 0 : (deltaK[i - 1] + deltaK[i]) / 2;\n    }\n    monotoneAdjust(points, deltaK, mK);\n    monotoneCompute(points, mK, indexAxis);\n}\nfunction capControlPoint(pt, min, max) {\n    return Math.max(Math.min(pt, max), min);\n}\nfunction capBezierPoints(points, area) {\n    let i, ilen, point, inArea, inAreaPrev;\n    let inAreaNext = _isPointInArea(points[0], area);\n    for(i = 0, ilen = points.length; i < ilen; ++i){\n        inAreaPrev = inArea;\n        inArea = inAreaNext;\n        inAreaNext = i < ilen - 1 && _isPointInArea(points[i + 1], area);\n        if (!inArea) {\n            continue;\n        }\n        point = points[i];\n        if (inAreaPrev) {\n            point.cp1x = capControlPoint(point.cp1x, area.left, area.right);\n            point.cp1y = capControlPoint(point.cp1y, area.top, area.bottom);\n        }\n        if (inAreaNext) {\n            point.cp2x = capControlPoint(point.cp2x, area.left, area.right);\n            point.cp2y = capControlPoint(point.cp2y, area.top, area.bottom);\n        }\n    }\n}\n/**\n * @private\n */ function _updateBezierControlPoints(points, options, area, loop, indexAxis) {\n    let i, ilen, point, controlPoints;\n    // Only consider points that are drawn in case the spanGaps option is used\n    if (options.spanGaps) {\n        points = points.filter((pt)=>!pt.skip);\n    }\n    if (options.cubicInterpolationMode === 'monotone') {\n        splineCurveMonotone(points, indexAxis);\n    } else {\n        let prev = loop ? points[points.length - 1] : points[0];\n        for(i = 0, ilen = points.length; i < ilen; ++i){\n            point = points[i];\n            controlPoints = splineCurve(prev, point, points[Math.min(i + 1, ilen - (loop ? 0 : 1)) % ilen], options.tension);\n            point.cp1x = controlPoints.previous.x;\n            point.cp1y = controlPoints.previous.y;\n            point.cp2x = controlPoints.next.x;\n            point.cp2y = controlPoints.next.y;\n            prev = point;\n        }\n    }\n    if (options.capBezierPoints) {\n        capBezierPoints(points, area);\n    }\n}\n\n/**\n * @private\n */ function _isDomSupported() {\n    return typeof window !== 'undefined' && typeof document !== 'undefined';\n}\n/**\n * @private\n */ function _getParentNode(domNode) {\n    let parent = domNode.parentNode;\n    if (parent && parent.toString() === '[object ShadowRoot]') {\n        parent = parent.host;\n    }\n    return parent;\n}\n/**\n * convert max-width/max-height values that may be percentages into a number\n * @private\n */ function parseMaxStyle(styleValue, node, parentProperty) {\n    let valueInPixels;\n    if (typeof styleValue === 'string') {\n        valueInPixels = parseInt(styleValue, 10);\n        if (styleValue.indexOf('%') !== -1) {\n            // percentage * size in dimension\n            valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];\n        }\n    } else {\n        valueInPixels = styleValue;\n    }\n    return valueInPixels;\n}\nconst getComputedStyle = (element)=>element.ownerDocument.defaultView.getComputedStyle(element, null);\nfunction getStyle(el, property) {\n    return getComputedStyle(el).getPropertyValue(property);\n}\nconst positions = [\n    'top',\n    'right',\n    'bottom',\n    'left'\n];\nfunction getPositionedStyle(styles, style, suffix) {\n    const result = {};\n    suffix = suffix ? '-' + suffix : '';\n    for(let i = 0; i < 4; i++){\n        const pos = positions[i];\n        result[pos] = parseFloat(styles[style + '-' + pos + suffix]) || 0;\n    }\n    result.width = result.left + result.right;\n    result.height = result.top + result.bottom;\n    return result;\n}\nconst useOffsetPos = (x, y, target)=>(x > 0 || y > 0) && (!target || !target.shadowRoot);\n/**\n * @param e\n * @param canvas\n * @returns Canvas position\n */ function getCanvasPosition(e, canvas) {\n    const touches = e.touches;\n    const source = touches && touches.length ? touches[0] : e;\n    const { offsetX , offsetY  } = source;\n    let box = false;\n    let x, y;\n    if (useOffsetPos(offsetX, offsetY, e.target)) {\n        x = offsetX;\n        y = offsetY;\n    } else {\n        const rect = canvas.getBoundingClientRect();\n        x = source.clientX - rect.left;\n        y = source.clientY - rect.top;\n        box = true;\n    }\n    return {\n        x,\n        y,\n        box\n    };\n}\n/**\n * Gets an event's x, y coordinates, relative to the chart area\n * @param event\n * @param chart\n * @returns x and y coordinates of the event\n */ function getRelativePosition(event, chart) {\n    if ('native' in event) {\n        return event;\n    }\n    const { canvas , currentDevicePixelRatio  } = chart;\n    const style = getComputedStyle(canvas);\n    const borderBox = style.boxSizing === 'border-box';\n    const paddings = getPositionedStyle(style, 'padding');\n    const borders = getPositionedStyle(style, 'border', 'width');\n    const { x , y , box  } = getCanvasPosition(event, canvas);\n    const xOffset = paddings.left + (box && borders.left);\n    const yOffset = paddings.top + (box && borders.top);\n    let { width , height  } = chart;\n    if (borderBox) {\n        width -= paddings.width + borders.width;\n        height -= paddings.height + borders.height;\n    }\n    return {\n        x: Math.round((x - xOffset) / width * canvas.width / currentDevicePixelRatio),\n        y: Math.round((y - yOffset) / height * canvas.height / currentDevicePixelRatio)\n    };\n}\nfunction getContainerSize(canvas, width, height) {\n    let maxWidth, maxHeight;\n    if (width === undefined || height === undefined) {\n        const container = canvas && _getParentNode(canvas);\n        if (!container) {\n            width = canvas.clientWidth;\n            height = canvas.clientHeight;\n        } else {\n            const rect = container.getBoundingClientRect(); // this is the border box of the container\n            const containerStyle = getComputedStyle(container);\n            const containerBorder = getPositionedStyle(containerStyle, 'border', 'width');\n            const containerPadding = getPositionedStyle(containerStyle, 'padding');\n            width = rect.width - containerPadding.width - containerBorder.width;\n            height = rect.height - containerPadding.height - containerBorder.height;\n            maxWidth = parseMaxStyle(containerStyle.maxWidth, container, 'clientWidth');\n            maxHeight = parseMaxStyle(containerStyle.maxHeight, container, 'clientHeight');\n        }\n    }\n    return {\n        width,\n        height,\n        maxWidth: maxWidth || INFINITY,\n        maxHeight: maxHeight || INFINITY\n    };\n}\nconst round1 = (v)=>Math.round(v * 10) / 10;\n// eslint-disable-next-line complexity\nfunction getMaximumSize(canvas, bbWidth, bbHeight, aspectRatio) {\n    const style = getComputedStyle(canvas);\n    const margins = getPositionedStyle(style, 'margin');\n    const maxWidth = parseMaxStyle(style.maxWidth, canvas, 'clientWidth') || INFINITY;\n    const maxHeight = parseMaxStyle(style.maxHeight, canvas, 'clientHeight') || INFINITY;\n    const containerSize = getContainerSize(canvas, bbWidth, bbHeight);\n    let { width , height  } = containerSize;\n    if (style.boxSizing === 'content-box') {\n        const borders = getPositionedStyle(style, 'border', 'width');\n        const paddings = getPositionedStyle(style, 'padding');\n        width -= paddings.width + borders.width;\n        height -= paddings.height + borders.height;\n    }\n    width = Math.max(0, width - margins.width);\n    height = Math.max(0, aspectRatio ? width / aspectRatio : height - margins.height);\n    width = round1(Math.min(width, maxWidth, containerSize.maxWidth));\n    height = round1(Math.min(height, maxHeight, containerSize.maxHeight));\n    if (width && !height) {\n        // https://github.com/chartjs/Chart.js/issues/4659\n        // If the canvas has width, but no height, default to aspectRatio of 2 (canvas default)\n        height = round1(width / 2);\n    }\n    const maintainHeight = bbWidth !== undefined || bbHeight !== undefined;\n    if (maintainHeight && aspectRatio && containerSize.height && height > containerSize.height) {\n        height = containerSize.height;\n        width = round1(Math.floor(height * aspectRatio));\n    }\n    return {\n        width,\n        height\n    };\n}\n/**\n * @param chart\n * @param forceRatio\n * @param forceStyle\n * @returns True if the canvas context size or transformation has changed.\n */ function retinaScale(chart, forceRatio, forceStyle) {\n    const pixelRatio = forceRatio || 1;\n    const deviceHeight = round1(chart.height * pixelRatio);\n    const deviceWidth = round1(chart.width * pixelRatio);\n    chart.height = round1(chart.height);\n    chart.width = round1(chart.width);\n    const canvas = chart.canvas;\n    // If no style has been set on the canvas, the render size is used as display size,\n    // making the chart visually bigger, so let's enforce it to the \"correct\" values.\n    // See https://github.com/chartjs/Chart.js/issues/3575\n    if (canvas.style && (forceStyle || !canvas.style.height && !canvas.style.width)) {\n        canvas.style.height = `${chart.height}px`;\n        canvas.style.width = `${chart.width}px`;\n    }\n    if (chart.currentDevicePixelRatio !== pixelRatio || canvas.height !== deviceHeight || canvas.width !== deviceWidth) {\n        chart.currentDevicePixelRatio = pixelRatio;\n        canvas.height = deviceHeight;\n        canvas.width = deviceWidth;\n        chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n        return true;\n    }\n    return false;\n}\n/**\n * Detects support for options object argument in addEventListener.\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support\n * @private\n */ const supportsEventListenerOptions = function() {\n    let passiveSupported = false;\n    try {\n        const options = {\n            get passive () {\n                passiveSupported = true;\n                return false;\n            }\n        };\n        if (_isDomSupported()) {\n            window.addEventListener('test', null, options);\n            window.removeEventListener('test', null, options);\n        }\n    } catch (e) {\n    // continue regardless of error\n    }\n    return passiveSupported;\n}();\n/**\n * The \"used\" size is the final value of a dimension property after all calculations have\n * been performed. This method uses the computed style of `element` but returns undefined\n * if the computed style is not expressed in pixels. That can happen in some cases where\n * `element` has a size relative to its parent and this last one is not yet displayed,\n * for example because of `display: none` on a parent node.\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value\n * @returns Size in pixels or undefined if unknown.\n */ function readUsedSize(element, property) {\n    const value = getStyle(element, property);\n    const matches = value && value.match(/^(\\d+)(\\.\\d+)?px$/);\n    return matches ? +matches[1] : undefined;\n}\n\n/**\n * @private\n */ function _pointInLine(p1, p2, t, mode) {\n    return {\n        x: p1.x + t * (p2.x - p1.x),\n        y: p1.y + t * (p2.y - p1.y)\n    };\n}\n/**\n * @private\n */ function _steppedInterpolation(p1, p2, t, mode) {\n    return {\n        x: p1.x + t * (p2.x - p1.x),\n        y: mode === 'middle' ? t < 0.5 ? p1.y : p2.y : mode === 'after' ? t < 1 ? p1.y : p2.y : t > 0 ? p2.y : p1.y\n    };\n}\n/**\n * @private\n */ function _bezierInterpolation(p1, p2, t, mode) {\n    const cp1 = {\n        x: p1.cp2x,\n        y: p1.cp2y\n    };\n    const cp2 = {\n        x: p2.cp1x,\n        y: p2.cp1y\n    };\n    const a = _pointInLine(p1, cp1, t);\n    const b = _pointInLine(cp1, cp2, t);\n    const c = _pointInLine(cp2, p2, t);\n    const d = _pointInLine(a, b, t);\n    const e = _pointInLine(b, c, t);\n    return _pointInLine(d, e, t);\n}\n\nconst getRightToLeftAdapter = function(rectX, width) {\n    return {\n        x (x) {\n            return rectX + rectX + width - x;\n        },\n        setWidth (w) {\n            width = w;\n        },\n        textAlign (align) {\n            if (align === 'center') {\n                return align;\n            }\n            return align === 'right' ? 'left' : 'right';\n        },\n        xPlus (x, value) {\n            return x - value;\n        },\n        leftForLtr (x, itemWidth) {\n            return x - itemWidth;\n        }\n    };\n};\nconst getLeftToRightAdapter = function() {\n    return {\n        x (x) {\n            return x;\n        },\n        setWidth (w) {},\n        textAlign (align) {\n            return align;\n        },\n        xPlus (x, value) {\n            return x + value;\n        },\n        leftForLtr (x, _itemWidth) {\n            return x;\n        }\n    };\n};\nfunction getRtlAdapter(rtl, rectX, width) {\n    return rtl ? getRightToLeftAdapter(rectX, width) : getLeftToRightAdapter();\n}\nfunction overrideTextDirection(ctx, direction) {\n    let style, original;\n    if (direction === 'ltr' || direction === 'rtl') {\n        style = ctx.canvas.style;\n        original = [\n            style.getPropertyValue('direction'),\n            style.getPropertyPriority('direction')\n        ];\n        style.setProperty('direction', direction, 'important');\n        ctx.prevTextDirection = original;\n    }\n}\nfunction restoreTextDirection(ctx, original) {\n    if (original !== undefined) {\n        delete ctx.prevTextDirection;\n        ctx.canvas.style.setProperty('direction', original[0], original[1]);\n    }\n}\n\nfunction propertyFn(property) {\n    if (property === 'angle') {\n        return {\n            between: _angleBetween,\n            compare: _angleDiff,\n            normalize: _normalizeAngle\n        };\n    }\n    return {\n        between: _isBetween,\n        compare: (a, b)=>a - b,\n        normalize: (x)=>x\n    };\n}\nfunction normalizeSegment({ start , end , count , loop , style  }) {\n    return {\n        start: start % count,\n        end: end % count,\n        loop: loop && (end - start + 1) % count === 0,\n        style\n    };\n}\nfunction getSegment(segment, points, bounds) {\n    const { property , start: startBound , end: endBound  } = bounds;\n    const { between , normalize  } = propertyFn(property);\n    const count = points.length;\n    let { start , end , loop  } = segment;\n    let i, ilen;\n    if (loop) {\n        start += count;\n        end += count;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            if (!between(normalize(points[start % count][property]), startBound, endBound)) {\n                break;\n            }\n            start--;\n            end--;\n        }\n        start %= count;\n        end %= count;\n    }\n    if (end < start) {\n        end += count;\n    }\n    return {\n        start,\n        end,\n        loop,\n        style: segment.style\n    };\n}\n function _boundSegment(segment, points, bounds) {\n    if (!bounds) {\n        return [\n            segment\n        ];\n    }\n    const { property , start: startBound , end: endBound  } = bounds;\n    const count = points.length;\n    const { compare , between , normalize  } = propertyFn(property);\n    const { start , end , loop , style  } = getSegment(segment, points, bounds);\n    const result = [];\n    let inside = false;\n    let subStart = null;\n    let value, point, prevValue;\n    const startIsBefore = ()=>between(startBound, prevValue, value) && compare(startBound, prevValue) !== 0;\n    const endIsBefore = ()=>compare(endBound, value) === 0 || between(endBound, prevValue, value);\n    const shouldStart = ()=>inside || startIsBefore();\n    const shouldStop = ()=>!inside || endIsBefore();\n    for(let i = start, prev = start; i <= end; ++i){\n        point = points[i % count];\n        if (point.skip) {\n            continue;\n        }\n        value = normalize(point[property]);\n        if (value === prevValue) {\n            continue;\n        }\n        inside = between(value, startBound, endBound);\n        if (subStart === null && shouldStart()) {\n            subStart = compare(value, startBound) === 0 ? i : prev;\n        }\n        if (subStart !== null && shouldStop()) {\n            result.push(normalizeSegment({\n                start: subStart,\n                end: i,\n                loop,\n                count,\n                style\n            }));\n            subStart = null;\n        }\n        prev = i;\n        prevValue = value;\n    }\n    if (subStart !== null) {\n        result.push(normalizeSegment({\n            start: subStart,\n            end,\n            loop,\n            count,\n            style\n        }));\n    }\n    return result;\n}\n function _boundSegments(line, bounds) {\n    const result = [];\n    const segments = line.segments;\n    for(let i = 0; i < segments.length; i++){\n        const sub = _boundSegment(segments[i], line.points, bounds);\n        if (sub.length) {\n            result.push(...sub);\n        }\n    }\n    return result;\n}\n function findStartAndEnd(points, count, loop, spanGaps) {\n    let start = 0;\n    let end = count - 1;\n    if (loop && !spanGaps) {\n        while(start < count && !points[start].skip){\n            start++;\n        }\n    }\n    while(start < count && points[start].skip){\n        start++;\n    }\n    start %= count;\n    if (loop) {\n        end += start;\n    }\n    while(end > start && points[end % count].skip){\n        end--;\n    }\n    end %= count;\n    return {\n        start,\n        end\n    };\n}\n function solidSegments(points, start, max, loop) {\n    const count = points.length;\n    const result = [];\n    let last = start;\n    let prev = points[start];\n    let end;\n    for(end = start + 1; end <= max; ++end){\n        const cur = points[end % count];\n        if (cur.skip || cur.stop) {\n            if (!prev.skip) {\n                loop = false;\n                result.push({\n                    start: start % count,\n                    end: (end - 1) % count,\n                    loop\n                });\n                start = last = cur.stop ? end : null;\n            }\n        } else {\n            last = end;\n            if (prev.skip) {\n                start = end;\n            }\n        }\n        prev = cur;\n    }\n    if (last !== null) {\n        result.push({\n            start: start % count,\n            end: last % count,\n            loop\n        });\n    }\n    return result;\n}\n function _computeSegments(line, segmentOptions) {\n    const points = line.points;\n    const spanGaps = line.options.spanGaps;\n    const count = points.length;\n    if (!count) {\n        return [];\n    }\n    const loop = !!line._loop;\n    const { start , end  } = findStartAndEnd(points, count, loop, spanGaps);\n    if (spanGaps === true) {\n        return splitByStyles(line, [\n            {\n                start,\n                end,\n                loop\n            }\n        ], points, segmentOptions);\n    }\n    const max = end < start ? end + count : end;\n    const completeLoop = !!line._fullLoop && start === 0 && end === count - 1;\n    return splitByStyles(line, solidSegments(points, start, max, completeLoop), points, segmentOptions);\n}\n function splitByStyles(line, segments, points, segmentOptions) {\n    if (!segmentOptions || !segmentOptions.setContext || !points) {\n        return segments;\n    }\n    return doSplitByStyles(line, segments, points, segmentOptions);\n}\n function doSplitByStyles(line, segments, points, segmentOptions) {\n    const chartContext = line._chart.getContext();\n    const baseStyle = readStyle(line.options);\n    const { _datasetIndex: datasetIndex , options: { spanGaps  }  } = line;\n    const count = points.length;\n    const result = [];\n    let prevStyle = baseStyle;\n    let start = segments[0].start;\n    let i = start;\n    function addStyle(s, e, l, st) {\n        const dir = spanGaps ? -1 : 1;\n        if (s === e) {\n            return;\n        }\n        s += count;\n        while(points[s % count].skip){\n            s -= dir;\n        }\n        while(points[e % count].skip){\n            e += dir;\n        }\n        if (s % count !== e % count) {\n            result.push({\n                start: s % count,\n                end: e % count,\n                loop: l,\n                style: st\n            });\n            prevStyle = st;\n            start = e % count;\n        }\n    }\n    for (const segment of segments){\n        start = spanGaps ? start : segment.start;\n        let prev = points[start % count];\n        let style;\n        for(i = start + 1; i <= segment.end; i++){\n            const pt = points[i % count];\n            style = readStyle(segmentOptions.setContext(createContext(chartContext, {\n                type: 'segment',\n                p0: prev,\n                p1: pt,\n                p0DataIndex: (i - 1) % count,\n                p1DataIndex: i % count,\n                datasetIndex\n            })));\n            if (styleChanged(style, prevStyle)) {\n                addStyle(start, i - 1, segment.loop, prevStyle);\n            }\n            prev = pt;\n            prevStyle = style;\n        }\n        if (start < i - 1) {\n            addStyle(start, i - 1, segment.loop, prevStyle);\n        }\n    }\n    return result;\n}\nfunction readStyle(options) {\n    return {\n        backgroundColor: options.backgroundColor,\n        borderCapStyle: options.borderCapStyle,\n        borderDash: options.borderDash,\n        borderDashOffset: options.borderDashOffset,\n        borderJoinStyle: options.borderJoinStyle,\n        borderWidth: options.borderWidth,\n        borderColor: options.borderColor\n    };\n}\nfunction styleChanged(style, prevStyle) {\n    if (!prevStyle) {\n        return false;\n    }\n    const cache = [];\n    const replacer = function(key, value) {\n        if (!isPatternOrGradient(value)) {\n            return value;\n        }\n        if (!cache.includes(value)) {\n            cache.push(value);\n        }\n        return cache.indexOf(value);\n    };\n    return JSON.stringify(style, replacer) !== JSON.stringify(prevStyle, replacer);\n}\n\nfunction getSizeForArea(scale, chartArea, field) {\n    return scale.options.clip ? scale[field] : chartArea[field];\n}\nfunction getDatasetArea(meta, chartArea) {\n    const { xScale , yScale  } = meta;\n    if (xScale && yScale) {\n        return {\n            left: getSizeForArea(xScale, chartArea, 'left'),\n            right: getSizeForArea(xScale, chartArea, 'right'),\n            top: getSizeForArea(yScale, chartArea, 'top'),\n            bottom: getSizeForArea(yScale, chartArea, 'bottom')\n        };\n    }\n    return chartArea;\n}\nfunction getDatasetClipArea(chart, meta) {\n    const clip = meta._clip;\n    if (clip.disabled) {\n        return false;\n    }\n    const area = getDatasetArea(meta, chart.chartArea);\n    return {\n        left: clip.left === false ? 0 : area.left - (clip.left === true ? 0 : clip.left),\n        right: clip.right === false ? chart.width : area.right + (clip.right === true ? 0 : clip.right),\n        top: clip.top === false ? 0 : area.top - (clip.top === true ? 0 : clip.top),\n        bottom: clip.bottom === false ? chart.height : area.bottom + (clip.bottom === true ? 0 : clip.bottom)\n    };\n}\n\nexport { unclipArea as $, _rlookupByKey as A, _lookupByKey as B, _isPointInArea as C, getAngleFromPoint as D, toPadding as E, each as F, getMaximumSize as G, HALF_PI as H, _getParentNode as I, readUsedSize as J, supportsEventListenerOptions as K, throttled as L, _isDomSupported as M, _factorize as N, finiteOrDefault as O, PI as P, callback as Q, _addGrace as R, _limitValue as S, TAU as T, toDegrees as U, _measureText as V, _int16Range as W, _alignPixel as X, clipArea as Y, renderText as Z, _arrayUnique as _, resolve as a, getStyle as a$, toFont as a0, _toLeftRightCenter as a1, _alignStartEnd as a2, overrides as a3, merge as a4, _capitalize as a5, descriptors as a6, isFunction as a7, _attachContext as a8, _createResolver as a9, getRtlAdapter as aA, overrideTextDirection as aB, _textX as aC, restoreTextDirection as aD, drawPointLegend as aE, distanceBetweenPoints as aF, noop as aG, _setMinAndMaxByKey as aH, niceNum as aI, almostWhole as aJ, almostEquals as aK, _decimalPlaces as aL, Ticks as aM, log10 as aN, _longestText as aO, _filterBetween as aP, _lookup as aQ, isPatternOrGradient as aR, getHoverColor as aS, clone as aT, _merger as aU, _mergerIf as aV, _deprecated as aW, _splitKey as aX, toFontString as aY, splineCurve as aZ, splineCurveMonotone as a_, _descriptors as aa, mergeIf as ab, uid as ac, debounce as ad, retinaScale as ae, clearCanvas as af, setsEqual as ag, getDatasetClipArea as ah, _elementsEqual as ai, _isClickEvent as aj, _isBetween as ak, _normalizeAngle as al, _readValueToProps as am, _updateBezierControlPoints as an, _computeSegments as ao, _boundSegments as ap, _steppedInterpolation as aq, _bezierInterpolation as ar, _pointInLine as as, _steppedLineTo as at, _bezierCurveTo as au, drawPoint as av, addRoundedRectPath as aw, toTRBL as ax, toTRBLCorners as ay, _boundSegment as az, isArray as b, fontString as b0, toLineHeight as b1, PITAU as b2, INFINITY as b3, RAD_PER_DEG as b4, QUARTER_PI as b5, TWO_THIRDS_PI as b6, _angleDiff as b7, color as c, defaults as d, effects as e, resolveObjectKey as f, isNumberFinite as g, defined as h, isObject as i, createContext as j, isNullOrUndef as k, listenArrayEvents as l, toPercentage as m, toDimension as n, formatNumber as o, _angleBetween as p, _getStartAndCountOfVisiblePoints as q, requestAnimFrame as r, sign as s, toRadians as t, unlistenArrayEvents as u, valueOrDefault as v, _scaleRangesChanged as w, isNumber as x, _parseObjectDataRadialScale as y, getRelativePosition as z };\n//# sourceMappingURL=helpers.dataset.js.map\n","/*!\n * Chart.js v4.5.1\n * https://www.chartjs.org\n * (c) 2025 Chart.js Contributors\n * Released under the MIT License\n */\nimport { r as requestAnimFrame, a as resolve, e as effects, c as color, i as isObject, d as defaults, b as isArray, v as valueOrDefault, u as unlistenArrayEvents, l as listenArrayEvents, f as resolveObjectKey, g as isNumberFinite, h as defined, s as sign, j as createContext, k as isNullOrUndef, _ as _arrayUnique, t as toRadians, m as toPercentage, n as toDimension, T as TAU, o as formatNumber, p as _angleBetween, H as HALF_PI, P as PI, q as _getStartAndCountOfVisiblePoints, w as _scaleRangesChanged, x as isNumber, y as _parseObjectDataRadialScale, z as getRelativePosition, A as _rlookupByKey, B as _lookupByKey, C as _isPointInArea, D as getAngleFromPoint, E as toPadding, F as each, G as getMaximumSize, I as _getParentNode, J as readUsedSize, K as supportsEventListenerOptions, L as throttled, M as _isDomSupported, N as _factorize, O as finiteOrDefault, Q as callback, R as _addGrace, S as _limitValue, U as toDegrees, V as _measureText, W as _int16Range, X as _alignPixel, Y as clipArea, Z as renderText, $ as unclipArea, a0 as toFont, a1 as _toLeftRightCenter, a2 as _alignStartEnd, a3 as overrides, a4 as merge, a5 as _capitalize, a6 as descriptors, a7 as isFunction, a8 as _attachContext, a9 as _createResolver, aa as _descriptors, ab as mergeIf, ac as uid, ad as debounce, ae as retinaScale, af as clearCanvas, ag as setsEqual, ah as getDatasetClipArea, ai as _elementsEqual, aj as _isClickEvent, ak as _isBetween, al as _normalizeAngle, am as _readValueToProps, an as _updateBezierControlPoints, ao as _computeSegments, ap as _boundSegments, aq as _steppedInterpolation, ar as _bezierInterpolation, as as _pointInLine, at as _steppedLineTo, au as _bezierCurveTo, av as drawPoint, aw as addRoundedRectPath, ax as toTRBL, ay as toTRBLCorners, az as _boundSegment, aA as getRtlAdapter, aB as overrideTextDirection, aC as _textX, aD as restoreTextDirection, aE as drawPointLegend, aF as distanceBetweenPoints, aG as noop, aH as _setMinAndMaxByKey, aI as niceNum, aJ as almostWhole, aK as almostEquals, aL as _decimalPlaces, aM as Ticks, aN as log10, aO as _longestText, aP as _filterBetween, aQ as _lookup } from './chunks/helpers.dataset.js';\nimport '@kurkle/color';\n\nclass Animator {\n    constructor(){\n        this._request = null;\n        this._charts = new Map();\n        this._running = false;\n        this._lastDate = undefined;\n    }\n _notify(chart, anims, date, type) {\n        const callbacks = anims.listeners[type];\n        const numSteps = anims.duration;\n        callbacks.forEach((fn)=>fn({\n                chart,\n                initial: anims.initial,\n                numSteps,\n                currentStep: Math.min(date - anims.start, numSteps)\n            }));\n    }\n _refresh() {\n        if (this._request) {\n            return;\n        }\n        this._running = true;\n        this._request = requestAnimFrame.call(window, ()=>{\n            this._update();\n            this._request = null;\n            if (this._running) {\n                this._refresh();\n            }\n        });\n    }\n _update(date = Date.now()) {\n        let remaining = 0;\n        this._charts.forEach((anims, chart)=>{\n            if (!anims.running || !anims.items.length) {\n                return;\n            }\n            const items = anims.items;\n            let i = items.length - 1;\n            let draw = false;\n            let item;\n            for(; i >= 0; --i){\n                item = items[i];\n                if (item._active) {\n                    if (item._total > anims.duration) {\n                        anims.duration = item._total;\n                    }\n                    item.tick(date);\n                    draw = true;\n                } else {\n                    items[i] = items[items.length - 1];\n                    items.pop();\n                }\n            }\n            if (draw) {\n                chart.draw();\n                this._notify(chart, anims, date, 'progress');\n            }\n            if (!items.length) {\n                anims.running = false;\n                this._notify(chart, anims, date, 'complete');\n                anims.initial = false;\n            }\n            remaining += items.length;\n        });\n        this._lastDate = date;\n        if (remaining === 0) {\n            this._running = false;\n        }\n    }\n _getAnims(chart) {\n        const charts = this._charts;\n        let anims = charts.get(chart);\n        if (!anims) {\n            anims = {\n                running: false,\n                initial: true,\n                items: [],\n                listeners: {\n                    complete: [],\n                    progress: []\n                }\n            };\n            charts.set(chart, anims);\n        }\n        return anims;\n    }\n listen(chart, event, cb) {\n        this._getAnims(chart).listeners[event].push(cb);\n    }\n add(chart, items) {\n        if (!items || !items.length) {\n            return;\n        }\n        this._getAnims(chart).items.push(...items);\n    }\n has(chart) {\n        return this._getAnims(chart).items.length > 0;\n    }\n start(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims) {\n            return;\n        }\n        anims.running = true;\n        anims.start = Date.now();\n        anims.duration = anims.items.reduce((acc, cur)=>Math.max(acc, cur._duration), 0);\n        this._refresh();\n    }\n    running(chart) {\n        if (!this._running) {\n            return false;\n        }\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.running || !anims.items.length) {\n            return false;\n        }\n        return true;\n    }\n stop(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.items.length) {\n            return;\n        }\n        const items = anims.items;\n        let i = items.length - 1;\n        for(; i >= 0; --i){\n            items[i].cancel();\n        }\n        anims.items = [];\n        this._notify(chart, anims, Date.now(), 'complete');\n    }\n remove(chart) {\n        return this._charts.delete(chart);\n    }\n}\nvar animator = /* #__PURE__ */ new Animator();\n\nconst transparent = 'transparent';\nconst interpolators = {\n    boolean (from, to, factor) {\n        return factor > 0.5 ? to : from;\n    },\n color (from, to, factor) {\n        const c0 = color(from || transparent);\n        const c1 = c0.valid && color(to || transparent);\n        return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;\n    },\n    number (from, to, factor) {\n        return from + (to - from) * factor;\n    }\n};\nclass Animation {\n    constructor(cfg, target, prop, to){\n        const currentValue = target[prop];\n        to = resolve([\n            cfg.to,\n            to,\n            currentValue,\n            cfg.from\n        ]);\n        const from = resolve([\n            cfg.from,\n            currentValue,\n            to\n        ]);\n        this._active = true;\n        this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n        this._easing = effects[cfg.easing] || effects.linear;\n        this._start = Math.floor(Date.now() + (cfg.delay || 0));\n        this._duration = this._total = Math.floor(cfg.duration);\n        this._loop = !!cfg.loop;\n        this._target = target;\n        this._prop = prop;\n        this._from = from;\n        this._to = to;\n        this._promises = undefined;\n    }\n    active() {\n        return this._active;\n    }\n    update(cfg, to, date) {\n        if (this._active) {\n            this._notify(false);\n            const currentValue = this._target[this._prop];\n            const elapsed = date - this._start;\n            const remain = this._duration - elapsed;\n            this._start = date;\n            this._duration = Math.floor(Math.max(remain, cfg.duration));\n            this._total += elapsed;\n            this._loop = !!cfg.loop;\n            this._to = resolve([\n                cfg.to,\n                to,\n                currentValue,\n                cfg.from\n            ]);\n            this._from = resolve([\n                cfg.from,\n                currentValue,\n                to\n            ]);\n        }\n    }\n    cancel() {\n        if (this._active) {\n            this.tick(Date.now());\n            this._active = false;\n            this._notify(false);\n        }\n    }\n    tick(date) {\n        const elapsed = date - this._start;\n        const duration = this._duration;\n        const prop = this._prop;\n        const from = this._from;\n        const loop = this._loop;\n        const to = this._to;\n        let factor;\n        this._active = from !== to && (loop || elapsed < duration);\n        if (!this._active) {\n            this._target[prop] = to;\n            this._notify(true);\n            return;\n        }\n        if (elapsed < 0) {\n            this._target[prop] = from;\n            return;\n        }\n        factor = elapsed / duration % 2;\n        factor = loop && factor > 1 ? 2 - factor : factor;\n        factor = this._easing(Math.min(1, Math.max(0, factor)));\n        this._target[prop] = this._fn(from, to, factor);\n    }\n    wait() {\n        const promises = this._promises || (this._promises = []);\n        return new Promise((res, rej)=>{\n            promises.push({\n                res,\n                rej\n            });\n        });\n    }\n    _notify(resolved) {\n        const method = resolved ? 'res' : 'rej';\n        const promises = this._promises || [];\n        for(let i = 0; i < promises.length; i++){\n            promises[i][method]();\n        }\n    }\n}\n\nclass Animations {\n    constructor(chart, config){\n        this._chart = chart;\n        this._properties = new Map();\n        this.configure(config);\n    }\n    configure(config) {\n        if (!isObject(config)) {\n            return;\n        }\n        const animationOptions = Object.keys(defaults.animation);\n        const animatedProps = this._properties;\n        Object.getOwnPropertyNames(config).forEach((key)=>{\n            const cfg = config[key];\n            if (!isObject(cfg)) {\n                return;\n            }\n            const resolved = {};\n            for (const option of animationOptions){\n                resolved[option] = cfg[option];\n            }\n            (isArray(cfg.properties) && cfg.properties || [\n                key\n            ]).forEach((prop)=>{\n                if (prop === key || !animatedProps.has(prop)) {\n                    animatedProps.set(prop, resolved);\n                }\n            });\n        });\n    }\n _animateOptions(target, values) {\n        const newOptions = values.options;\n        const options = resolveTargetOptions(target, newOptions);\n        if (!options) {\n            return [];\n        }\n        const animations = this._createAnimations(options, newOptions);\n        if (newOptions.$shared) {\n            awaitAll(target.options.$animations, newOptions).then(()=>{\n                target.options = newOptions;\n            }, ()=>{\n            });\n        }\n        return animations;\n    }\n _createAnimations(target, values) {\n        const animatedProps = this._properties;\n        const animations = [];\n        const running = target.$animations || (target.$animations = {});\n        const props = Object.keys(values);\n        const date = Date.now();\n        let i;\n        for(i = props.length - 1; i >= 0; --i){\n            const prop = props[i];\n            if (prop.charAt(0) === '$') {\n                continue;\n            }\n            if (prop === 'options') {\n                animations.push(...this._animateOptions(target, values));\n                continue;\n            }\n            const value = values[prop];\n            let animation = running[prop];\n            const cfg = animatedProps.get(prop);\n            if (animation) {\n                if (cfg && animation.active()) {\n                    animation.update(cfg, value, date);\n                    continue;\n                } else {\n                    animation.cancel();\n                }\n            }\n            if (!cfg || !cfg.duration) {\n                target[prop] = value;\n                continue;\n            }\n            running[prop] = animation = new Animation(cfg, target, prop, value);\n            animations.push(animation);\n        }\n        return animations;\n    }\n update(target, values) {\n        if (this._properties.size === 0) {\n            Object.assign(target, values);\n            return;\n        }\n        const animations = this._createAnimations(target, values);\n        if (animations.length) {\n            animator.add(this._chart, animations);\n            return true;\n        }\n    }\n}\nfunction awaitAll(animations, properties) {\n    const running = [];\n    const keys = Object.keys(properties);\n    for(let i = 0; i < keys.length; i++){\n        const anim = animations[keys[i]];\n        if (anim && anim.active()) {\n            running.push(anim.wait());\n        }\n    }\n    return Promise.all(running);\n}\nfunction resolveTargetOptions(target, newOptions) {\n    if (!newOptions) {\n        return;\n    }\n    let options = target.options;\n    if (!options) {\n        target.options = newOptions;\n        return;\n    }\n    if (options.$shared) {\n        target.options = options = Object.assign({}, options, {\n            $shared: false,\n            $animations: {}\n        });\n    }\n    return options;\n}\n\nfunction scaleClip(scale, allowedOverflow) {\n    const opts = scale && scale.options || {};\n    const reverse = opts.reverse;\n    const min = opts.min === undefined ? allowedOverflow : 0;\n    const max = opts.max === undefined ? allowedOverflow : 0;\n    return {\n        start: reverse ? max : min,\n        end: reverse ? min : max\n    };\n}\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n    if (allowedOverflow === false) {\n        return false;\n    }\n    const x = scaleClip(xScale, allowedOverflow);\n    const y = scaleClip(yScale, allowedOverflow);\n    return {\n        top: y.end,\n        right: x.end,\n        bottom: y.start,\n        left: x.start\n    };\n}\nfunction toClip(value) {\n    let t, r, b, l;\n    if (isObject(value)) {\n        t = value.top;\n        r = value.right;\n        b = value.bottom;\n        l = value.left;\n    } else {\n        t = r = b = l = value;\n    }\n    return {\n        top: t,\n        right: r,\n        bottom: b,\n        left: l,\n        disabled: value === false\n    };\n}\nfunction getSortedDatasetIndices(chart, filterVisible) {\n    const keys = [];\n    const metasets = chart._getSortedDatasetMetas(filterVisible);\n    let i, ilen;\n    for(i = 0, ilen = metasets.length; i < ilen; ++i){\n        keys.push(metasets[i].index);\n    }\n    return keys;\n}\nfunction applyStack(stack, value, dsIndex, options = {}) {\n    const keys = stack.keys;\n    const singleMode = options.mode === 'single';\n    let i, ilen, datasetIndex, otherValue;\n    if (value === null) {\n        return;\n    }\n    let found = false;\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        datasetIndex = +keys[i];\n        if (datasetIndex === dsIndex) {\n            found = true;\n            if (options.all) {\n                continue;\n            }\n            break;\n        }\n        otherValue = stack.values[datasetIndex];\n        if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {\n            value += otherValue;\n        }\n    }\n    if (!found && !options.all) {\n        return 0;\n    }\n    return value;\n}\nfunction convertObjectDataToArray(data, meta) {\n    const { iScale , vScale  } = meta;\n    const iAxisKey = iScale.axis === 'x' ? 'x' : 'y';\n    const vAxisKey = vScale.axis === 'x' ? 'x' : 'y';\n    const keys = Object.keys(data);\n    const adata = new Array(keys.length);\n    let i, ilen, key;\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        key = keys[i];\n        adata[i] = {\n            [iAxisKey]: key,\n            [vAxisKey]: data[key]\n        };\n    }\n    return adata;\n}\nfunction isStacked(scale, meta) {\n    const stacked = scale && scale.options.stacked;\n    return stacked || stacked === undefined && meta.stack !== undefined;\n}\nfunction getStackKey(indexScale, valueScale, meta) {\n    return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\nfunction getUserBounds(scale) {\n    const { min , max , minDefined , maxDefined  } = scale.getUserBounds();\n    return {\n        min: minDefined ? min : Number.NEGATIVE_INFINITY,\n        max: maxDefined ? max : Number.POSITIVE_INFINITY\n    };\n}\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n    const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n    return subStack[indexValue] || (subStack[indexValue] = {});\n}\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n    for (const meta of vScale.getMatchingVisibleMetas(type).reverse()){\n        const value = stack[meta.index];\n        if (positive && value > 0 || !positive && value < 0) {\n            return meta.index;\n        }\n    }\n    return null;\n}\nfunction updateStacks(controller, parsed) {\n    const { chart , _cachedMeta: meta  } = controller;\n    const stacks = chart._stacks || (chart._stacks = {});\n    const { iScale , vScale , index: datasetIndex  } = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const key = getStackKey(iScale, vScale, meta);\n    const ilen = parsed.length;\n    let stack;\n    for(let i = 0; i < ilen; ++i){\n        const item = parsed[i];\n        const { [iAxis]: index , [vAxis]: value  } = item;\n        const itemStacks = item._stacks || (item._stacks = {});\n        stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n        stack[datasetIndex] = value;\n        stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n        stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n        const visualValues = stack._visualValues || (stack._visualValues = {});\n        visualValues[datasetIndex] = value;\n    }\n}\nfunction getFirstScaleId(chart, axis) {\n    const scales = chart.scales;\n    return Object.keys(scales).filter((key)=>scales[key].axis === axis).shift();\n}\nfunction createDatasetContext(parent, index) {\n    return createContext(parent, {\n        active: false,\n        dataset: undefined,\n        datasetIndex: index,\n        index,\n        mode: 'default',\n        type: 'dataset'\n    });\n}\nfunction createDataContext(parent, index, element) {\n    return createContext(parent, {\n        active: false,\n        dataIndex: index,\n        parsed: undefined,\n        raw: undefined,\n        element,\n        index,\n        mode: 'default',\n        type: 'data'\n    });\n}\nfunction clearStacks(meta, items) {\n    const datasetIndex = meta.controller.index;\n    const axis = meta.vScale && meta.vScale.axis;\n    if (!axis) {\n        return;\n    }\n    items = items || meta._parsed;\n    for (const parsed of items){\n        const stacks = parsed._stacks;\n        if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n            return;\n        }\n        delete stacks[axis][datasetIndex];\n        if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n            delete stacks[axis]._visualValues[datasetIndex];\n        }\n    }\n}\nconst isDirectUpdateMode = (mode)=>mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared)=>shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart)=>canStack && !meta.hidden && meta._stacked && {\n        keys: getSortedDatasetIndices(chart, true),\n        values: null\n    };\nclass DatasetController {\n static defaults = {};\n static datasetElementType = null;\n static dataElementType = null;\n constructor(chart, datasetIndex){\n        this.chart = chart;\n        this._ctx = chart.ctx;\n        this.index = datasetIndex;\n        this._cachedDataOpts = {};\n        this._cachedMeta = this.getMeta();\n        this._type = this._cachedMeta.type;\n        this.options = undefined;\n         this._parsing = false;\n        this._data = undefined;\n        this._objectData = undefined;\n        this._sharedOptions = undefined;\n        this._drawStart = undefined;\n        this._drawCount = undefined;\n        this.enableOptionSharing = false;\n        this.supportsDecimation = false;\n        this.$context = undefined;\n        this._syncList = [];\n        this.datasetElementType = new.target.datasetElementType;\n        this.dataElementType = new.target.dataElementType;\n        this.initialize();\n    }\n    initialize() {\n        const meta = this._cachedMeta;\n        this.configure();\n        this.linkScales();\n        meta._stacked = isStacked(meta.vScale, meta);\n        this.addElements();\n        if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n            console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n        }\n    }\n    updateIndex(datasetIndex) {\n        if (this.index !== datasetIndex) {\n            clearStacks(this._cachedMeta);\n        }\n        this.index = datasetIndex;\n    }\n    linkScales() {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        const chooseId = (axis, x, y, r)=>axis === 'x' ? x : axis === 'r' ? r : y;\n        const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n        const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n        const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n        const indexAxis = meta.indexAxis;\n        const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n        const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n        meta.xScale = this.getScaleForId(xid);\n        meta.yScale = this.getScaleForId(yid);\n        meta.rScale = this.getScaleForId(rid);\n        meta.iScale = this.getScaleForId(iid);\n        meta.vScale = this.getScaleForId(vid);\n    }\n    getDataset() {\n        return this.chart.data.datasets[this.index];\n    }\n    getMeta() {\n        return this.chart.getDatasetMeta(this.index);\n    }\n getScaleForId(scaleID) {\n        return this.chart.scales[scaleID];\n    }\n _getOtherScale(scale) {\n        const meta = this._cachedMeta;\n        return scale === meta.iScale ? meta.vScale : meta.iScale;\n    }\n    reset() {\n        this._update('reset');\n    }\n _destroy() {\n        const meta = this._cachedMeta;\n        if (this._data) {\n            unlistenArrayEvents(this._data, this);\n        }\n        if (meta._stacked) {\n            clearStacks(meta);\n        }\n    }\n _dataCheck() {\n        const dataset = this.getDataset();\n        const data = dataset.data || (dataset.data = []);\n        const _data = this._data;\n        if (isObject(data)) {\n            const meta = this._cachedMeta;\n            this._data = convertObjectDataToArray(data, meta);\n        } else if (_data !== data) {\n            if (_data) {\n                unlistenArrayEvents(_data, this);\n                const meta = this._cachedMeta;\n                clearStacks(meta);\n                meta._parsed = [];\n            }\n            if (data && Object.isExtensible(data)) {\n                listenArrayEvents(data, this);\n            }\n            this._syncList = [];\n            this._data = data;\n        }\n    }\n    addElements() {\n        const meta = this._cachedMeta;\n        this._dataCheck();\n        if (this.datasetElementType) {\n            meta.dataset = new this.datasetElementType();\n        }\n    }\n    buildOrUpdateElements(resetNewElements) {\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        let stackChanged = false;\n        this._dataCheck();\n        const oldStacked = meta._stacked;\n        meta._stacked = isStacked(meta.vScale, meta);\n        if (meta.stack !== dataset.stack) {\n            stackChanged = true;\n            clearStacks(meta);\n            meta.stack = dataset.stack;\n        }\n        this._resyncElements(resetNewElements);\n        if (stackChanged || oldStacked !== meta._stacked) {\n            updateStacks(this, meta._parsed);\n            meta._stacked = isStacked(meta.vScale, meta);\n        }\n    }\n configure() {\n        const config = this.chart.config;\n        const scopeKeys = config.datasetScopeKeys(this._type);\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n        this.options = config.createResolver(scopes, this.getContext());\n        this._parsing = this.options.parsing;\n        this._cachedDataOpts = {};\n    }\n parse(start, count) {\n        const { _cachedMeta: meta , _data: data  } = this;\n        const { iScale , _stacked  } = meta;\n        const iAxis = iScale.axis;\n        let sorted = start === 0 && count === data.length ? true : meta._sorted;\n        let prev = start > 0 && meta._parsed[start - 1];\n        let i, cur, parsed;\n        if (this._parsing === false) {\n            meta._parsed = data;\n            meta._sorted = true;\n            parsed = data;\n        } else {\n            if (isArray(data[start])) {\n                parsed = this.parseArrayData(meta, data, start, count);\n            } else if (isObject(data[start])) {\n                parsed = this.parseObjectData(meta, data, start, count);\n            } else {\n                parsed = this.parsePrimitiveData(meta, data, start, count);\n            }\n            const isNotInOrderComparedToPrev = ()=>cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];\n            for(i = 0; i < count; ++i){\n                meta._parsed[i + start] = cur = parsed[i];\n                if (sorted) {\n                    if (isNotInOrderComparedToPrev()) {\n                        sorted = false;\n                    }\n                    prev = cur;\n                }\n            }\n            meta._sorted = sorted;\n        }\n        if (_stacked) {\n            updateStacks(this, parsed);\n        }\n    }\n parsePrimitiveData(meta, data, start, count) {\n        const { iScale , vScale  } = meta;\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const labels = iScale.getLabels();\n        const singleScale = iScale === vScale;\n        const parsed = new Array(count);\n        let i, ilen, index;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            parsed[i] = {\n                [iAxis]: singleScale || iScale.parse(labels[index], index),\n                [vAxis]: vScale.parse(data[index], index)\n            };\n        }\n        return parsed;\n    }\n parseArrayData(meta, data, start, count) {\n        const { xScale , yScale  } = meta;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse(item[0], index),\n                y: yScale.parse(item[1], index)\n            };\n        }\n        return parsed;\n    }\n parseObjectData(meta, data, start, count) {\n        const { xScale , yScale  } = meta;\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n                y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n            };\n        }\n        return parsed;\n    }\n getParsed(index) {\n        return this._cachedMeta._parsed[index];\n    }\n getDataElement(index) {\n        return this._cachedMeta.data[index];\n    }\n applyStack(scale, parsed, mode) {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const value = parsed[scale.axis];\n        const stack = {\n            keys: getSortedDatasetIndices(chart, true),\n            values: parsed._stacks[scale.axis]._visualValues\n        };\n        return applyStack(stack, value, meta.index, {\n            mode\n        });\n    }\n updateRangeFromParsed(range, scale, parsed, stack) {\n        const parsedValue = parsed[scale.axis];\n        let value = parsedValue === null ? NaN : parsedValue;\n        const values = stack && parsed._stacks[scale.axis];\n        if (stack && values) {\n            stack.values = values;\n            value = applyStack(stack, parsedValue, this._cachedMeta.index);\n        }\n        range.min = Math.min(range.min, value);\n        range.max = Math.max(range.max, value);\n    }\n getMinMax(scale, canStack) {\n        const meta = this._cachedMeta;\n        const _parsed = meta._parsed;\n        const sorted = meta._sorted && scale === meta.iScale;\n        const ilen = _parsed.length;\n        const otherScale = this._getOtherScale(scale);\n        const stack = createStack(canStack, meta, this.chart);\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        const { min: otherMin , max: otherMax  } = getUserBounds(otherScale);\n        let i, parsed;\n        function _skip() {\n            parsed = _parsed[i];\n            const otherValue = parsed[otherScale.axis];\n            return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n        }\n        for(i = 0; i < ilen; ++i){\n            if (_skip()) {\n                continue;\n            }\n            this.updateRangeFromParsed(range, scale, parsed, stack);\n            if (sorted) {\n                break;\n            }\n        }\n        if (sorted) {\n            for(i = ilen - 1; i >= 0; --i){\n                if (_skip()) {\n                    continue;\n                }\n                this.updateRangeFromParsed(range, scale, parsed, stack);\n                break;\n            }\n        }\n        return range;\n    }\n    getAllParsedValues(scale) {\n        const parsed = this._cachedMeta._parsed;\n        const values = [];\n        let i, ilen, value;\n        for(i = 0, ilen = parsed.length; i < ilen; ++i){\n            value = parsed[i][scale.axis];\n            if (isNumberFinite(value)) {\n                values.push(value);\n            }\n        }\n        return values;\n    }\n getMaxOverflow() {\n        return false;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const vScale = meta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n            value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n        };\n    }\n _update(mode) {\n        const meta = this._cachedMeta;\n        this.update(mode || 'default');\n        meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n    }\n update(mode) {}\n    draw() {\n        const ctx = this._ctx;\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const elements = meta.data || [];\n        const area = chart.chartArea;\n        const active = [];\n        const start = this._drawStart || 0;\n        const count = this._drawCount || elements.length - start;\n        const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n        let i;\n        if (meta.dataset) {\n            meta.dataset.draw(ctx, area, start, count);\n        }\n        for(i = start; i < start + count; ++i){\n            const element = elements[i];\n            if (element.hidden) {\n                continue;\n            }\n            if (element.active && drawActiveElementsOnTop) {\n                active.push(element);\n            } else {\n                element.draw(ctx, area);\n            }\n        }\n        for(i = 0; i < active.length; ++i){\n            active[i].draw(ctx, area);\n        }\n    }\n getStyle(index, active) {\n        const mode = active ? 'active' : 'default';\n        return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);\n    }\n getContext(index, active, mode) {\n        const dataset = this.getDataset();\n        let context;\n        if (index >= 0 && index < this._cachedMeta.data.length) {\n            const element = this._cachedMeta.data[index];\n            context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));\n            context.parsed = this.getParsed(index);\n            context.raw = dataset.data[index];\n            context.index = context.dataIndex = index;\n        } else {\n            context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n            context.dataset = dataset;\n            context.index = context.datasetIndex = this.index;\n        }\n        context.active = !!active;\n        context.mode = mode;\n        return context;\n    }\n resolveDatasetElementOptions(mode) {\n        return this._resolveElementOptions(this.datasetElementType.id, mode);\n    }\n resolveDataElementOptions(index, mode) {\n        return this._resolveElementOptions(this.dataElementType.id, mode, index);\n    }\n _resolveElementOptions(elementType, mode = 'default', index) {\n        const active = mode === 'active';\n        const cache = this._cachedDataOpts;\n        const cacheKey = elementType + '-' + mode;\n        const cached = cache[cacheKey];\n        const sharing = this.enableOptionSharing && defined(index);\n        if (cached) {\n            return cloneIfNotShared(cached, sharing);\n        }\n        const config = this.chart.config;\n        const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n        const prefixes = active ? [\n            `${elementType}Hover`,\n            'hover',\n            elementType,\n            ''\n        ] : [\n            elementType,\n            ''\n        ];\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n        const names = Object.keys(defaults.elements[elementType]);\n        const context = ()=>this.getContext(index, active, mode);\n        const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n        if (values.$shared) {\n            values.$shared = sharing;\n            cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n        }\n        return values;\n    }\n _resolveAnimations(index, transition, active) {\n        const chart = this.chart;\n        const cache = this._cachedDataOpts;\n        const cacheKey = `animation-${transition}`;\n        const cached = cache[cacheKey];\n        if (cached) {\n            return cached;\n        }\n        let options;\n        if (chart.options.animation !== false) {\n            const config = this.chart.config;\n            const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n            const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n            options = config.createResolver(scopes, this.getContext(index, active, transition));\n        }\n        const animations = new Animations(chart, options && options.animations);\n        if (options && options._cacheable) {\n            cache[cacheKey] = Object.freeze(animations);\n        }\n        return animations;\n    }\n getSharedOptions(options) {\n        if (!options.$shared) {\n            return;\n        }\n        return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n    }\n includeOptions(mode, sharedOptions) {\n        return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n    }\n _getSharedOptions(start, mode) {\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const previouslySharedOptions = this._sharedOptions;\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n        return {\n            sharedOptions,\n            includeOptions\n        };\n    }\n updateElement(element, index, properties, mode) {\n        if (isDirectUpdateMode(mode)) {\n            Object.assign(element, properties);\n        } else {\n            this._resolveAnimations(index, mode).update(element, properties);\n        }\n    }\n updateSharedOptions(sharedOptions, mode, newOptions) {\n        if (sharedOptions && !isDirectUpdateMode(mode)) {\n            this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n        }\n    }\n _setStyle(element, index, mode, active) {\n        element.active = active;\n        const options = this.getStyle(index, active);\n        this._resolveAnimations(index, mode, active).update(element, {\n            options: !active && this.getSharedOptions(options) || options\n        });\n    }\n    removeHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, 'active', false);\n    }\n    setHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, 'active', true);\n    }\n _removeDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) {\n            this._setStyle(element, undefined, 'active', false);\n        }\n    }\n _setDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) {\n            this._setStyle(element, undefined, 'active', true);\n        }\n    }\n _resyncElements(resetNewElements) {\n        const data = this._data;\n        const elements = this._cachedMeta.data;\n        for (const [method, arg1, arg2] of this._syncList){\n            this[method](arg1, arg2);\n        }\n        this._syncList = [];\n        const numMeta = elements.length;\n        const numData = data.length;\n        const count = Math.min(numData, numMeta);\n        if (count) {\n            this.parse(0, count);\n        }\n        if (numData > numMeta) {\n            this._insertElements(numMeta, numData - numMeta, resetNewElements);\n        } else if (numData < numMeta) {\n            this._removeElements(numData, numMeta - numData);\n        }\n    }\n _insertElements(start, count, resetNewElements = true) {\n        const meta = this._cachedMeta;\n        const data = meta.data;\n        const end = start + count;\n        let i;\n        const move = (arr)=>{\n            arr.length += count;\n            for(i = arr.length - 1; i >= end; i--){\n                arr[i] = arr[i - count];\n            }\n        };\n        move(data);\n        for(i = start; i < end; ++i){\n            data[i] = new this.dataElementType();\n        }\n        if (this._parsing) {\n            move(meta._parsed);\n        }\n        this.parse(start, count);\n        if (resetNewElements) {\n            this.updateElements(data, start, count, 'reset');\n        }\n    }\n    updateElements(element, start, count, mode) {}\n _removeElements(start, count) {\n        const meta = this._cachedMeta;\n        if (this._parsing) {\n            const removed = meta._parsed.splice(start, count);\n            if (meta._stacked) {\n                clearStacks(meta, removed);\n            }\n        }\n        meta.data.splice(start, count);\n    }\n _sync(args) {\n        if (this._parsing) {\n            this._syncList.push(args);\n        } else {\n            const [method, arg1, arg2] = args;\n            this[method](arg1, arg2);\n        }\n        this.chart._dataChanges.push([\n            this.index,\n            ...args\n        ]);\n    }\n    _onDataPush() {\n        const count = arguments.length;\n        this._sync([\n            '_insertElements',\n            this.getDataset().data.length - count,\n            count\n        ]);\n    }\n    _onDataPop() {\n        this._sync([\n            '_removeElements',\n            this._cachedMeta.data.length - 1,\n            1\n        ]);\n    }\n    _onDataShift() {\n        this._sync([\n            '_removeElements',\n            0,\n            1\n        ]);\n    }\n    _onDataSplice(start, count) {\n        if (count) {\n            this._sync([\n                '_removeElements',\n                start,\n                count\n            ]);\n        }\n        const newCount = arguments.length - 2;\n        if (newCount) {\n            this._sync([\n                '_insertElements',\n                start,\n                newCount\n            ]);\n        }\n    }\n    _onDataUnshift() {\n        this._sync([\n            '_insertElements',\n            0,\n            arguments.length\n        ]);\n    }\n}\n\nfunction getAllScaleValues(scale, type) {\n    if (!scale._cache.$bar) {\n        const visibleMetas = scale.getMatchingVisibleMetas(type);\n        let values = [];\n        for(let i = 0, ilen = visibleMetas.length; i < ilen; i++){\n            values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n        }\n        scale._cache.$bar = _arrayUnique(values.sort((a, b)=>a - b));\n    }\n    return scale._cache.$bar;\n}\n function computeMinSampleSize(meta) {\n    const scale = meta.iScale;\n    const values = getAllScaleValues(scale, meta.type);\n    let min = scale._length;\n    let i, ilen, curr, prev;\n    const updateMinAndPrev = ()=>{\n        if (curr === 32767 || curr === -32768) {\n            return;\n        }\n        if (defined(prev)) {\n            min = Math.min(min, Math.abs(curr - prev) || min);\n        }\n        prev = curr;\n    };\n    for(i = 0, ilen = values.length; i < ilen; ++i){\n        curr = scale.getPixelForValue(values[i]);\n        updateMinAndPrev();\n    }\n    prev = undefined;\n    for(i = 0, ilen = scale.ticks.length; i < ilen; ++i){\n        curr = scale.getPixelForTick(i);\n        updateMinAndPrev();\n    }\n    return min;\n}\n function computeFitCategoryTraits(index, ruler, options, stackCount) {\n    const thickness = options.barThickness;\n    let size, ratio;\n    if (isNullOrUndef(thickness)) {\n        size = ruler.min * options.categoryPercentage;\n        ratio = options.barPercentage;\n    } else {\n        size = thickness * stackCount;\n        ratio = 1;\n    }\n    return {\n        chunk: size / stackCount,\n        ratio,\n        start: ruler.pixels[index] - size / 2\n    };\n}\n function computeFlexCategoryTraits(index, ruler, options, stackCount) {\n    const pixels = ruler.pixels;\n    const curr = pixels[index];\n    let prev = index > 0 ? pixels[index - 1] : null;\n    let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n    const percent = options.categoryPercentage;\n    if (prev === null) {\n        prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n    }\n    if (next === null) {\n        next = curr + curr - prev;\n    }\n    const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n    const size = Math.abs(next - prev) / 2 * percent;\n    return {\n        chunk: size / stackCount,\n        ratio: options.barPercentage,\n        start\n    };\n}\nfunction parseFloatBar(entry, item, vScale, i) {\n    const startValue = vScale.parse(entry[0], i);\n    const endValue = vScale.parse(entry[1], i);\n    const min = Math.min(startValue, endValue);\n    const max = Math.max(startValue, endValue);\n    let barStart = min;\n    let barEnd = max;\n    if (Math.abs(min) > Math.abs(max)) {\n        barStart = max;\n        barEnd = min;\n    }\n    item[vScale.axis] = barEnd;\n    item._custom = {\n        barStart,\n        barEnd,\n        start: startValue,\n        end: endValue,\n        min,\n        max\n    };\n}\nfunction parseValue(entry, item, vScale, i) {\n    if (isArray(entry)) {\n        parseFloatBar(entry, item, vScale, i);\n    } else {\n        item[vScale.axis] = vScale.parse(entry, i);\n    }\n    return item;\n}\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = [];\n    let i, ilen, item, entry;\n    for(i = start, ilen = start + count; i < ilen; ++i){\n        entry = data[i];\n        item = {};\n        item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n        parsed.push(parseValue(entry, item, vScale, i));\n    }\n    return parsed;\n}\nfunction isFloatBar(custom) {\n    return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\nfunction barSign(size, vScale, actualBase) {\n    if (size !== 0) {\n        return sign(size);\n    }\n    return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\nfunction borderProps(properties) {\n    let reverse, start, end, top, bottom;\n    if (properties.horizontal) {\n        reverse = properties.base > properties.x;\n        start = 'left';\n        end = 'right';\n    } else {\n        reverse = properties.base < properties.y;\n        start = 'bottom';\n        end = 'top';\n    }\n    if (reverse) {\n        top = 'end';\n        bottom = 'start';\n    } else {\n        top = 'start';\n        bottom = 'end';\n    }\n    return {\n        start,\n        end,\n        reverse,\n        top,\n        bottom\n    };\n}\nfunction setBorderSkipped(properties, options, stack, index) {\n    let edge = options.borderSkipped;\n    const res = {};\n    if (!edge) {\n        properties.borderSkipped = res;\n        return;\n    }\n    if (edge === true) {\n        properties.borderSkipped = {\n            top: true,\n            right: true,\n            bottom: true,\n            left: true\n        };\n        return;\n    }\n    const { start , end , reverse , top , bottom  } = borderProps(properties);\n    if (edge === 'middle' && stack) {\n        properties.enableBorderRadius = true;\n        if ((stack._top || 0) === index) {\n            edge = top;\n        } else if ((stack._bottom || 0) === index) {\n            edge = bottom;\n        } else {\n            res[parseEdge(bottom, start, end, reverse)] = true;\n            edge = top;\n        }\n    }\n    res[parseEdge(edge, start, end, reverse)] = true;\n    properties.borderSkipped = res;\n}\nfunction parseEdge(edge, a, b, reverse) {\n    if (reverse) {\n        edge = swap(edge, a, b);\n        edge = startEnd(edge, b, a);\n    } else {\n        edge = startEnd(edge, a, b);\n    }\n    return edge;\n}\nfunction swap(orig, v1, v2) {\n    return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\nfunction startEnd(v, start, end) {\n    return v === 'start' ? start : v === 'end' ? end : v;\n}\nfunction setInflateAmount(properties, { inflateAmount  }, ratio) {\n    properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;\n}\nclass BarController extends DatasetController {\n    static id = 'bar';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'bar',\n        categoryPercentage: 0.8,\n        barPercentage: 0.9,\n        grouped: true,\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'base',\n                    'width',\n                    'height'\n                ]\n            }\n        }\n    };\n static overrides = {\n        scales: {\n            _index_: {\n                type: 'category',\n                offset: true,\n                grid: {\n                    offset: true\n                }\n            },\n            _value_: {\n                type: 'linear',\n                beginAtZero: true\n            }\n        }\n    };\n parsePrimitiveData(meta, data, start, count) {\n        return parseArrayOrPrimitive(meta, data, start, count);\n    }\n parseArrayData(meta, data, start, count) {\n        return parseArrayOrPrimitive(meta, data, start, count);\n    }\n parseObjectData(meta, data, start, count) {\n        const { iScale , vScale  } = meta;\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n        const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n        const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n        const parsed = [];\n        let i, ilen, item, obj;\n        for(i = start, ilen = start + count; i < ilen; ++i){\n            obj = data[i];\n            item = {};\n            item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n            parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n        }\n        return parsed;\n    }\n updateRangeFromParsed(range, scale, parsed, stack) {\n        super.updateRangeFromParsed(range, scale, parsed, stack);\n        const custom = parsed._custom;\n        if (custom && scale === this._cachedMeta.vScale) {\n            range.min = Math.min(range.min, custom.min);\n            range.max = Math.max(range.max, custom.max);\n        }\n    }\n getMaxOverflow() {\n        return 0;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const { iScale , vScale  } = meta;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n        return {\n            label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n            value\n        };\n    }\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n        const meta = this._cachedMeta;\n        meta.stack = this.getDataset().stack;\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        this.updateElements(meta.data, 0, meta.data.length, mode);\n    }\n    updateElements(bars, start, count, mode) {\n        const reset = mode === 'reset';\n        const { index , _cachedMeta: { vScale  }  } = this;\n        const base = vScale.getBasePixel();\n        const horizontal = vScale.isHorizontal();\n        const ruler = this._getRuler();\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        for(let i = start; i < start + count; i++){\n            const parsed = this.getParsed(i);\n            const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {\n                base,\n                head: base\n            } : this._calculateBarValuePixels(i);\n            const ipixels = this._calculateBarIndexPixels(i, ruler);\n            const stack = (parsed._stacks || {})[vScale.axis];\n            const properties = {\n                horizontal,\n                base: vpixels.base,\n                enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,\n                x: horizontal ? vpixels.head : ipixels.center,\n                y: horizontal ? ipixels.center : vpixels.head,\n                height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n                width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n            };\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n            }\n            const options = properties.options || bars[i].options;\n            setBorderSkipped(properties, options, stack, index);\n            setInflateAmount(properties, options, ruler.ratio);\n            this.updateElement(bars[i], i, properties, mode);\n        }\n    }\n _getStacks(last, dataIndex) {\n        const { iScale  } = this._cachedMeta;\n        const metasets = iScale.getMatchingVisibleMetas(this._type).filter((meta)=>meta.controller.options.grouped);\n        const stacked = iScale.options.stacked;\n        const stacks = [];\n        const currentParsed = this._cachedMeta.controller.getParsed(dataIndex);\n        const iScaleValue = currentParsed && currentParsed[iScale.axis];\n        const skipNull = (meta)=>{\n            const parsed = meta._parsed.find((item)=>item[iScale.axis] === iScaleValue);\n            const val = parsed && parsed[meta.vScale.axis];\n            if (isNullOrUndef(val) || isNaN(val)) {\n                return true;\n            }\n        };\n        for (const meta of metasets){\n            if (dataIndex !== undefined && skipNull(meta)) {\n                continue;\n            }\n            if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {\n                stacks.push(meta.stack);\n            }\n            if (meta.index === last) {\n                break;\n            }\n        }\n        if (!stacks.length) {\n            stacks.push(undefined);\n        }\n        return stacks;\n    }\n _getStackCount(index) {\n        return this._getStacks(undefined, index).length;\n    }\n    _getAxisCount() {\n        return this._getAxis().length;\n    }\n    getFirstScaleIdForIndexAxis() {\n        const scales = this.chart.scales;\n        const indexScaleId = this.chart.options.indexAxis;\n        return Object.keys(scales).filter((key)=>scales[key].axis === indexScaleId).shift();\n    }\n    _getAxis() {\n        const axis = {};\n        const firstScaleAxisId = this.getFirstScaleIdForIndexAxis();\n        for (const dataset of this.chart.data.datasets){\n            axis[valueOrDefault(this.chart.options.indexAxis === 'x' ? dataset.xAxisID : dataset.yAxisID, firstScaleAxisId)] = true;\n        }\n        return Object.keys(axis);\n    }\n _getStackIndex(datasetIndex, name, dataIndex) {\n        const stacks = this._getStacks(datasetIndex, dataIndex);\n        const index = name !== undefined ? stacks.indexOf(name) : -1;\n        return index === -1 ? stacks.length - 1 : index;\n    }\n _getRuler() {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const pixels = [];\n        let i, ilen;\n        for(i = 0, ilen = meta.data.length; i < ilen; ++i){\n            pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n        }\n        const barThickness = opts.barThickness;\n        const min = barThickness || computeMinSampleSize(meta);\n        return {\n            min,\n            pixels,\n            start: iScale._startPixel,\n            end: iScale._endPixel,\n            stackCount: this._getStackCount(),\n            scale: iScale,\n            grouped: opts.grouped,\n            ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n        };\n    }\n _calculateBarValuePixels(index) {\n        const { _cachedMeta: { vScale , _stacked , index: datasetIndex  } , options: { base: baseValue , minBarLength  }  } = this;\n        const actualBase = baseValue || 0;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const floating = isFloatBar(custom);\n        let value = parsed[vScale.axis];\n        let start = 0;\n        let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n        let head, size;\n        if (length !== value) {\n            start = length - value;\n            length = value;\n        }\n        if (floating) {\n            value = custom.barStart;\n            length = custom.barEnd - custom.barStart;\n            if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n                start = 0;\n            }\n            start += value;\n        }\n        const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n        let base = vScale.getPixelForValue(startValue);\n        if (this.chart.getDataVisibility(index)) {\n            head = vScale.getPixelForValue(start + length);\n        } else {\n            head = base;\n        }\n        size = head - base;\n        if (Math.abs(size) < minBarLength) {\n            size = barSign(size, vScale, actualBase) * minBarLength;\n            if (value === actualBase) {\n                base -= size / 2;\n            }\n            const startPixel = vScale.getPixelForDecimal(0);\n            const endPixel = vScale.getPixelForDecimal(1);\n            const min = Math.min(startPixel, endPixel);\n            const max = Math.max(startPixel, endPixel);\n            base = Math.max(Math.min(base, max), min);\n            head = base + size;\n            if (_stacked && !floating) {\n                parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n            }\n        }\n        if (base === vScale.getPixelForValue(actualBase)) {\n            const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n            base += halfGrid;\n            size -= halfGrid;\n        }\n        return {\n            size,\n            base,\n            head,\n            center: head + size / 2\n        };\n    }\n _calculateBarIndexPixels(index, ruler) {\n        const scale = ruler.scale;\n        const options = this.options;\n        const skipNull = options.skipNull;\n        const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n        let center, size;\n        const axisCount = this._getAxisCount();\n        if (ruler.grouped) {\n            const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n            const range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount * axisCount) : computeFitCategoryTraits(index, ruler, options, stackCount * axisCount);\n            const axisID = this.chart.options.indexAxis === 'x' ? this.getDataset().xAxisID : this.getDataset().yAxisID;\n            const axisNumber = this._getAxis().indexOf(valueOrDefault(axisID, this.getFirstScaleIdForIndexAxis()));\n            const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined) + axisNumber;\n            center = range.start + range.chunk * stackIndex + range.chunk / 2;\n            size = Math.min(maxBarThickness, range.chunk * range.ratio);\n        } else {\n            center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n            size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n        }\n        return {\n            base: center - size / 2,\n            head: center + size / 2,\n            center,\n            size\n        };\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        const vScale = meta.vScale;\n        const rects = meta.data;\n        const ilen = rects.length;\n        let i = 0;\n        for(; i < ilen; ++i){\n            if (this.getParsed(i)[vScale.axis] !== null && !rects[i].hidden) {\n                rects[i].draw(this._ctx);\n            }\n        }\n    }\n}\n\nclass BubbleController extends DatasetController {\n    static id = 'bubble';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'point',\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'borderWidth',\n                    'radius'\n                ]\n            }\n        }\n    };\n static overrides = {\n        scales: {\n            x: {\n                type: 'linear'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n    }\n parsePrimitiveData(meta, data, start, count) {\n        const parsed = super.parsePrimitiveData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n        }\n        return parsed;\n    }\n parseArrayData(meta, data, start, count) {\n        const parsed = super.parseArrayData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n parseObjectData(meta, data, start, count) {\n        const parsed = super.parseObjectData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n getMaxOverflow() {\n        const data = this._cachedMeta.data;\n        let max = 0;\n        for(let i = data.length - 1; i >= 0; --i){\n            max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n        }\n        return max > 0 && max;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale , yScale  } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        const r = parsed._custom;\n        return {\n            label: labels[index] || '',\n            value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n        };\n    }\n    update(mode) {\n        const points = this._cachedMeta.data;\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale  } = this._cachedMeta;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const parsed = !reset && this.getParsed(i);\n            const properties = {};\n            const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n            const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel);\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n                if (reset) {\n                    properties.options.radius = 0;\n                }\n            }\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n resolveDataElementOptions(index, mode) {\n        const parsed = this.getParsed(index);\n        let values = super.resolveDataElementOptions(index, mode);\n        if (values.$shared) {\n            values = Object.assign({}, values, {\n                $shared: false\n            });\n        }\n        const radius = values.radius;\n        if (mode !== 'active') {\n            values.radius = 0;\n        }\n        values.radius += valueOrDefault(parsed && parsed._custom, radius);\n        return values;\n    }\n}\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n    let ratioX = 1;\n    let ratioY = 1;\n    let offsetX = 0;\n    let offsetY = 0;\n    if (circumference < TAU) {\n        const startAngle = rotation;\n        const endAngle = startAngle + circumference;\n        const startX = Math.cos(startAngle);\n        const startY = Math.sin(startAngle);\n        const endX = Math.cos(endAngle);\n        const endY = Math.sin(endAngle);\n        const calcMax = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n        const calcMin = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n        const maxX = calcMax(0, startX, endX);\n        const maxY = calcMax(HALF_PI, startY, endY);\n        const minX = calcMin(PI, startX, endX);\n        const minY = calcMin(PI + HALF_PI, startY, endY);\n        ratioX = (maxX - minX) / 2;\n        ratioY = (maxY - minY) / 2;\n        offsetX = -(maxX + minX) / 2;\n        offsetY = -(maxY + minY) / 2;\n    }\n    return {\n        ratioX,\n        ratioY,\n        offsetX,\n        offsetY\n    };\n}\nclass DoughnutController extends DatasetController {\n    static id = 'doughnut';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'arc',\n        animation: {\n            animateRotate: true,\n            animateScale: false\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'circumference',\n                    'endAngle',\n                    'innerRadius',\n                    'outerRadius',\n                    'startAngle',\n                    'x',\n                    'y',\n                    'offset',\n                    'borderWidth',\n                    'spacing'\n                ]\n            }\n        },\n        cutout: '50%',\n        rotation: 0,\n        circumference: 360,\n        radius: '100%',\n        spacing: 0,\n        indexAxis: 'r'\n    };\n    static descriptors = {\n        _scriptable: (name)=>name !== 'spacing',\n        _indexable: (name)=>name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash')\n    };\n static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        const { labels: { pointStyle , textAlign , color , useBorderRadius , borderRadius  }  } = chart.legend.options;\n                        if (data.labels.length && data.datasets.length) {\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    fontColor: color,\n                                    hidden: !chart.getDataVisibility(i),\n                                    lineDash: style.borderDash,\n                                    lineDashOffset: style.borderDashOffset,\n                                    lineJoin: style.borderJoinStyle,\n                                    lineWidth: style.borderWidth,\n                                    strokeStyle: style.borderColor,\n                                    textAlign: textAlign,\n                                    pointStyle: pointStyle,\n                                    borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.enableOptionSharing = true;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.offsetX = undefined;\n        this.offsetY = undefined;\n    }\n    linkScales() {}\n parse(start, count) {\n        const data = this.getDataset().data;\n        const meta = this._cachedMeta;\n        if (this._parsing === false) {\n            meta._parsed = data;\n        } else {\n            let getter = (i)=>+data[i];\n            if (isObject(data[start])) {\n                const { key ='value'  } = this._parsing;\n                getter = (i)=>+resolveObjectKey(data[i], key);\n            }\n            let i, ilen;\n            for(i = start, ilen = start + count; i < ilen; ++i){\n                meta._parsed[i] = getter(i);\n            }\n        }\n    }\n _getRotation() {\n        return toRadians(this.options.rotation - 90);\n    }\n _getCircumference() {\n        return toRadians(this.options.circumference);\n    }\n _getRotationExtents() {\n        let min = TAU;\n        let max = -TAU;\n        for(let i = 0; i < this.chart.data.datasets.length; ++i){\n            if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n                const controller = this.chart.getDatasetMeta(i).controller;\n                const rotation = controller._getRotation();\n                const circumference = controller._getCircumference();\n                min = Math.min(min, rotation);\n                max = Math.max(max, rotation + circumference);\n            }\n        }\n        return {\n            rotation: min,\n            circumference: max - min\n        };\n    }\n update(mode) {\n        const chart = this.chart;\n        const { chartArea  } = chart;\n        const meta = this._cachedMeta;\n        const arcs = meta.data;\n        const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n        const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n        const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n        const chartWeight = this._getRingWeight(this.index);\n        const { circumference , rotation  } = this._getRotationExtents();\n        const { ratioX , ratioY , offsetX , offsetY  } = getRatioAndOffset(rotation, circumference, cutout);\n        const maxWidth = (chartArea.width - spacing) / ratioX;\n        const maxHeight = (chartArea.height - spacing) / ratioY;\n        const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n        const outerRadius = toDimension(this.options.radius, maxRadius);\n        const innerRadius = Math.max(outerRadius * cutout, 0);\n        const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n        this.offsetX = offsetX * outerRadius;\n        this.offsetY = offsetY * outerRadius;\n        meta.total = this.calculateTotal();\n        this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n        this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n _circumference(i, reset) {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const circumference = this._getCircumference();\n        if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n            return 0;\n        }\n        return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === 'reset';\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const centerX = (chartArea.left + chartArea.right) / 2;\n        const centerY = (chartArea.top + chartArea.bottom) / 2;\n        const animateScale = reset && animationOpts.animateScale;\n        const innerRadius = animateScale ? 0 : this.innerRadius;\n        const outerRadius = animateScale ? 0 : this.outerRadius;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        let startAngle = this._getRotation();\n        let i;\n        for(i = 0; i < start; ++i){\n            startAngle += this._circumference(i, reset);\n        }\n        for(i = start; i < start + count; ++i){\n            const circumference = this._circumference(i, reset);\n            const arc = arcs[i];\n            const properties = {\n                x: centerX + this.offsetX,\n                y: centerY + this.offsetY,\n                startAngle,\n                endAngle: startAngle + circumference,\n                circumference,\n                outerRadius,\n                innerRadius\n            };\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n            }\n            startAngle += circumference;\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    calculateTotal() {\n        const meta = this._cachedMeta;\n        const metaData = meta.data;\n        let total = 0;\n        let i;\n        for(i = 0; i < metaData.length; i++){\n            const value = meta._parsed[i];\n            if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n                total += Math.abs(value);\n            }\n        }\n        return total;\n    }\n    calculateCircumference(value) {\n        const total = this._cachedMeta.total;\n        if (total > 0 && !isNaN(value)) {\n            return TAU * (Math.abs(value) / total);\n        }\n        return 0;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = formatNumber(meta._parsed[index], chart.options.locale);\n        return {\n            label: labels[index] || '',\n            value\n        };\n    }\n    getMaxBorderWidth(arcs) {\n        let max = 0;\n        const chart = this.chart;\n        let i, ilen, meta, controller, options;\n        if (!arcs) {\n            for(i = 0, ilen = chart.data.datasets.length; i < ilen; ++i){\n                if (chart.isDatasetVisible(i)) {\n                    meta = chart.getDatasetMeta(i);\n                    arcs = meta.data;\n                    controller = meta.controller;\n                    break;\n                }\n            }\n        }\n        if (!arcs) {\n            return 0;\n        }\n        for(i = 0, ilen = arcs.length; i < ilen; ++i){\n            options = controller.resolveDataElementOptions(i);\n            if (options.borderAlign !== 'inner') {\n                max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n            }\n        }\n        return max;\n    }\n    getMaxOffset(arcs) {\n        let max = 0;\n        for(let i = 0, ilen = arcs.length; i < ilen; ++i){\n            const options = this.resolveDataElementOptions(i);\n            max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n        }\n        return max;\n    }\n _getRingWeightOffset(datasetIndex) {\n        let ringWeightOffset = 0;\n        for(let i = 0; i < datasetIndex; ++i){\n            if (this.chart.isDatasetVisible(i)) {\n                ringWeightOffset += this._getRingWeight(i);\n            }\n        }\n        return ringWeightOffset;\n    }\n _getRingWeight(datasetIndex) {\n        return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n    }\n _getVisibleDatasetWeightTotal() {\n        return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n    }\n}\n\nclass LineController extends DatasetController {\n    static id = 'line';\n static defaults = {\n        datasetElementType: 'line',\n        dataElementType: 'point',\n        showLine: true,\n        spanGaps: false\n    };\n static overrides = {\n        scales: {\n            _index_: {\n                type: 'category'\n            },\n            _value_: {\n                type: 'linear'\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        this.supportsDecimation = true;\n        super.initialize();\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { dataset: line , data: points = [] , _dataset  } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if (_scaleRangesChanged(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        line._chart = this.chart;\n        line._datasetIndex = this.index;\n        line._decimated = !!_dataset._decimated;\n        line.points = points;\n        const options = this.resolveDatasetElementOptions(mode);\n        if (!this.options.showLine) {\n            options.borderWidth = 0;\n        }\n        options.segment = this.options.segment;\n        this.updateElement(line, undefined, {\n            animated: !animationsDisabled,\n            options\n        }, mode);\n        this.updateElements(points, start, count, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps , segment  } = this.options;\n        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n        const end = start + count;\n        const pointsCount = points.length;\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = 0; i < pointsCount; ++i){\n            const point = points[i];\n            const properties = directUpdate ? point : {};\n            if (i < start || i >= end) {\n                properties.skip = true;\n                continue;\n            }\n            const parsed = this.getParsed(i);\n            const nullData = isNullOrUndef(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            }\n            if (!directUpdate) {\n                this.updateElement(point, i, properties, mode);\n            }\n            prevParsed = parsed;\n        }\n    }\n getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        const data = meta.data || [];\n        if (!data.length) {\n            return border;\n        }\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n        super.draw();\n    }\n}\n\nclass PolarAreaController extends DatasetController {\n    static id = 'polarArea';\n static defaults = {\n        dataElementType: 'arc',\n        animation: {\n            animateRotate: true,\n            animateScale: true\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'startAngle',\n                    'endAngle',\n                    'innerRadius',\n                    'outerRadius'\n                ]\n            }\n        },\n        indexAxis: 'r',\n        startAngle: 0\n    };\n static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        if (data.labels.length && data.datasets.length) {\n                            const { labels: { pointStyle , color  }  } = chart.legend.options;\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    strokeStyle: style.borderColor,\n                                    fontColor: color,\n                                    lineWidth: style.borderWidth,\n                                    pointStyle: pointStyle,\n                                    hidden: !chart.getDataVisibility(i),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        },\n        scales: {\n            r: {\n                type: 'radialLinear',\n                angleLines: {\n                    display: false\n                },\n                beginAtZero: true,\n                grid: {\n                    circular: true\n                },\n                pointLabels: {\n                    display: false\n                },\n                startAngle: 0\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n        return {\n            label: labels[index] || '',\n            value\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const arcs = this._cachedMeta.data;\n        this._updateRadius();\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n getMinMax() {\n        const meta = this._cachedMeta;\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        meta.data.forEach((element, index)=>{\n            const parsed = this.getParsed(index).r;\n            if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n                if (parsed < range.min) {\n                    range.min = parsed;\n                }\n                if (parsed > range.max) {\n                    range.max = parsed;\n                }\n            }\n        });\n        return range;\n    }\n _updateRadius() {\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n        const outerRadius = Math.max(minSize / 2, 0);\n        const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n        const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n        this.outerRadius = outerRadius - radiusLength * this.index;\n        this.innerRadius = this.outerRadius - radiusLength;\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === 'reset';\n        const chart = this.chart;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const scale = this._cachedMeta.rScale;\n        const centerX = scale.xCenter;\n        const centerY = scale.yCenter;\n        const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n        let angle = datasetStartAngle;\n        let i;\n        const defaultAngle = 360 / this.countVisibleElements();\n        for(i = 0; i < start; ++i){\n            angle += this._computeAngle(i, mode, defaultAngle);\n        }\n        for(i = start; i < start + count; i++){\n            const arc = arcs[i];\n            let startAngle = angle;\n            let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n            let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n            angle = endAngle;\n            if (reset) {\n                if (animationOpts.animateScale) {\n                    outerRadius = 0;\n                }\n                if (animationOpts.animateRotate) {\n                    startAngle = endAngle = datasetStartAngle;\n                }\n            }\n            const properties = {\n                x: centerX,\n                y: centerY,\n                innerRadius: 0,\n                outerRadius,\n                startAngle,\n                endAngle,\n                options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n            };\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    countVisibleElements() {\n        const meta = this._cachedMeta;\n        let count = 0;\n        meta.data.forEach((element, index)=>{\n            if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n                count++;\n            }\n        });\n        return count;\n    }\n _computeAngle(index, mode, defaultAngle) {\n        return this.chart.getDataVisibility(index) ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;\n    }\n}\n\nclass PieController extends DoughnutController {\n    static id = 'pie';\n static defaults = {\n        cutout: 0,\n        rotation: 0,\n        circumference: 360,\n        radius: '100%'\n    };\n}\n\nclass RadarController extends DatasetController {\n    static id = 'radar';\n static defaults = {\n        datasetElementType: 'line',\n        dataElementType: 'point',\n        indexAxis: 'r',\n        showLine: true,\n        elements: {\n            line: {\n                fill: 'start'\n            }\n        }\n    };\n static overrides = {\n        aspectRatio: 1,\n        scales: {\n            r: {\n                type: 'radialLinear'\n            }\n        }\n    };\n getLabelAndValue(index) {\n        const vScale = this._cachedMeta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: vScale.getLabels()[index],\n            value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const line = meta.dataset;\n        const points = meta.data || [];\n        const labels = meta.iScale.getLabels();\n        line.points = points;\n        if (mode !== 'resize') {\n            const options = this.resolveDatasetElementOptions(mode);\n            if (!this.options.showLine) {\n                options.borderWidth = 0;\n            }\n            const properties = {\n                _loop: true,\n                _fullLoop: labels.length === points.length,\n                options\n            };\n            this.updateElement(line, undefined, properties, mode);\n        }\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const scale = this._cachedMeta.rScale;\n        const reset = mode === 'reset';\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n            const x = reset ? scale.xCenter : pointPosition.x;\n            const y = reset ? scale.yCenter : pointPosition.y;\n            const properties = {\n                x,\n                y,\n                angle: pointPosition.angle,\n                skip: isNaN(x) || isNaN(y),\n                options\n            };\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n}\n\nclass ScatterController extends DatasetController {\n    static id = 'scatter';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'point',\n        showLine: false,\n        fill: false\n    };\n static overrides = {\n        interaction: {\n            mode: 'point'\n        },\n        scales: {\n            x: {\n                type: 'linear'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    };\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale , yScale  } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        return {\n            label: labels[index] || '',\n            value: '(' + x + ', ' + y + ')'\n        };\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { data: points = []  } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if (_scaleRangesChanged(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        if (this.options.showLine) {\n            if (!this.datasetElementType) {\n                this.addElements();\n            }\n            const { dataset: line , _dataset  } = meta;\n            line._chart = this.chart;\n            line._datasetIndex = this.index;\n            line._decimated = !!_dataset._decimated;\n            line.points = points;\n            const options = this.resolveDatasetElementOptions(mode);\n            options.segment = this.options.segment;\n            this.updateElement(line, undefined, {\n                animated: !animationsDisabled,\n                options\n            }, mode);\n        } else if (this.datasetElementType) {\n            delete meta.dataset;\n            this.datasetElementType = false;\n        }\n        this.updateElements(points, start, count, mode);\n    }\n    addElements() {\n        const { showLine  } = this.options;\n        if (!this.datasetElementType && showLine) {\n            this.datasetElementType = this.chart.registry.getElement('line');\n        }\n        super.addElements();\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps , segment  } = this.options;\n        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = start; i < start + count; ++i){\n            const point = points[i];\n            const parsed = this.getParsed(i);\n            const properties = directUpdate ? point : {};\n            const nullData = isNullOrUndef(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            }\n            if (!directUpdate) {\n                this.updateElement(point, i, properties, mode);\n            }\n            prevParsed = parsed;\n        }\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    }\n getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const data = meta.data || [];\n        if (!this.options.showLine) {\n            let max = 0;\n            for(let i = data.length - 1; i >= 0; --i){\n                max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n            }\n            return max > 0 && max;\n        }\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        if (!data.length) {\n            return border;\n        }\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n}\n\nvar controllers = /*#__PURE__*/Object.freeze({\n__proto__: null,\nBarController: BarController,\nBubbleController: BubbleController,\nDoughnutController: DoughnutController,\nLineController: LineController,\nPieController: PieController,\nPolarAreaController: PolarAreaController,\nRadarController: RadarController,\nScatterController: ScatterController\n});\n\n/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */ function abstract() {\n    throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */ class DateAdapterBase {\n    /**\n   * Override default date adapter methods.\n   * Accepts type parameter to define options type.\n   * @example\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\n   *   init() {\n   *     console.log(this.options.myAdapterOption);\n   *   }\n   * })\n   */ static override(members) {\n        Object.assign(DateAdapterBase.prototype, members);\n    }\n    options;\n    constructor(options){\n        this.options = options || {};\n    }\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    init() {}\n    formats() {\n        return abstract();\n    }\n    parse() {\n        return abstract();\n    }\n    format() {\n        return abstract();\n    }\n    add() {\n        return abstract();\n    }\n    diff() {\n        return abstract();\n    }\n    startOf() {\n        return abstract();\n    }\n    endOf() {\n        return abstract();\n    }\n}\nvar adapters = {\n    _date: DateAdapterBase\n};\n\nfunction binarySearch(metaset, axis, value, intersect) {\n    const { controller , data , _sorted  } = metaset;\n    const iScale = controller._cachedMeta.iScale;\n    const spanGaps = metaset.dataset ? metaset.dataset.options ? metaset.dataset.options.spanGaps : null : null;\n    if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n        const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n        if (!intersect) {\n            const result = lookupMethod(data, axis, value);\n            if (spanGaps) {\n                const { vScale  } = controller._cachedMeta;\n                const { _parsed  } = metaset;\n                const distanceToDefinedLo = _parsed.slice(0, result.lo + 1).reverse().findIndex((point)=>!isNullOrUndef(point[vScale.axis]));\n                result.lo -= Math.max(0, distanceToDefinedLo);\n                const distanceToDefinedHi = _parsed.slice(result.hi).findIndex((point)=>!isNullOrUndef(point[vScale.axis]));\n                result.hi += Math.max(0, distanceToDefinedHi);\n            }\n            return result;\n        } else if (controller._sharedOptions) {\n            const el = data[0];\n            const range = typeof el.getRange === 'function' && el.getRange(axis);\n            if (range) {\n                const start = lookupMethod(data, axis, value - range);\n                const end = lookupMethod(data, axis, value + range);\n                return {\n                    lo: start.lo,\n                    hi: end.hi\n                };\n            }\n        }\n    }\n    return {\n        lo: 0,\n        hi: data.length - 1\n    };\n}\n function evaluateInteractionItems(chart, axis, position, handler, intersect) {\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const value = position[axis];\n    for(let i = 0, ilen = metasets.length; i < ilen; ++i){\n        const { index , data  } = metasets[i];\n        const { lo , hi  } = binarySearch(metasets[i], axis, value, intersect);\n        for(let j = lo; j <= hi; ++j){\n            const element = data[j];\n            if (!element.skip) {\n                handler(element, index, j);\n            }\n        }\n    }\n}\n function getDistanceMetricForAxis(axis) {\n    const useX = axis.indexOf('x') !== -1;\n    const useY = axis.indexOf('y') !== -1;\n    return function(pt1, pt2) {\n        const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n        const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n        return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n    };\n}\n function getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n    const items = [];\n    if (!includeInvisible && !chart.isPointInArea(position)) {\n        return items;\n    }\n    const evaluationFunc = function(element, datasetIndex, index) {\n        if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n            return;\n        }\n        if (element.inRange(position.x, position.y, useFinalPosition)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    };\n    evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n    return items;\n}\n function getNearestRadialItems(chart, position, axis, useFinalPosition) {\n    let items = [];\n    function evaluationFunc(element, datasetIndex, index) {\n        const { startAngle , endAngle  } = element.getProps([\n            'startAngle',\n            'endAngle'\n        ], useFinalPosition);\n        const { angle  } = getAngleFromPoint(element, {\n            x: position.x,\n            y: position.y\n        });\n        if (_angleBetween(angle, startAngle, endAngle)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    }\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\n function getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    let items = [];\n    const distanceMetric = getDistanceMetricForAxis(axis);\n    let minDistance = Number.POSITIVE_INFINITY;\n    function evaluationFunc(element, datasetIndex, index) {\n        const inRange = element.inRange(position.x, position.y, useFinalPosition);\n        if (intersect && !inRange) {\n            return;\n        }\n        const center = element.getCenterPoint(useFinalPosition);\n        const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n        if (!pointInArea && !inRange) {\n            return;\n        }\n        const distance = distanceMetric(position, center);\n        if (distance < minDistance) {\n            items = [\n                {\n                    element,\n                    datasetIndex,\n                    index\n                }\n            ];\n            minDistance = distance;\n        } else if (distance === minDistance) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    }\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\n function getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    if (!includeInvisible && !chart.isPointInArea(position)) {\n        return [];\n    }\n    return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n function getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n    const items = [];\n    const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n    let intersectsItem = false;\n    evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index)=>{\n        if (element[rangeMethod] && element[rangeMethod](position[axis], useFinalPosition)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n            intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n        }\n    });\n    if (intersect && !intersectsItem) {\n        return [];\n    }\n    return items;\n}\n var Interaction = {\n    evaluateInteractionItems,\n    modes: {\n index (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'x';\n            const includeInvisible = options.includeInvisible || false;\n            const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            const elements = [];\n            if (!items.length) {\n                return [];\n            }\n            chart.getSortedVisibleDatasetMetas().forEach((meta)=>{\n                const index = items[0].index;\n                const element = meta.data[index];\n                if (element && !element.skip) {\n                    elements.push({\n                        element,\n                        datasetIndex: meta.index,\n                        index\n                    });\n                }\n            });\n            return elements;\n        },\n dataset (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            if (items.length > 0) {\n                const datasetIndex = items[0].datasetIndex;\n                const data = chart.getDatasetMeta(datasetIndex).data;\n                items = [];\n                for(let i = 0; i < data.length; ++i){\n                    items.push({\n                        element: data[i],\n                        datasetIndex,\n                        index: i\n                    });\n                }\n            }\n            return items;\n        },\n point (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n        },\n nearest (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n        },\n x (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n        },\n y (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n        }\n    }\n};\n\nconst STATIC_POSITIONS = [\n    'left',\n    'top',\n    'right',\n    'bottom'\n];\nfunction filterByPosition(array, position) {\n    return array.filter((v)=>v.pos === position);\n}\nfunction filterDynamicPositionByAxis(array, axis) {\n    return array.filter((v)=>STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\nfunction sortByWeight(array, reverse) {\n    return array.sort((a, b)=>{\n        const v0 = reverse ? b : a;\n        const v1 = reverse ? a : b;\n        return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;\n    });\n}\nfunction wrapBoxes(boxes) {\n    const layoutBoxes = [];\n    let i, ilen, box, pos, stack, stackWeight;\n    for(i = 0, ilen = (boxes || []).length; i < ilen; ++i){\n        box = boxes[i];\n        ({ position: pos , options: { stack , stackWeight =1  }  } = box);\n        layoutBoxes.push({\n            index: i,\n            box,\n            pos,\n            horizontal: box.isHorizontal(),\n            weight: box.weight,\n            stack: stack && pos + stack,\n            stackWeight\n        });\n    }\n    return layoutBoxes;\n}\nfunction buildStacks(layouts) {\n    const stacks = {};\n    for (const wrap of layouts){\n        const { stack , pos , stackWeight  } = wrap;\n        if (!stack || !STATIC_POSITIONS.includes(pos)) {\n            continue;\n        }\n        const _stack = stacks[stack] || (stacks[stack] = {\n            count: 0,\n            placed: 0,\n            weight: 0,\n            size: 0\n        });\n        _stack.count++;\n        _stack.weight += stackWeight;\n    }\n    return stacks;\n}\n function setLayoutDims(layouts, params) {\n    const stacks = buildStacks(layouts);\n    const { vBoxMaxWidth , hBoxMaxHeight  } = params;\n    let i, ilen, layout;\n    for(i = 0, ilen = layouts.length; i < ilen; ++i){\n        layout = layouts[i];\n        const { fullSize  } = layout.box;\n        const stack = stacks[layout.stack];\n        const factor = stack && layout.stackWeight / stack.weight;\n        if (layout.horizontal) {\n            layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n            layout.height = hBoxMaxHeight;\n        } else {\n            layout.width = vBoxMaxWidth;\n            layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n        }\n    }\n    return stacks;\n}\nfunction buildLayoutBoxes(boxes) {\n    const layoutBoxes = wrapBoxes(boxes);\n    const fullSize = sortByWeight(layoutBoxes.filter((wrap)=>wrap.box.fullSize), true);\n    const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n    const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n    const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n    const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n    const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n    const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n    return {\n        fullSize,\n        leftAndTop: left.concat(top),\n        rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n        chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n        vertical: left.concat(right).concat(centerVertical),\n        horizontal: top.concat(bottom).concat(centerHorizontal)\n    };\n}\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n    return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\nfunction updateMaxPadding(maxPadding, boxPadding) {\n    maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n    maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n    maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n    maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\nfunction updateDims(chartArea, params, layout, stacks) {\n    const { pos , box  } = layout;\n    const maxPadding = chartArea.maxPadding;\n    if (!isObject(pos)) {\n        if (layout.size) {\n            chartArea[pos] -= layout.size;\n        }\n        const stack = stacks[layout.stack] || {\n            size: 0,\n            count: 1\n        };\n        stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n        layout.size = stack.size / stack.count;\n        chartArea[pos] += layout.size;\n    }\n    if (box.getPadding) {\n        updateMaxPadding(maxPadding, box.getPadding());\n    }\n    const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n    const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n    const widthChanged = newWidth !== chartArea.w;\n    const heightChanged = newHeight !== chartArea.h;\n    chartArea.w = newWidth;\n    chartArea.h = newHeight;\n    return layout.horizontal ? {\n        same: widthChanged,\n        other: heightChanged\n    } : {\n        same: heightChanged,\n        other: widthChanged\n    };\n}\nfunction handleMaxPadding(chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function updatePos(pos) {\n        const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n        chartArea[pos] += change;\n        return change;\n    }\n    chartArea.y += updatePos('top');\n    chartArea.x += updatePos('left');\n    updatePos('right');\n    updatePos('bottom');\n}\nfunction getMargins(horizontal, chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function marginForPositions(positions) {\n        const margin = {\n            left: 0,\n            top: 0,\n            right: 0,\n            bottom: 0\n        };\n        positions.forEach((pos)=>{\n            margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n        });\n        return margin;\n    }\n    return horizontal ? marginForPositions([\n        'left',\n        'right'\n    ]) : marginForPositions([\n        'top',\n        'bottom'\n    ]);\n}\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n    const refitBoxes = [];\n    let i, ilen, layout, box, refit, changed;\n    for(i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i){\n        layout = boxes[i];\n        box = layout.box;\n        box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));\n        const { same , other  } = updateDims(chartArea, params, layout, stacks);\n        refit |= same && refitBoxes.length;\n        changed = changed || other;\n        if (!box.fullSize) {\n            refitBoxes.push(layout);\n        }\n    }\n    return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\nfunction setBoxDims(box, left, top, width, height) {\n    box.top = top;\n    box.left = left;\n    box.right = left + width;\n    box.bottom = top + height;\n    box.width = width;\n    box.height = height;\n}\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n    const userPadding = params.padding;\n    let { x , y  } = chartArea;\n    for (const layout of boxes){\n        const box = layout.box;\n        const stack = stacks[layout.stack] || {\n            count: 1,\n            placed: 0,\n            weight: 1\n        };\n        const weight = layout.stackWeight / stack.weight || 1;\n        if (layout.horizontal) {\n            const width = chartArea.w * weight;\n            const height = stack.size || box.height;\n            if (defined(stack.start)) {\n                y = stack.start;\n            }\n            if (box.fullSize) {\n                setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n            } else {\n                setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n            }\n            stack.start = y;\n            stack.placed += width;\n            y = box.bottom;\n        } else {\n            const height = chartArea.h * weight;\n            const width = stack.size || box.width;\n            if (defined(stack.start)) {\n                x = stack.start;\n            }\n            if (box.fullSize) {\n                setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n            } else {\n                setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n            }\n            stack.start = x;\n            stack.placed += height;\n            x = box.right;\n        }\n    }\n    chartArea.x = x;\n    chartArea.y = y;\n}\nvar layouts = {\n addBox (chart, item) {\n        if (!chart.boxes) {\n            chart.boxes = [];\n        }\n        item.fullSize = item.fullSize || false;\n        item.position = item.position || 'top';\n        item.weight = item.weight || 0;\n        item._layers = item._layers || function() {\n            return [\n                {\n                    z: 0,\n                    draw (chartArea) {\n                        item.draw(chartArea);\n                    }\n                }\n            ];\n        };\n        chart.boxes.push(item);\n    },\n removeBox (chart, layoutItem) {\n        const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n        if (index !== -1) {\n            chart.boxes.splice(index, 1);\n        }\n    },\n configure (chart, item, options) {\n        item.fullSize = options.fullSize;\n        item.position = options.position;\n        item.weight = options.weight;\n    },\n update (chart, width, height, minPadding) {\n        if (!chart) {\n            return;\n        }\n        const padding = toPadding(chart.options.layout.padding);\n        const availableWidth = Math.max(width - padding.width, 0);\n        const availableHeight = Math.max(height - padding.height, 0);\n        const boxes = buildLayoutBoxes(chart.boxes);\n        const verticalBoxes = boxes.vertical;\n        const horizontalBoxes = boxes.horizontal;\n        each(chart.boxes, (box)=>{\n            if (typeof box.beforeLayout === 'function') {\n                box.beforeLayout();\n            }\n        });\n        const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap)=>wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n        const params = Object.freeze({\n            outerWidth: width,\n            outerHeight: height,\n            padding,\n            availableWidth,\n            availableHeight,\n            vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n            hBoxMaxHeight: availableHeight / 2\n        });\n        const maxPadding = Object.assign({}, padding);\n        updateMaxPadding(maxPadding, toPadding(minPadding));\n        const chartArea = Object.assign({\n            maxPadding,\n            w: availableWidth,\n            h: availableHeight,\n            x: padding.left,\n            y: padding.top\n        }, padding);\n        const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n        fitBoxes(boxes.fullSize, chartArea, params, stacks);\n        fitBoxes(verticalBoxes, chartArea, params, stacks);\n        if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n            fitBoxes(verticalBoxes, chartArea, params, stacks);\n        }\n        handleMaxPadding(chartArea);\n        placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n        chartArea.x += chartArea.w;\n        chartArea.y += chartArea.h;\n        placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n        chart.chartArea = {\n            left: chartArea.left,\n            top: chartArea.top,\n            right: chartArea.left + chartArea.w,\n            bottom: chartArea.top + chartArea.h,\n            height: chartArea.h,\n            width: chartArea.w\n        };\n        each(boxes.chartArea, (layout)=>{\n            const box = layout.box;\n            Object.assign(box, chart.chartArea);\n            box.update(chartArea.w, chartArea.h, {\n                left: 0,\n                top: 0,\n                right: 0,\n                bottom: 0\n            });\n        });\n    }\n};\n\nclass BasePlatform {\n acquireContext(canvas, aspectRatio) {}\n releaseContext(context) {\n        return false;\n    }\n addEventListener(chart, type, listener) {}\n removeEventListener(chart, type, listener) {}\n getDevicePixelRatio() {\n        return 1;\n    }\n getMaximumSize(element, width, height, aspectRatio) {\n        width = Math.max(0, width || element.width);\n        height = height || element.height;\n        return {\n            width,\n            height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n        };\n    }\n isAttached(canvas) {\n        return true;\n    }\n updateConfig(config) {\n    }\n}\n\nclass BasicPlatform extends BasePlatform {\n    acquireContext(item) {\n        return item && item.getContext && item.getContext('2d') || null;\n    }\n    updateConfig(config) {\n        config.options.animation = false;\n    }\n}\n\nconst EXPANDO_KEY = '$chartjs';\n const EVENT_TYPES = {\n    touchstart: 'mousedown',\n    touchmove: 'mousemove',\n    touchend: 'mouseup',\n    pointerenter: 'mouseenter',\n    pointerdown: 'mousedown',\n    pointermove: 'mousemove',\n    pointerup: 'mouseup',\n    pointerleave: 'mouseout',\n    pointerout: 'mouseout'\n};\nconst isNullOrEmpty = (value)=>value === null || value === '';\n function initCanvas(canvas, aspectRatio) {\n    const style = canvas.style;\n    const renderHeight = canvas.getAttribute('height');\n    const renderWidth = canvas.getAttribute('width');\n    canvas[EXPANDO_KEY] = {\n        initial: {\n            height: renderHeight,\n            width: renderWidth,\n            style: {\n                display: style.display,\n                height: style.height,\n                width: style.width\n            }\n        }\n    };\n    style.display = style.display || 'block';\n    style.boxSizing = style.boxSizing || 'border-box';\n    if (isNullOrEmpty(renderWidth)) {\n        const displayWidth = readUsedSize(canvas, 'width');\n        if (displayWidth !== undefined) {\n            canvas.width = displayWidth;\n        }\n    }\n    if (isNullOrEmpty(renderHeight)) {\n        if (canvas.style.height === '') {\n            canvas.height = canvas.width / (aspectRatio || 2);\n        } else {\n            const displayHeight = readUsedSize(canvas, 'height');\n            if (displayHeight !== undefined) {\n                canvas.height = displayHeight;\n            }\n        }\n    }\n    return canvas;\n}\nconst eventListenerOptions = supportsEventListenerOptions ? {\n    passive: true\n} : false;\nfunction addListener(node, type, listener) {\n    if (node) {\n        node.addEventListener(type, listener, eventListenerOptions);\n    }\n}\nfunction removeListener(chart, type, listener) {\n    if (chart && chart.canvas) {\n        chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n    }\n}\nfunction fromNativeEvent(event, chart) {\n    const type = EVENT_TYPES[event.type] || event.type;\n    const { x , y  } = getRelativePosition(event, chart);\n    return {\n        type,\n        chart,\n        native: event,\n        x: x !== undefined ? x : null,\n        y: y !== undefined ? y : null\n    };\n}\nfunction nodeListContains(nodeList, canvas) {\n    for (const node of nodeList){\n        if (node === canvas || node.contains(canvas)) {\n            return true;\n        }\n    }\n}\nfunction createAttachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n            trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n        }\n        if (trigger) {\n            listener();\n        }\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nfunction createDetachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n            trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n        }\n        if (trigger) {\n            listener();\n        }\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\nfunction onWindowResize() {\n    const dpr = window.devicePixelRatio;\n    if (dpr === oldDevicePixelRatio) {\n        return;\n    }\n    oldDevicePixelRatio = dpr;\n    drpListeningCharts.forEach((resize, chart)=>{\n        if (chart.currentDevicePixelRatio !== dpr) {\n            resize();\n        }\n    });\n}\nfunction listenDevicePixelRatioChanges(chart, resize) {\n    if (!drpListeningCharts.size) {\n        window.addEventListener('resize', onWindowResize);\n    }\n    drpListeningCharts.set(chart, resize);\n}\nfunction unlistenDevicePixelRatioChanges(chart) {\n    drpListeningCharts.delete(chart);\n    if (!drpListeningCharts.size) {\n        window.removeEventListener('resize', onWindowResize);\n    }\n}\nfunction createResizeObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const container = canvas && _getParentNode(canvas);\n    if (!container) {\n        return;\n    }\n    const resize = throttled((width, height)=>{\n        const w = container.clientWidth;\n        listener(width, height);\n        if (w < container.clientWidth) {\n            listener();\n        }\n    }, window);\n    const observer = new ResizeObserver((entries)=>{\n        const entry = entries[0];\n        const width = entry.contentRect.width;\n        const height = entry.contentRect.height;\n        if (width === 0 && height === 0) {\n            return;\n        }\n        resize(width, height);\n    });\n    observer.observe(container);\n    listenDevicePixelRatioChanges(chart, resize);\n    return observer;\n}\nfunction releaseObserver(chart, type, observer) {\n    if (observer) {\n        observer.disconnect();\n    }\n    if (type === 'resize') {\n        unlistenDevicePixelRatioChanges(chart);\n    }\n}\nfunction createProxyAndListen(chart, type, listener) {\n    const canvas = chart.canvas;\n    const proxy = throttled((event)=>{\n        if (chart.ctx !== null) {\n            listener(fromNativeEvent(event, chart));\n        }\n    }, chart);\n    addListener(canvas, type, proxy);\n    return proxy;\n}\n class DomPlatform extends BasePlatform {\n acquireContext(canvas, aspectRatio) {\n        const context = canvas && canvas.getContext && canvas.getContext('2d');\n        if (context && context.canvas === canvas) {\n            initCanvas(canvas, aspectRatio);\n            return context;\n        }\n        return null;\n    }\n releaseContext(context) {\n        const canvas = context.canvas;\n        if (!canvas[EXPANDO_KEY]) {\n            return false;\n        }\n        const initial = canvas[EXPANDO_KEY].initial;\n        [\n            'height',\n            'width'\n        ].forEach((prop)=>{\n            const value = initial[prop];\n            if (isNullOrUndef(value)) {\n                canvas.removeAttribute(prop);\n            } else {\n                canvas.setAttribute(prop, value);\n            }\n        });\n        const style = initial.style || {};\n        Object.keys(style).forEach((key)=>{\n            canvas.style[key] = style[key];\n        });\n        canvas.width = canvas.width;\n        delete canvas[EXPANDO_KEY];\n        return true;\n    }\n addEventListener(chart, type, listener) {\n        this.removeEventListener(chart, type);\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const handlers = {\n            attach: createAttachObserver,\n            detach: createDetachObserver,\n            resize: createResizeObserver\n        };\n        const handler = handlers[type] || createProxyAndListen;\n        proxies[type] = handler(chart, type, listener);\n    }\n removeEventListener(chart, type) {\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const proxy = proxies[type];\n        if (!proxy) {\n            return;\n        }\n        const handlers = {\n            attach: releaseObserver,\n            detach: releaseObserver,\n            resize: releaseObserver\n        };\n        const handler = handlers[type] || removeListener;\n        handler(chart, type, proxy);\n        proxies[type] = undefined;\n    }\n    getDevicePixelRatio() {\n        return window.devicePixelRatio;\n    }\n getMaximumSize(canvas, width, height, aspectRatio) {\n        return getMaximumSize(canvas, width, height, aspectRatio);\n    }\n isAttached(canvas) {\n        const container = canvas && _getParentNode(canvas);\n        return !!(container && container.isConnected);\n    }\n}\n\nfunction _detectPlatform(canvas) {\n    if (!_isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\n        return BasicPlatform;\n    }\n    return DomPlatform;\n}\n\nclass Element {\n    static defaults = {};\n    static defaultRoutes = undefined;\n    x;\n    y;\n    active = false;\n    options;\n    $animations;\n    tooltipPosition(useFinalPosition) {\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return {\n            x,\n            y\n        };\n    }\n    hasValue() {\n        return isNumber(this.x) && isNumber(this.y);\n    }\n    getProps(props, final) {\n        const anims = this.$animations;\n        if (!final || !anims) {\n            // let's not create an object, if not needed\n            return this;\n        }\n        const ret = {};\n        props.forEach((prop)=>{\n            ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];\n        });\n        return ret;\n    }\n}\n\nfunction autoSkip(scale, ticks) {\n    const tickOpts = scale.options.ticks;\n    const determinedMaxTicks = determineMaxTicks(scale);\n    const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n    const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n    const numMajorIndices = majorIndices.length;\n    const first = majorIndices[0];\n    const last = majorIndices[numMajorIndices - 1];\n    const newTicks = [];\n    if (numMajorIndices > ticksLimit) {\n        skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n        return newTicks;\n    }\n    const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n    if (numMajorIndices > 0) {\n        let i, ilen;\n        const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n        skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n        for(i = 0, ilen = numMajorIndices - 1; i < ilen; i++){\n            skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n        }\n        skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n        return newTicks;\n    }\n    skip(ticks, newTicks, spacing);\n    return newTicks;\n}\nfunction determineMaxTicks(scale) {\n    const offset = scale.options.offset;\n    const tickLength = scale._tickSize();\n    const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n    const maxChart = scale._maxLength / tickLength;\n    return Math.floor(Math.min(maxScale, maxChart));\n}\n function calculateSpacing(majorIndices, ticks, ticksLimit) {\n    const evenMajorSpacing = getEvenSpacing(majorIndices);\n    const spacing = ticks.length / ticksLimit;\n    if (!evenMajorSpacing) {\n        return Math.max(spacing, 1);\n    }\n    const factors = _factorize(evenMajorSpacing);\n    for(let i = 0, ilen = factors.length - 1; i < ilen; i++){\n        const factor = factors[i];\n        if (factor > spacing) {\n            return factor;\n        }\n    }\n    return Math.max(spacing, 1);\n}\n function getMajorIndices(ticks) {\n    const result = [];\n    let i, ilen;\n    for(i = 0, ilen = ticks.length; i < ilen; i++){\n        if (ticks[i].major) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n function skipMajors(ticks, newTicks, majorIndices, spacing) {\n    let count = 0;\n    let next = majorIndices[0];\n    let i;\n    spacing = Math.ceil(spacing);\n    for(i = 0; i < ticks.length; i++){\n        if (i === next) {\n            newTicks.push(ticks[i]);\n            count++;\n            next = majorIndices[count * spacing];\n        }\n    }\n}\n function skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n    const start = valueOrDefault(majorStart, 0);\n    const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n    let count = 0;\n    let length, i, next;\n    spacing = Math.ceil(spacing);\n    if (majorEnd) {\n        length = majorEnd - majorStart;\n        spacing = length / Math.floor(length / spacing);\n    }\n    next = start;\n    while(next < 0){\n        count++;\n        next = Math.round(start + count * spacing);\n    }\n    for(i = Math.max(start, 0); i < end; i++){\n        if (i === next) {\n            newTicks.push(ticks[i]);\n            count++;\n            next = Math.round(start + count * spacing);\n        }\n    }\n}\n function getEvenSpacing(arr) {\n    const len = arr.length;\n    let i, diff;\n    if (len < 2) {\n        return false;\n    }\n    for(diff = arr[0], i = 1; i < len; ++i){\n        if (arr[i] - arr[i - 1] !== diff) {\n            return false;\n        }\n    }\n    return diff;\n}\n\nconst reverseAlign = (align)=>align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset)=>edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nconst getTicksLimit = (ticksLength, maxTicksLimit)=>Math.min(maxTicksLimit || ticksLength, ticksLength);\n function sample(arr, numItems) {\n    const result = [];\n    const increment = arr.length / numItems;\n    const len = arr.length;\n    let i = 0;\n    for(; i < len; i += increment){\n        result.push(arr[Math.floor(i)]);\n    }\n    return result;\n}\n function getPixelForGridLine(scale, index, offsetGridLines) {\n    const length = scale.ticks.length;\n    const validIndex = Math.min(index, length - 1);\n    const start = scale._startPixel;\n    const end = scale._endPixel;\n    const epsilon = 1e-6;\n    let lineValue = scale.getPixelForTick(validIndex);\n    let offset;\n    if (offsetGridLines) {\n        if (length === 1) {\n            offset = Math.max(lineValue - start, end - lineValue);\n        } else if (index === 0) {\n            offset = (scale.getPixelForTick(1) - lineValue) / 2;\n        } else {\n            offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n        }\n        lineValue += validIndex < index ? offset : -offset;\n        if (lineValue < start - epsilon || lineValue > end + epsilon) {\n            return;\n        }\n    }\n    return lineValue;\n}\n function garbageCollect(caches, length) {\n    each(caches, (cache)=>{\n        const gc = cache.gc;\n        const gcLen = gc.length / 2;\n        let i;\n        if (gcLen > length) {\n            for(i = 0; i < gcLen; ++i){\n                delete cache.data[gc[i]];\n            }\n            gc.splice(0, gcLen);\n        }\n    });\n}\n function getTickMarkLength(options) {\n    return options.drawTicks ? options.tickLength : 0;\n}\n function getTitleHeight(options, fallback) {\n    if (!options.display) {\n        return 0;\n    }\n    const font = toFont(options.font, fallback);\n    const padding = toPadding(options.padding);\n    const lines = isArray(options.text) ? options.text.length : 1;\n    return lines * font.lineHeight + padding.height;\n}\nfunction createScaleContext(parent, scale) {\n    return createContext(parent, {\n        scale,\n        type: 'scale'\n    });\n}\nfunction createTickContext(parent, index, tick) {\n    return createContext(parent, {\n        tick,\n        index,\n        type: 'tick'\n    });\n}\nfunction titleAlign(align, position, reverse) {\n     let ret = _toLeftRightCenter(align);\n    if (reverse && position !== 'right' || !reverse && position === 'right') {\n        ret = reverseAlign(ret);\n    }\n    return ret;\n}\nfunction titleArgs(scale, offset, position, align) {\n    const { top , left , bottom , right , chart  } = scale;\n    const { chartArea , scales  } = chart;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n    const height = bottom - top;\n    const width = right - left;\n    if (scale.isHorizontal()) {\n        titleX = _alignStartEnd(align, left, right);\n        if (isObject(position)) {\n            const positionAxisID = Object.keys(position)[0];\n            const value = position[positionAxisID];\n            titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n        } else if (position === 'center') {\n            titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n        } else {\n            titleY = offsetFromEdge(scale, position, offset);\n        }\n        maxWidth = right - left;\n    } else {\n        if (isObject(position)) {\n            const positionAxisID = Object.keys(position)[0];\n            const value = position[positionAxisID];\n            titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n        } else if (position === 'center') {\n            titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n        } else {\n            titleX = offsetFromEdge(scale, position, offset);\n        }\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = position === 'left' ? -HALF_PI : HALF_PI;\n    }\n    return {\n        titleX,\n        titleY,\n        maxWidth,\n        rotation\n    };\n}\nclass Scale extends Element {\n    constructor(cfg){\n        super();\n         this.id = cfg.id;\n         this.type = cfg.type;\n         this.options = undefined;\n         this.ctx = cfg.ctx;\n         this.chart = cfg.chart;\n         this.top = undefined;\n         this.bottom = undefined;\n         this.left = undefined;\n         this.right = undefined;\n         this.width = undefined;\n         this.height = undefined;\n        this._margins = {\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        };\n         this.maxWidth = undefined;\n         this.maxHeight = undefined;\n         this.paddingTop = undefined;\n         this.paddingBottom = undefined;\n         this.paddingLeft = undefined;\n         this.paddingRight = undefined;\n         this.axis = undefined;\n         this.labelRotation = undefined;\n        this.min = undefined;\n        this.max = undefined;\n        this._range = undefined;\n         this.ticks = [];\n         this._gridLineItems = null;\n         this._labelItems = null;\n         this._labelSizes = null;\n        this._length = 0;\n        this._maxLength = 0;\n        this._longestTextCache = {};\n         this._startPixel = undefined;\n         this._endPixel = undefined;\n        this._reversePixels = false;\n        this._userMax = undefined;\n        this._userMin = undefined;\n        this._suggestedMax = undefined;\n        this._suggestedMin = undefined;\n        this._ticksLength = 0;\n        this._borderValue = 0;\n        this._cache = {};\n        this._dataLimitsCached = false;\n        this.$context = undefined;\n    }\n init(options) {\n        this.options = options.setContext(this.getContext());\n        this.axis = options.axis;\n        this._userMin = this.parse(options.min);\n        this._userMax = this.parse(options.max);\n        this._suggestedMin = this.parse(options.suggestedMin);\n        this._suggestedMax = this.parse(options.suggestedMax);\n    }\n parse(raw, index) {\n        return raw;\n    }\n getUserBounds() {\n        let { _userMin , _userMax , _suggestedMin , _suggestedMax  } = this;\n        _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n        _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n        _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n        _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n        return {\n            min: finiteOrDefault(_userMin, _suggestedMin),\n            max: finiteOrDefault(_userMax, _suggestedMax),\n            minDefined: isNumberFinite(_userMin),\n            maxDefined: isNumberFinite(_userMax)\n        };\n    }\n getMinMax(canStack) {\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n        let range;\n        if (minDefined && maxDefined) {\n            return {\n                min,\n                max\n            };\n        }\n        const metas = this.getMatchingVisibleMetas();\n        for(let i = 0, ilen = metas.length; i < ilen; ++i){\n            range = metas[i].controller.getMinMax(this, canStack);\n            if (!minDefined) {\n                min = Math.min(min, range.min);\n            }\n            if (!maxDefined) {\n                max = Math.max(max, range.max);\n            }\n        }\n        min = maxDefined && min > max ? max : min;\n        max = minDefined && min > max ? min : max;\n        return {\n            min: finiteOrDefault(min, finiteOrDefault(max, min)),\n            max: finiteOrDefault(max, finiteOrDefault(min, max))\n        };\n    }\n getPadding() {\n        return {\n            left: this.paddingLeft || 0,\n            top: this.paddingTop || 0,\n            right: this.paddingRight || 0,\n            bottom: this.paddingBottom || 0\n        };\n    }\n getTicks() {\n        return this.ticks;\n    }\n getLabels() {\n        const data = this.chart.data;\n        return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n    }\n getLabelItems(chartArea = this.chart.chartArea) {\n        const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n        return items;\n    }\n    beforeLayout() {\n        this._cache = {};\n        this._dataLimitsCached = false;\n    }\n    beforeUpdate() {\n        callback(this.options.beforeUpdate, [\n            this\n        ]);\n    }\n update(maxWidth, maxHeight, margins) {\n        const { beginAtZero , grace , ticks: tickOpts  } = this.options;\n        const sampleSize = tickOpts.sampleSize;\n        this.beforeUpdate();\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins = Object.assign({\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        }, margins);\n        this.ticks = null;\n        this._labelSizes = null;\n        this._gridLineItems = null;\n        this._labelItems = null;\n        this.beforeSetDimensions();\n        this.setDimensions();\n        this.afterSetDimensions();\n        this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;\n        if (!this._dataLimitsCached) {\n            this.beforeDataLimits();\n            this.determineDataLimits();\n            this.afterDataLimits();\n            this._range = _addGrace(this, grace, beginAtZero);\n            this._dataLimitsCached = true;\n        }\n        this.beforeBuildTicks();\n        this.ticks = this.buildTicks() || [];\n        this.afterBuildTicks();\n        const samplingEnabled = sampleSize < this.ticks.length;\n        this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n        this.configure();\n        this.beforeCalculateLabelRotation();\n        this.calculateLabelRotation();\n        this.afterCalculateLabelRotation();\n        if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n            this.ticks = autoSkip(this, this.ticks);\n            this._labelSizes = null;\n            this.afterAutoSkip();\n        }\n        if (samplingEnabled) {\n            this._convertTicksToLabels(this.ticks);\n        }\n        this.beforeFit();\n        this.fit();\n        this.afterFit();\n        this.afterUpdate();\n    }\n configure() {\n        let reversePixels = this.options.reverse;\n        let startPixel, endPixel;\n        if (this.isHorizontal()) {\n            startPixel = this.left;\n            endPixel = this.right;\n        } else {\n            startPixel = this.top;\n            endPixel = this.bottom;\n            reversePixels = !reversePixels;\n        }\n        this._startPixel = startPixel;\n        this._endPixel = endPixel;\n        this._reversePixels = reversePixels;\n        this._length = endPixel - startPixel;\n        this._alignToPixels = this.options.alignToPixels;\n    }\n    afterUpdate() {\n        callback(this.options.afterUpdate, [\n            this\n        ]);\n    }\n    beforeSetDimensions() {\n        callback(this.options.beforeSetDimensions, [\n            this\n        ]);\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = 0;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = 0;\n            this.bottom = this.height;\n        }\n        this.paddingLeft = 0;\n        this.paddingTop = 0;\n        this.paddingRight = 0;\n        this.paddingBottom = 0;\n    }\n    afterSetDimensions() {\n        callback(this.options.afterSetDimensions, [\n            this\n        ]);\n    }\n    _callHooks(name) {\n        this.chart.notifyPlugins(name, this.getContext());\n        callback(this.options[name], [\n            this\n        ]);\n    }\n    beforeDataLimits() {\n        this._callHooks('beforeDataLimits');\n    }\n    determineDataLimits() {}\n    afterDataLimits() {\n        this._callHooks('afterDataLimits');\n    }\n    beforeBuildTicks() {\n        this._callHooks('beforeBuildTicks');\n    }\n buildTicks() {\n        return [];\n    }\n    afterBuildTicks() {\n        this._callHooks('afterBuildTicks');\n    }\n    beforeTickToLabelConversion() {\n        callback(this.options.beforeTickToLabelConversion, [\n            this\n        ]);\n    }\n generateTickLabels(ticks) {\n        const tickOpts = this.options.ticks;\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\n            tick = ticks[i];\n            tick.label = callback(tickOpts.callback, [\n                tick.value,\n                i,\n                ticks\n            ], this);\n        }\n    }\n    afterTickToLabelConversion() {\n        callback(this.options.afterTickToLabelConversion, [\n            this\n        ]);\n    }\n    beforeCalculateLabelRotation() {\n        callback(this.options.beforeCalculateLabelRotation, [\n            this\n        ]);\n    }\n    calculateLabelRotation() {\n        const options = this.options;\n        const tickOpts = options.ticks;\n        const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n        const minRotation = tickOpts.minRotation || 0;\n        const maxRotation = tickOpts.maxRotation;\n        let labelRotation = minRotation;\n        let tickWidth, maxHeight, maxLabelDiagonal;\n        if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n            this.labelRotation = minRotation;\n            return;\n        }\n        const labelSizes = this._getLabelSizes();\n        const maxLabelWidth = labelSizes.widest.width;\n        const maxLabelHeight = labelSizes.highest.height;\n        const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n        tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n        if (maxLabelWidth + 6 > tickWidth) {\n            tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n            maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n            maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n            labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));\n            labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n        }\n        this.labelRotation = labelRotation;\n    }\n    afterCalculateLabelRotation() {\n        callback(this.options.afterCalculateLabelRotation, [\n            this\n        ]);\n    }\n    afterAutoSkip() {}\n    beforeFit() {\n        callback(this.options.beforeFit, [\n            this\n        ]);\n    }\n    fit() {\n        const minSize = {\n            width: 0,\n            height: 0\n        };\n        const { chart , options: { ticks: tickOpts , title: titleOpts , grid: gridOpts  }  } = this;\n        const display = this._isVisible();\n        const isHorizontal = this.isHorizontal();\n        if (display) {\n            const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n            if (isHorizontal) {\n                minSize.width = this.maxWidth;\n                minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n            } else {\n                minSize.height = this.maxHeight;\n                minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n            }\n            if (tickOpts.display && this.ticks.length) {\n                const { first , last , widest , highest  } = this._getLabelSizes();\n                const tickPadding = tickOpts.padding * 2;\n                const angleRadians = toRadians(this.labelRotation);\n                const cos = Math.cos(angleRadians);\n                const sin = Math.sin(angleRadians);\n                if (isHorizontal) {\n                    const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n                    minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n                } else {\n                    const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n                    minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n                }\n                this._calculatePadding(first, last, sin, cos);\n            }\n        }\n        this._handleMargins();\n        if (isHorizontal) {\n            this.width = this._length = chart.width - this._margins.left - this._margins.right;\n            this.height = minSize.height;\n        } else {\n            this.width = minSize.width;\n            this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n        }\n    }\n    _calculatePadding(first, last, sin, cos) {\n        const { ticks: { align , padding  } , position  } = this.options;\n        const isRotated = this.labelRotation !== 0;\n        const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n        if (this.isHorizontal()) {\n            const offsetLeft = this.getPixelForTick(0) - this.left;\n            const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n            let paddingLeft = 0;\n            let paddingRight = 0;\n            if (isRotated) {\n                if (labelsBelowTicks) {\n                    paddingLeft = cos * first.width;\n                    paddingRight = sin * last.height;\n                } else {\n                    paddingLeft = sin * first.height;\n                    paddingRight = cos * last.width;\n                }\n            } else if (align === 'start') {\n                paddingRight = last.width;\n            } else if (align === 'end') {\n                paddingLeft = first.width;\n            } else if (align !== 'inner') {\n                paddingLeft = first.width / 2;\n                paddingRight = last.width / 2;\n            }\n            this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n            this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n        } else {\n            let paddingTop = last.height / 2;\n            let paddingBottom = first.height / 2;\n            if (align === 'start') {\n                paddingTop = 0;\n                paddingBottom = first.height;\n            } else if (align === 'end') {\n                paddingTop = last.height;\n                paddingBottom = 0;\n            }\n            this.paddingTop = paddingTop + padding;\n            this.paddingBottom = paddingBottom + padding;\n        }\n    }\n _handleMargins() {\n        if (this._margins) {\n            this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n            this._margins.top = Math.max(this.paddingTop, this._margins.top);\n            this._margins.right = Math.max(this.paddingRight, this._margins.right);\n            this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n        }\n    }\n    afterFit() {\n        callback(this.options.afterFit, [\n            this\n        ]);\n    }\n isHorizontal() {\n        const { axis , position  } = this.options;\n        return position === 'top' || position === 'bottom' || axis === 'x';\n    }\n isFullSize() {\n        return this.options.fullSize;\n    }\n _convertTicksToLabels(ticks) {\n        this.beforeTickToLabelConversion();\n        this.generateTickLabels(ticks);\n        let i, ilen;\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\n            if (isNullOrUndef(ticks[i].label)) {\n                ticks.splice(i, 1);\n                ilen--;\n                i--;\n            }\n        }\n        this.afterTickToLabelConversion();\n    }\n _getLabelSizes() {\n        let labelSizes = this._labelSizes;\n        if (!labelSizes) {\n            const sampleSize = this.options.ticks.sampleSize;\n            let ticks = this.ticks;\n            if (sampleSize < ticks.length) {\n                ticks = sample(ticks, sampleSize);\n            }\n            this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n        }\n        return labelSizes;\n    }\n _computeLabelSizes(ticks, length, maxTicksLimit) {\n        const { ctx , _longestTextCache: caches  } = this;\n        const widths = [];\n        const heights = [];\n        const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n        let widestLabelSize = 0;\n        let highestLabelSize = 0;\n        let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n        for(i = 0; i < length; i += increment){\n            label = ticks[i].label;\n            tickFont = this._resolveTickFontOptions(i);\n            ctx.font = fontString = tickFont.string;\n            cache = caches[fontString] = caches[fontString] || {\n                data: {},\n                gc: []\n            };\n            lineHeight = tickFont.lineHeight;\n            width = height = 0;\n            if (!isNullOrUndef(label) && !isArray(label)) {\n                width = _measureText(ctx, cache.data, cache.gc, width, label);\n                height = lineHeight;\n            } else if (isArray(label)) {\n                for(j = 0, jlen = label.length; j < jlen; ++j){\n                    nestedLabel =  label[j];\n                    if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n                        width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n                        height += lineHeight;\n                    }\n                }\n            }\n            widths.push(width);\n            heights.push(height);\n            widestLabelSize = Math.max(width, widestLabelSize);\n            highestLabelSize = Math.max(height, highestLabelSize);\n        }\n        garbageCollect(caches, length);\n        const widest = widths.indexOf(widestLabelSize);\n        const highest = heights.indexOf(highestLabelSize);\n        const valueAt = (idx)=>({\n                width: widths[idx] || 0,\n                height: heights[idx] || 0\n            });\n        return {\n            first: valueAt(0),\n            last: valueAt(length - 1),\n            widest: valueAt(widest),\n            highest: valueAt(highest),\n            widths,\n            heights\n        };\n    }\n getLabelForValue(value) {\n        return value;\n    }\n getPixelForValue(value, index) {\n        return NaN;\n    }\n getValueForPixel(pixel) {}\n getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) {\n            return null;\n        }\n        return this.getPixelForValue(ticks[index].value);\n    }\n getPixelForDecimal(decimal) {\n        if (this._reversePixels) {\n            decimal = 1 - decimal;\n        }\n        const pixel = this._startPixel + decimal * this._length;\n        return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n    }\n getDecimalForPixel(pixel) {\n        const decimal = (pixel - this._startPixel) / this._length;\n        return this._reversePixels ? 1 - decimal : decimal;\n    }\n getBasePixel() {\n        return this.getPixelForValue(this.getBaseValue());\n    }\n getBaseValue() {\n        const { min , max  } = this;\n        return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n    }\n getContext(index) {\n        const ticks = this.ticks || [];\n        if (index >= 0 && index < ticks.length) {\n            const tick = ticks[index];\n            return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));\n        }\n        return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));\n    }\n _tickSize() {\n        const optionTicks = this.options.ticks;\n        const rot = toRadians(this.labelRotation);\n        const cos = Math.abs(Math.cos(rot));\n        const sin = Math.abs(Math.sin(rot));\n        const labelSizes = this._getLabelSizes();\n        const padding = optionTicks.autoSkipPadding || 0;\n        const w = labelSizes ? labelSizes.widest.width + padding : 0;\n        const h = labelSizes ? labelSizes.highest.height + padding : 0;\n        return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n    }\n _isVisible() {\n        const display = this.options.display;\n        if (display !== 'auto') {\n            return !!display;\n        }\n        return this.getMatchingVisibleMetas().length > 0;\n    }\n _computeGridLineItems(chartArea) {\n        const axis = this.axis;\n        const chart = this.chart;\n        const options = this.options;\n        const { grid , position , border  } = options;\n        const offset = grid.offset;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const ticksLength = ticks.length + (offset ? 1 : 0);\n        const tl = getTickMarkLength(grid);\n        const items = [];\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = borderOpts.display ? borderOpts.width : 0;\n        const axisHalfWidth = axisWidth / 2;\n        const alignBorderValue = function(pixel) {\n            return _alignPixel(chart, pixel, axisWidth);\n        };\n        let borderValue, i, lineValue, alignedLineValue;\n        let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n        if (position === 'top') {\n            borderValue = alignBorderValue(this.bottom);\n            ty1 = this.bottom - tl;\n            ty2 = borderValue - axisHalfWidth;\n            y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n            y2 = chartArea.bottom;\n        } else if (position === 'bottom') {\n            borderValue = alignBorderValue(this.top);\n            y1 = chartArea.top;\n            y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = this.top + tl;\n        } else if (position === 'left') {\n            borderValue = alignBorderValue(this.right);\n            tx1 = this.right - tl;\n            tx2 = borderValue - axisHalfWidth;\n            x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n            x2 = chartArea.right;\n        } else if (position === 'right') {\n            borderValue = alignBorderValue(this.left);\n            x1 = chartArea.left;\n            x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n            tx1 = borderValue + axisHalfWidth;\n            tx2 = this.left + tl;\n        } else if (axis === 'x') {\n            if (position === 'center') {\n                borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n            }\n            y1 = chartArea.top;\n            y2 = chartArea.bottom;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = ty1 + tl;\n        } else if (axis === 'y') {\n            if (position === 'center') {\n                borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n            }\n            tx1 = borderValue - axisHalfWidth;\n            tx2 = tx1 - tl;\n            x1 = chartArea.left;\n            x2 = chartArea.right;\n        }\n        const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n        const step = Math.max(1, Math.ceil(ticksLength / limit));\n        for(i = 0; i < ticksLength; i += step){\n            const context = this.getContext(i);\n            const optsAtIndex = grid.setContext(context);\n            const optsAtIndexBorder = border.setContext(context);\n            const lineWidth = optsAtIndex.lineWidth;\n            const lineColor = optsAtIndex.color;\n            const borderDash = optsAtIndexBorder.dash || [];\n            const borderDashOffset = optsAtIndexBorder.dashOffset;\n            const tickWidth = optsAtIndex.tickWidth;\n            const tickColor = optsAtIndex.tickColor;\n            const tickBorderDash = optsAtIndex.tickBorderDash || [];\n            const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n            lineValue = getPixelForGridLine(this, i, offset);\n            if (lineValue === undefined) {\n                continue;\n            }\n            alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n            if (isHorizontal) {\n                tx1 = tx2 = x1 = x2 = alignedLineValue;\n            } else {\n                ty1 = ty2 = y1 = y2 = alignedLineValue;\n            }\n            items.push({\n                tx1,\n                ty1,\n                tx2,\n                ty2,\n                x1,\n                y1,\n                x2,\n                y2,\n                width: lineWidth,\n                color: lineColor,\n                borderDash,\n                borderDashOffset,\n                tickWidth,\n                tickColor,\n                tickBorderDash,\n                tickBorderDashOffset\n            });\n        }\n        this._ticksLength = ticksLength;\n        this._borderValue = borderValue;\n        return items;\n    }\n _computeLabelItems(chartArea) {\n        const axis = this.axis;\n        const options = this.options;\n        const { position , ticks: optionTicks  } = options;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const { align , crossAlign , padding , mirror  } = optionTicks;\n        const tl = getTickMarkLength(options.grid);\n        const tickAndPadding = tl + padding;\n        const hTickAndPadding = mirror ? -padding : tickAndPadding;\n        const rotation = -toRadians(this.labelRotation);\n        const items = [];\n        let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n        let textBaseline = 'middle';\n        if (position === 'top') {\n            y = this.bottom - hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === 'bottom') {\n            y = this.top + hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === 'left') {\n            const ret = this._getYAxisLabelAlignment(tl);\n            textAlign = ret.textAlign;\n            x = ret.x;\n        } else if (position === 'right') {\n            const ret = this._getYAxisLabelAlignment(tl);\n            textAlign = ret.textAlign;\n            x = ret.x;\n        } else if (axis === 'x') {\n            if (position === 'center') {\n                y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n            }\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (axis === 'y') {\n            if (position === 'center') {\n                x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                x = this.chart.scales[positionAxisID].getPixelForValue(value);\n            }\n            textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n        }\n        if (axis === 'y') {\n            if (align === 'start') {\n                textBaseline = 'top';\n            } else if (align === 'end') {\n                textBaseline = 'bottom';\n            }\n        }\n        const labelSizes = this._getLabelSizes();\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            label = tick.label;\n            const optsAtIndex = optionTicks.setContext(this.getContext(i));\n            pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n            font = this._resolveTickFontOptions(i);\n            lineHeight = font.lineHeight;\n            lineCount = isArray(label) ? label.length : 1;\n            const halfCount = lineCount / 2;\n            const color = optsAtIndex.color;\n            const strokeColor = optsAtIndex.textStrokeColor;\n            const strokeWidth = optsAtIndex.textStrokeWidth;\n            let tickTextAlign = textAlign;\n            if (isHorizontal) {\n                x = pixel;\n                if (textAlign === 'inner') {\n                    if (i === ilen - 1) {\n                        tickTextAlign = !this.options.reverse ? 'right' : 'left';\n                    } else if (i === 0) {\n                        tickTextAlign = !this.options.reverse ? 'left' : 'right';\n                    } else {\n                        tickTextAlign = 'center';\n                    }\n                }\n                if (position === 'top') {\n                    if (crossAlign === 'near' || rotation !== 0) {\n                        textOffset = -lineCount * lineHeight + lineHeight / 2;\n                    } else if (crossAlign === 'center') {\n                        textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n                    } else {\n                        textOffset = -labelSizes.highest.height + lineHeight / 2;\n                    }\n                } else {\n                    if (crossAlign === 'near' || rotation !== 0) {\n                        textOffset = lineHeight / 2;\n                    } else if (crossAlign === 'center') {\n                        textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n                    } else {\n                        textOffset = labelSizes.highest.height - lineCount * lineHeight;\n                    }\n                }\n                if (mirror) {\n                    textOffset *= -1;\n                }\n                if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n                    x += lineHeight / 2 * Math.sin(rotation);\n                }\n            } else {\n                y = pixel;\n                textOffset = (1 - lineCount) * lineHeight / 2;\n            }\n            let backdrop;\n            if (optsAtIndex.showLabelBackdrop) {\n                const labelPadding = toPadding(optsAtIndex.backdropPadding);\n                const height = labelSizes.heights[i];\n                const width = labelSizes.widths[i];\n                let top = textOffset - labelPadding.top;\n                let left = 0 - labelPadding.left;\n                switch(textBaseline){\n                    case 'middle':\n                        top -= height / 2;\n                        break;\n                    case 'bottom':\n                        top -= height;\n                        break;\n                }\n                switch(textAlign){\n                    case 'center':\n                        left -= width / 2;\n                        break;\n                    case 'right':\n                        left -= width;\n                        break;\n                    case 'inner':\n                        if (i === ilen - 1) {\n                            left -= width;\n                        } else if (i > 0) {\n                            left -= width / 2;\n                        }\n                        break;\n                }\n                backdrop = {\n                    left,\n                    top,\n                    width: width + labelPadding.width,\n                    height: height + labelPadding.height,\n                    color: optsAtIndex.backdropColor\n                };\n            }\n            items.push({\n                label,\n                font,\n                textOffset,\n                options: {\n                    rotation,\n                    color,\n                    strokeColor,\n                    strokeWidth,\n                    textAlign: tickTextAlign,\n                    textBaseline,\n                    translation: [\n                        x,\n                        y\n                    ],\n                    backdrop\n                }\n            });\n        }\n        return items;\n    }\n    _getXAxisLabelAlignment() {\n        const { position , ticks  } = this.options;\n        const rotation = -toRadians(this.labelRotation);\n        if (rotation) {\n            return position === 'top' ? 'left' : 'right';\n        }\n        let align = 'center';\n        if (ticks.align === 'start') {\n            align = 'left';\n        } else if (ticks.align === 'end') {\n            align = 'right';\n        } else if (ticks.align === 'inner') {\n            align = 'inner';\n        }\n        return align;\n    }\n    _getYAxisLabelAlignment(tl) {\n        const { position , ticks: { crossAlign , mirror , padding  }  } = this.options;\n        const labelSizes = this._getLabelSizes();\n        const tickAndPadding = tl + padding;\n        const widest = labelSizes.widest.width;\n        let textAlign;\n        let x;\n        if (position === 'left') {\n            if (mirror) {\n                x = this.right + padding;\n                if (crossAlign === 'near') {\n                    textAlign = 'left';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x += widest / 2;\n                } else {\n                    textAlign = 'right';\n                    x += widest;\n                }\n            } else {\n                x = this.right - tickAndPadding;\n                if (crossAlign === 'near') {\n                    textAlign = 'right';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x -= widest / 2;\n                } else {\n                    textAlign = 'left';\n                    x = this.left;\n                }\n            }\n        } else if (position === 'right') {\n            if (mirror) {\n                x = this.left + padding;\n                if (crossAlign === 'near') {\n                    textAlign = 'right';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x -= widest / 2;\n                } else {\n                    textAlign = 'left';\n                    x -= widest;\n                }\n            } else {\n                x = this.left + tickAndPadding;\n                if (crossAlign === 'near') {\n                    textAlign = 'left';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x += widest / 2;\n                } else {\n                    textAlign = 'right';\n                    x = this.right;\n                }\n            }\n        } else {\n            textAlign = 'right';\n        }\n        return {\n            textAlign,\n            x\n        };\n    }\n _computeLabelArea() {\n        if (this.options.ticks.mirror) {\n            return;\n        }\n        const chart = this.chart;\n        const position = this.options.position;\n        if (position === 'left' || position === 'right') {\n            return {\n                top: 0,\n                left: this.left,\n                bottom: chart.height,\n                right: this.right\n            };\n        }\n        if (position === 'top' || position === 'bottom') {\n            return {\n                top: this.top,\n                left: 0,\n                bottom: this.bottom,\n                right: chart.width\n            };\n        }\n    }\n drawBackground() {\n        const { ctx , options: { backgroundColor  } , left , top , width , height  } = this;\n        if (backgroundColor) {\n            ctx.save();\n            ctx.fillStyle = backgroundColor;\n            ctx.fillRect(left, top, width, height);\n            ctx.restore();\n        }\n    }\n    getLineWidthForValue(value) {\n        const grid = this.options.grid;\n        if (!this._isVisible() || !grid.display) {\n            return 0;\n        }\n        const ticks = this.ticks;\n        const index = ticks.findIndex((t)=>t.value === value);\n        if (index >= 0) {\n            const opts = grid.setContext(this.getContext(index));\n            return opts.lineWidth;\n        }\n        return 0;\n    }\n drawGrid(chartArea) {\n        const grid = this.options.grid;\n        const ctx = this.ctx;\n        const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n        let i, ilen;\n        const drawLine = (p1, p2, style)=>{\n            if (!style.width || !style.color) {\n                return;\n            }\n            ctx.save();\n            ctx.lineWidth = style.width;\n            ctx.strokeStyle = style.color;\n            ctx.setLineDash(style.borderDash || []);\n            ctx.lineDashOffset = style.borderDashOffset;\n            ctx.beginPath();\n            ctx.moveTo(p1.x, p1.y);\n            ctx.lineTo(p2.x, p2.y);\n            ctx.stroke();\n            ctx.restore();\n        };\n        if (grid.display) {\n            for(i = 0, ilen = items.length; i < ilen; ++i){\n                const item = items[i];\n                if (grid.drawOnChartArea) {\n                    drawLine({\n                        x: item.x1,\n                        y: item.y1\n                    }, {\n                        x: item.x2,\n                        y: item.y2\n                    }, item);\n                }\n                if (grid.drawTicks) {\n                    drawLine({\n                        x: item.tx1,\n                        y: item.ty1\n                    }, {\n                        x: item.tx2,\n                        y: item.ty2\n                    }, {\n                        color: item.tickColor,\n                        width: item.tickWidth,\n                        borderDash: item.tickBorderDash,\n                        borderDashOffset: item.tickBorderDashOffset\n                    });\n                }\n            }\n        }\n    }\n drawBorder() {\n        const { chart , ctx , options: { border , grid  }  } = this;\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = border.display ? borderOpts.width : 0;\n        if (!axisWidth) {\n            return;\n        }\n        const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n        const borderValue = this._borderValue;\n        let x1, x2, y1, y2;\n        if (this.isHorizontal()) {\n            x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n            x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n            y1 = y2 = borderValue;\n        } else {\n            y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n            y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n            x1 = x2 = borderValue;\n        }\n        ctx.save();\n        ctx.lineWidth = borderOpts.width;\n        ctx.strokeStyle = borderOpts.color;\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n        ctx.stroke();\n        ctx.restore();\n    }\n drawLabels(chartArea) {\n        const optionTicks = this.options.ticks;\n        if (!optionTicks.display) {\n            return;\n        }\n        const ctx = this.ctx;\n        const area = this._computeLabelArea();\n        if (area) {\n            clipArea(ctx, area);\n        }\n        const items = this.getLabelItems(chartArea);\n        for (const item of items){\n            const renderTextOptions = item.options;\n            const tickFont = item.font;\n            const label = item.label;\n            const y = item.textOffset;\n            renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n        }\n        if (area) {\n            unclipArea(ctx);\n        }\n    }\n drawTitle() {\n        const { ctx , options: { position , title , reverse  }  } = this;\n        if (!title.display) {\n            return;\n        }\n        const font = toFont(title.font);\n        const padding = toPadding(title.padding);\n        const align = title.align;\n        let offset = font.lineHeight / 2;\n        if (position === 'bottom' || position === 'center' || isObject(position)) {\n            offset += padding.bottom;\n            if (isArray(title.text)) {\n                offset += font.lineHeight * (title.text.length - 1);\n            }\n        } else {\n            offset += padding.top;\n        }\n        const { titleX , titleY , maxWidth , rotation  } = titleArgs(this, offset, position, align);\n        renderText(ctx, title.text, 0, 0, font, {\n            color: title.color,\n            maxWidth,\n            rotation,\n            textAlign: titleAlign(align, position, reverse),\n            textBaseline: 'middle',\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n    draw(chartArea) {\n        if (!this._isVisible()) {\n            return;\n        }\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawBorder();\n        this.drawTitle();\n        this.drawLabels(chartArea);\n    }\n _layers() {\n        const opts = this.options;\n        const tz = opts.ticks && opts.ticks.z || 0;\n        const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n        const bz = valueOrDefault(opts.border && opts.border.z, 0);\n        if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n            return [\n                {\n                    z: tz,\n                    draw: (chartArea)=>{\n                        this.draw(chartArea);\n                    }\n                }\n            ];\n        }\n        return [\n            {\n                z: gz,\n                draw: (chartArea)=>{\n                    this.drawBackground();\n                    this.drawGrid(chartArea);\n                    this.drawTitle();\n                }\n            },\n            {\n                z: bz,\n                draw: ()=>{\n                    this.drawBorder();\n                }\n            },\n            {\n                z: tz,\n                draw: (chartArea)=>{\n                    this.drawLabels(chartArea);\n                }\n            }\n        ];\n    }\n getMatchingVisibleMetas(type) {\n        const metas = this.chart.getSortedVisibleDatasetMetas();\n        const axisID = this.axis + 'AxisID';\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\n            const meta = metas[i];\n            if (meta[axisID] === this.id && (!type || meta.type === type)) {\n                result.push(meta);\n            }\n        }\n        return result;\n    }\n _resolveTickFontOptions(index) {\n        const opts = this.options.ticks.setContext(this.getContext(index));\n        return toFont(opts.font);\n    }\n _maxDigits() {\n        const fontSize = this._resolveTickFontOptions(0).lineHeight;\n        return (this.isHorizontal() ? this.width : this.height) / fontSize;\n    }\n}\n\nclass TypedRegistry {\n    constructor(type, scope, override){\n        this.type = type;\n        this.scope = scope;\n        this.override = override;\n        this.items = Object.create(null);\n    }\n    isForType(type) {\n        return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n    }\n register(item) {\n        const proto = Object.getPrototypeOf(item);\n        let parentScope;\n        if (isIChartComponent(proto)) {\n            parentScope = this.register(proto);\n        }\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope + '.' + id;\n        if (!id) {\n            throw new Error('class does not have id: ' + item);\n        }\n        if (id in items) {\n            return scope;\n        }\n        items[id] = item;\n        registerDefaults(item, scope, parentScope);\n        if (this.override) {\n            defaults.override(item.id, item.overrides);\n        }\n        return scope;\n    }\n get(id) {\n        return this.items[id];\n    }\n unregister(item) {\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope;\n        if (id in items) {\n            delete items[id];\n        }\n        if (scope && id in defaults[scope]) {\n            delete defaults[scope][id];\n            if (this.override) {\n                delete overrides[id];\n            }\n        }\n    }\n}\nfunction registerDefaults(item, scope, parentScope) {\n    const itemDefaults = merge(Object.create(null), [\n        parentScope ? defaults.get(parentScope) : {},\n        defaults.get(scope),\n        item.defaults\n    ]);\n    defaults.set(scope, itemDefaults);\n    if (item.defaultRoutes) {\n        routeDefaults(scope, item.defaultRoutes);\n    }\n    if (item.descriptors) {\n        defaults.describe(scope, item.descriptors);\n    }\n}\nfunction routeDefaults(scope, routes) {\n    Object.keys(routes).forEach((property)=>{\n        const propertyParts = property.split('.');\n        const sourceName = propertyParts.pop();\n        const sourceScope = [\n            scope\n        ].concat(propertyParts).join('.');\n        const parts = routes[property].split('.');\n        const targetName = parts.pop();\n        const targetScope = parts.join('.');\n        defaults.route(sourceScope, sourceName, targetScope, targetName);\n    });\n}\nfunction isIChartComponent(proto) {\n    return 'id' in proto && 'defaults' in proto;\n}\n\nclass Registry {\n    constructor(){\n        this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n        this.elements = new TypedRegistry(Element, 'elements');\n        this.plugins = new TypedRegistry(Object, 'plugins');\n        this.scales = new TypedRegistry(Scale, 'scales');\n        this._typedRegistries = [\n            this.controllers,\n            this.scales,\n            this.elements\n        ];\n    }\n add(...args) {\n        this._each('register', args);\n    }\n    remove(...args) {\n        this._each('unregister', args);\n    }\n addControllers(...args) {\n        this._each('register', args, this.controllers);\n    }\n addElements(...args) {\n        this._each('register', args, this.elements);\n    }\n addPlugins(...args) {\n        this._each('register', args, this.plugins);\n    }\n addScales(...args) {\n        this._each('register', args, this.scales);\n    }\n getController(id) {\n        return this._get(id, this.controllers, 'controller');\n    }\n getElement(id) {\n        return this._get(id, this.elements, 'element');\n    }\n getPlugin(id) {\n        return this._get(id, this.plugins, 'plugin');\n    }\n getScale(id) {\n        return this._get(id, this.scales, 'scale');\n    }\n removeControllers(...args) {\n        this._each('unregister', args, this.controllers);\n    }\n removeElements(...args) {\n        this._each('unregister', args, this.elements);\n    }\n removePlugins(...args) {\n        this._each('unregister', args, this.plugins);\n    }\n removeScales(...args) {\n        this._each('unregister', args, this.scales);\n    }\n _each(method, args, typedRegistry) {\n        [\n            ...args\n        ].forEach((arg)=>{\n            const reg = typedRegistry || this._getRegistryForType(arg);\n            if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {\n                this._exec(method, reg, arg);\n            } else {\n                each(arg, (item)=>{\n                    const itemReg = typedRegistry || this._getRegistryForType(item);\n                    this._exec(method, itemReg, item);\n                });\n            }\n        });\n    }\n _exec(method, registry, component) {\n        const camelMethod = _capitalize(method);\n        callback(component['before' + camelMethod], [], component);\n        registry[method](component);\n        callback(component['after' + camelMethod], [], component);\n    }\n _getRegistryForType(type) {\n        for(let i = 0; i < this._typedRegistries.length; i++){\n            const reg = this._typedRegistries[i];\n            if (reg.isForType(type)) {\n                return reg;\n            }\n        }\n        return this.plugins;\n    }\n _get(id, typedRegistry, type) {\n        const item = typedRegistry.get(id);\n        if (item === undefined) {\n            throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n        }\n        return item;\n    }\n}\nvar registry = /* #__PURE__ */ new Registry();\n\nclass PluginService {\n    constructor(){\n        this._init = undefined;\n    }\n notify(chart, hook, args, filter) {\n        if (hook === 'beforeInit') {\n            this._init = this._createDescriptors(chart, true);\n            this._notify(this._init, chart, 'install');\n        }\n        if (this._init === undefined) {\n            return;\n        }\n        const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n        const result = this._notify(descriptors, chart, hook, args);\n        if (hook === 'afterDestroy') {\n            this._notify(descriptors, chart, 'stop');\n            this._notify(this._init, chart, 'uninstall');\n            this._init = undefined;\n        }\n        return result;\n    }\n _notify(descriptors, chart, hook, args) {\n        args = args || {};\n        for (const descriptor of descriptors){\n            const plugin = descriptor.plugin;\n            const method = plugin[hook];\n            const params = [\n                chart,\n                args,\n                descriptor.options\n            ];\n            if (callback(method, params, plugin) === false && args.cancelable) {\n                return false;\n            }\n        }\n        return true;\n    }\n    invalidate() {\n        if (!isNullOrUndef(this._cache)) {\n            this._oldCache = this._cache;\n            this._cache = undefined;\n        }\n    }\n _descriptors(chart) {\n        if (this._cache) {\n            return this._cache;\n        }\n        const descriptors = this._cache = this._createDescriptors(chart);\n        this._notifyStateChanges(chart);\n        return descriptors;\n    }\n    _createDescriptors(chart, all) {\n        const config = chart && chart.config;\n        const options = valueOrDefault(config.options && config.options.plugins, {});\n        const plugins = allPlugins(config);\n        return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n    }\n _notifyStateChanges(chart) {\n        const previousDescriptors = this._oldCache || [];\n        const descriptors = this._cache;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.plugin.id === y.plugin.id));\n        this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n        this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n    }\n}\n function allPlugins(config) {\n    const localIds = {};\n    const plugins = [];\n    const keys = Object.keys(registry.plugins.items);\n    for(let i = 0; i < keys.length; i++){\n        plugins.push(registry.getPlugin(keys[i]));\n    }\n    const local = config.plugins || [];\n    for(let i = 0; i < local.length; i++){\n        const plugin = local[i];\n        if (plugins.indexOf(plugin) === -1) {\n            plugins.push(plugin);\n            localIds[plugin.id] = true;\n        }\n    }\n    return {\n        plugins,\n        localIds\n    };\n}\nfunction getOpts(options, all) {\n    if (!all && options === false) {\n        return null;\n    }\n    if (options === true) {\n        return {};\n    }\n    return options;\n}\nfunction createDescriptors(chart, { plugins , localIds  }, options, all) {\n    const result = [];\n    const context = chart.getContext();\n    for (const plugin of plugins){\n        const id = plugin.id;\n        const opts = getOpts(options[id], all);\n        if (opts === null) {\n            continue;\n        }\n        result.push({\n            plugin,\n            options: pluginOpts(chart.config, {\n                plugin,\n                local: localIds[id]\n            }, opts, context)\n        });\n    }\n    return result;\n}\nfunction pluginOpts(config, { plugin , local  }, opts, context) {\n    const keys = config.pluginScopeKeys(plugin);\n    const scopes = config.getOptionScopes(opts, keys);\n    if (local && plugin.defaults) {\n        scopes.push(plugin.defaults);\n    }\n    return config.createResolver(scopes, context, [\n        ''\n    ], {\n        scriptable: false,\n        indexable: false,\n        allKeys: true\n    });\n}\n\nfunction getIndexAxis(type, options) {\n    const datasetDefaults = defaults.datasets[type] || {};\n    const datasetOptions = (options.datasets || {})[type] || {};\n    return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n    let axis = id;\n    if (id === '_index_') {\n        axis = indexAxis;\n    } else if (id === '_value_') {\n        axis = indexAxis === 'x' ? 'y' : 'x';\n    }\n    return axis;\n}\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n    return axis === indexAxis ? '_index_' : '_value_';\n}\nfunction idMatchesAxis(id) {\n    if (id === 'x' || id === 'y' || id === 'r') {\n        return id;\n    }\n}\nfunction axisFromPosition(position) {\n    if (position === 'top' || position === 'bottom') {\n        return 'x';\n    }\n    if (position === 'left' || position === 'right') {\n        return 'y';\n    }\n}\nfunction determineAxis(id, ...scaleOptions) {\n    if (idMatchesAxis(id)) {\n        return id;\n    }\n    for (const opts of scaleOptions){\n        const axis = opts.axis || axisFromPosition(opts.position) || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n        if (axis) {\n            return axis;\n        }\n    }\n    throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);\n}\nfunction getAxisFromDataset(id, axis, dataset) {\n    if (dataset[axis + 'AxisID'] === id) {\n        return {\n            axis\n        };\n    }\n}\nfunction retrieveAxisFromDatasets(id, config) {\n    if (config.data && config.data.datasets) {\n        const boundDs = config.data.datasets.filter((d)=>d.xAxisID === id || d.yAxisID === id);\n        if (boundDs.length) {\n            return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n        }\n    }\n    return {};\n}\nfunction mergeScaleConfig(config, options) {\n    const chartDefaults = overrides[config.type] || {\n        scales: {}\n    };\n    const configScales = options.scales || {};\n    const chartIndexAxis = getIndexAxis(config.type, options);\n    const scales = Object.create(null);\n    Object.keys(configScales).forEach((id)=>{\n        const scaleConf = configScales[id];\n        if (!isObject(scaleConf)) {\n            return console.error(`Invalid scale configuration for scale: ${id}`);\n        }\n        if (scaleConf._proxy) {\n            return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n        }\n        const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);\n        const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n        const defaultScaleOptions = chartDefaults.scales || {};\n        scales[id] = mergeIf(Object.create(null), [\n            {\n                axis\n            },\n            scaleConf,\n            defaultScaleOptions[axis],\n            defaultScaleOptions[defaultId]\n        ]);\n    });\n    config.data.datasets.forEach((dataset)=>{\n        const type = dataset.type || config.type;\n        const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n        const datasetDefaults = overrides[type] || {};\n        const defaultScaleOptions = datasetDefaults.scales || {};\n        Object.keys(defaultScaleOptions).forEach((defaultID)=>{\n            const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n            const id = dataset[axis + 'AxisID'] || axis;\n            scales[id] = scales[id] || Object.create(null);\n            mergeIf(scales[id], [\n                {\n                    axis\n                },\n                configScales[id],\n                defaultScaleOptions[defaultID]\n            ]);\n        });\n    });\n    Object.keys(scales).forEach((key)=>{\n        const scale = scales[key];\n        mergeIf(scale, [\n            defaults.scales[scale.type],\n            defaults.scale\n        ]);\n    });\n    return scales;\n}\nfunction initOptions(config) {\n    const options = config.options || (config.options = {});\n    options.plugins = valueOrDefault(options.plugins, {});\n    options.scales = mergeScaleConfig(config, options);\n}\nfunction initData(data) {\n    data = data || {};\n    data.datasets = data.datasets || [];\n    data.labels = data.labels || [];\n    return data;\n}\nfunction initConfig(config) {\n    config = config || {};\n    config.data = initData(config.data);\n    initOptions(config);\n    return config;\n}\nconst keyCache = new Map();\nconst keysCached = new Set();\nfunction cachedKeys(cacheKey, generate) {\n    let keys = keyCache.get(cacheKey);\n    if (!keys) {\n        keys = generate();\n        keyCache.set(cacheKey, keys);\n        keysCached.add(keys);\n    }\n    return keys;\n}\nconst addIfFound = (set, obj, key)=>{\n    const opts = resolveObjectKey(obj, key);\n    if (opts !== undefined) {\n        set.add(opts);\n    }\n};\nclass Config {\n    constructor(config){\n        this._config = initConfig(config);\n        this._scopeCache = new Map();\n        this._resolverCache = new Map();\n    }\n    get platform() {\n        return this._config.platform;\n    }\n    get type() {\n        return this._config.type;\n    }\n    set type(type) {\n        this._config.type = type;\n    }\n    get data() {\n        return this._config.data;\n    }\n    set data(data) {\n        this._config.data = initData(data);\n    }\n    get options() {\n        return this._config.options;\n    }\n    set options(options) {\n        this._config.options = options;\n    }\n    get plugins() {\n        return this._config.plugins;\n    }\n    update() {\n        const config = this._config;\n        this.clearCache();\n        initOptions(config);\n    }\n    clearCache() {\n        this._scopeCache.clear();\n        this._resolverCache.clear();\n    }\n datasetScopeKeys(datasetType) {\n        return cachedKeys(datasetType, ()=>[\n                [\n                    `datasets.${datasetType}`,\n                    ''\n                ]\n            ]);\n    }\n datasetAnimationScopeKeys(datasetType, transition) {\n        return cachedKeys(`${datasetType}.transition.${transition}`, ()=>[\n                [\n                    `datasets.${datasetType}.transitions.${transition}`,\n                    `transitions.${transition}`\n                ],\n                [\n                    `datasets.${datasetType}`,\n                    ''\n                ]\n            ]);\n    }\n datasetElementScopeKeys(datasetType, elementType) {\n        return cachedKeys(`${datasetType}-${elementType}`, ()=>[\n                [\n                    `datasets.${datasetType}.elements.${elementType}`,\n                    `datasets.${datasetType}`,\n                    `elements.${elementType}`,\n                    ''\n                ]\n            ]);\n    }\n pluginScopeKeys(plugin) {\n        const id = plugin.id;\n        const type = this.type;\n        return cachedKeys(`${type}-plugin-${id}`, ()=>[\n                [\n                    `plugins.${id}`,\n                    ...plugin.additionalOptionScopes || []\n                ]\n            ]);\n    }\n _cachedScopes(mainScope, resetCache) {\n        const _scopeCache = this._scopeCache;\n        let cache = _scopeCache.get(mainScope);\n        if (!cache || resetCache) {\n            cache = new Map();\n            _scopeCache.set(mainScope, cache);\n        }\n        return cache;\n    }\n getOptionScopes(mainScope, keyLists, resetCache) {\n        const { options , type  } = this;\n        const cache = this._cachedScopes(mainScope, resetCache);\n        const cached = cache.get(keyLists);\n        if (cached) {\n            return cached;\n        }\n        const scopes = new Set();\n        keyLists.forEach((keys)=>{\n            if (mainScope) {\n                scopes.add(mainScope);\n                keys.forEach((key)=>addIfFound(scopes, mainScope, key));\n            }\n            keys.forEach((key)=>addIfFound(scopes, options, key));\n            keys.forEach((key)=>addIfFound(scopes, overrides[type] || {}, key));\n            keys.forEach((key)=>addIfFound(scopes, defaults, key));\n            keys.forEach((key)=>addIfFound(scopes, descriptors, key));\n        });\n        const array = Array.from(scopes);\n        if (array.length === 0) {\n            array.push(Object.create(null));\n        }\n        if (keysCached.has(keyLists)) {\n            cache.set(keyLists, array);\n        }\n        return array;\n    }\n chartOptionScopes() {\n        const { options , type  } = this;\n        return [\n            options,\n            overrides[type] || {},\n            defaults.datasets[type] || {},\n            {\n                type\n            },\n            defaults,\n            descriptors\n        ];\n    }\n resolveNamedOptions(scopes, names, context, prefixes = [\n        ''\n    ]) {\n        const result = {\n            $shared: true\n        };\n        const { resolver , subPrefixes  } = getResolver(this._resolverCache, scopes, prefixes);\n        let options = resolver;\n        if (needContext(resolver, names)) {\n            result.$shared = false;\n            context = isFunction(context) ? context() : context;\n            const subResolver = this.createResolver(scopes, context, subPrefixes);\n            options = _attachContext(resolver, context, subResolver);\n        }\n        for (const prop of names){\n            result[prop] = options[prop];\n        }\n        return result;\n    }\n createResolver(scopes, context, prefixes = [\n        ''\n    ], descriptorDefaults) {\n        const { resolver  } = getResolver(this._resolverCache, scopes, prefixes);\n        return isObject(context) ? _attachContext(resolver, context, undefined, descriptorDefaults) : resolver;\n    }\n}\nfunction getResolver(resolverCache, scopes, prefixes) {\n    let cache = resolverCache.get(scopes);\n    if (!cache) {\n        cache = new Map();\n        resolverCache.set(scopes, cache);\n    }\n    const cacheKey = prefixes.join();\n    let cached = cache.get(cacheKey);\n    if (!cached) {\n        const resolver = _createResolver(scopes, prefixes);\n        cached = {\n            resolver,\n            subPrefixes: prefixes.filter((p)=>!p.toLowerCase().includes('hover'))\n        };\n        cache.set(cacheKey, cached);\n    }\n    return cached;\n}\nconst hasFunction = (value)=>isObject(value) && Object.getOwnPropertyNames(value).some((key)=>isFunction(value[key]));\nfunction needContext(proxy, names) {\n    const { isScriptable , isIndexable  } = _descriptors(proxy);\n    for (const prop of names){\n        const scriptable = isScriptable(prop);\n        const indexable = isIndexable(prop);\n        const value = (indexable || scriptable) && proxy[prop];\n        if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar version = \"4.5.1\";\n\nconst KNOWN_POSITIONS = [\n    'top',\n    'bottom',\n    'left',\n    'right',\n    'chartArea'\n];\nfunction positionIsHorizontal(position, axis) {\n    return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';\n}\nfunction compare2Level(l1, l2) {\n    return function(a, b) {\n        return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];\n    };\n}\nfunction onAnimationsComplete(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    chart.notifyPlugins('afterRender');\n    callback(animationOptions && animationOptions.onComplete, [\n        context\n    ], chart);\n}\nfunction onAnimationProgress(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    callback(animationOptions && animationOptions.onProgress, [\n        context\n    ], chart);\n}\n function getCanvas(item) {\n    if (_isDomSupported() && typeof item === 'string') {\n        item = document.getElementById(item);\n    } else if (item && item.length) {\n        item = item[0];\n    }\n    if (item && item.canvas) {\n        item = item.canvas;\n    }\n    return item;\n}\nconst instances = {};\nconst getChart = (key)=>{\n    const canvas = getCanvas(key);\n    return Object.values(instances).filter((c)=>c.canvas === canvas).pop();\n};\nfunction moveNumericKeys(obj, start, move) {\n    const keys = Object.keys(obj);\n    for (const key of keys){\n        const intKey = +key;\n        if (intKey >= start) {\n            const value = obj[key];\n            delete obj[key];\n            if (move > 0 || intKey > start) {\n                obj[intKey + move] = value;\n            }\n        }\n    }\n}\n function determineLastEvent(e, lastEvent, inChartArea, isClick) {\n    if (!inChartArea || e.type === 'mouseout') {\n        return null;\n    }\n    if (isClick) {\n        return lastEvent;\n    }\n    return e;\n}\nclass Chart {\n    static defaults = defaults;\n    static instances = instances;\n    static overrides = overrides;\n    static registry = registry;\n    static version = version;\n    static getChart = getChart;\n    static register(...items) {\n        registry.add(...items);\n        invalidatePlugins();\n    }\n    static unregister(...items) {\n        registry.remove(...items);\n        invalidatePlugins();\n    }\n    constructor(item, userConfig){\n        const config = this.config = new Config(userConfig);\n        const initialCanvas = getCanvas(item);\n        const existingChart = getChart(initialCanvas);\n        if (existingChart) {\n            throw new Error('Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' + ' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.');\n        }\n        const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n        this.platform.updateConfig(config);\n        const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n        const canvas = context && context.canvas;\n        const height = canvas && canvas.height;\n        const width = canvas && canvas.width;\n        this.id = uid();\n        this.ctx = context;\n        this.canvas = canvas;\n        this.width = width;\n        this.height = height;\n        this._options = options;\n        this._aspectRatio = this.aspectRatio;\n        this._layers = [];\n        this._metasets = [];\n        this._stacks = undefined;\n        this.boxes = [];\n        this.currentDevicePixelRatio = undefined;\n        this.chartArea = undefined;\n        this._active = [];\n        this._lastEvent = undefined;\n        this._listeners = {};\n         this._responsiveListeners = undefined;\n        this._sortedMetasets = [];\n        this.scales = {};\n        this._plugins = new PluginService();\n        this.$proxies = {};\n        this._hiddenIndices = {};\n        this.attached = false;\n        this._animationsDisabled = undefined;\n        this.$context = undefined;\n        this._doResize = debounce((mode)=>this.update(mode), options.resizeDelay || 0);\n        this._dataChanges = [];\n        instances[this.id] = this;\n        if (!context || !canvas) {\n            console.error(\"Failed to create chart: can't acquire context from the given item\");\n            return;\n        }\n        animator.listen(this, 'complete', onAnimationsComplete);\n        animator.listen(this, 'progress', onAnimationProgress);\n        this._initialize();\n        if (this.attached) {\n            this.update();\n        }\n    }\n    get aspectRatio() {\n        const { options: { aspectRatio , maintainAspectRatio  } , width , height , _aspectRatio  } = this;\n        if (!isNullOrUndef(aspectRatio)) {\n            return aspectRatio;\n        }\n        if (maintainAspectRatio && _aspectRatio) {\n            return _aspectRatio;\n        }\n        return height ? width / height : null;\n    }\n    get data() {\n        return this.config.data;\n    }\n    set data(data) {\n        this.config.data = data;\n    }\n    get options() {\n        return this._options;\n    }\n    set options(options) {\n        this.config.options = options;\n    }\n    get registry() {\n        return registry;\n    }\n _initialize() {\n        this.notifyPlugins('beforeInit');\n        if (this.options.responsive) {\n            this.resize();\n        } else {\n            retinaScale(this, this.options.devicePixelRatio);\n        }\n        this.bindEvents();\n        this.notifyPlugins('afterInit');\n        return this;\n    }\n    clear() {\n        clearCanvas(this.canvas, this.ctx);\n        return this;\n    }\n    stop() {\n        animator.stop(this);\n        return this;\n    }\n resize(width, height) {\n        if (!animator.running(this)) {\n            this._resize(width, height);\n        } else {\n            this._resizeBeforeDraw = {\n                width,\n                height\n            };\n        }\n    }\n    _resize(width, height) {\n        const options = this.options;\n        const canvas = this.canvas;\n        const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n        const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n        const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n        const mode = this.width ? 'resize' : 'attach';\n        this.width = newSize.width;\n        this.height = newSize.height;\n        this._aspectRatio = this.aspectRatio;\n        if (!retinaScale(this, newRatio, true)) {\n            return;\n        }\n        this.notifyPlugins('resize', {\n            size: newSize\n        });\n        callback(options.onResize, [\n            this,\n            newSize\n        ], this);\n        if (this.attached) {\n            if (this._doResize(mode)) {\n                this.render();\n            }\n        }\n    }\n    ensureScalesHaveIDs() {\n        const options = this.options;\n        const scalesOptions = options.scales || {};\n        each(scalesOptions, (axisOptions, axisID)=>{\n            axisOptions.id = axisID;\n        });\n    }\n buildOrUpdateScales() {\n        const options = this.options;\n        const scaleOpts = options.scales;\n        const scales = this.scales;\n        const updated = Object.keys(scales).reduce((obj, id)=>{\n            obj[id] = false;\n            return obj;\n        }, {});\n        let items = [];\n        if (scaleOpts) {\n            items = items.concat(Object.keys(scaleOpts).map((id)=>{\n                const scaleOptions = scaleOpts[id];\n                const axis = determineAxis(id, scaleOptions);\n                const isRadial = axis === 'r';\n                const isHorizontal = axis === 'x';\n                return {\n                    options: scaleOptions,\n                    dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n                    dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n                };\n            }));\n        }\n        each(items, (item)=>{\n            const scaleOptions = item.options;\n            const id = scaleOptions.id;\n            const axis = determineAxis(id, scaleOptions);\n            const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n            if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n                scaleOptions.position = item.dposition;\n            }\n            updated[id] = true;\n            let scale = null;\n            if (id in scales && scales[id].type === scaleType) {\n                scale = scales[id];\n            } else {\n                const scaleClass = registry.getScale(scaleType);\n                scale = new scaleClass({\n                    id,\n                    type: scaleType,\n                    ctx: this.ctx,\n                    chart: this\n                });\n                scales[scale.id] = scale;\n            }\n            scale.init(scaleOptions, options);\n        });\n        each(updated, (hasUpdated, id)=>{\n            if (!hasUpdated) {\n                delete scales[id];\n            }\n        });\n        each(scales, (scale)=>{\n            layouts.configure(this, scale, scale.options);\n            layouts.addBox(this, scale);\n        });\n    }\n _updateMetasets() {\n        const metasets = this._metasets;\n        const numData = this.data.datasets.length;\n        const numMeta = metasets.length;\n        metasets.sort((a, b)=>a.index - b.index);\n        if (numMeta > numData) {\n            for(let i = numData; i < numMeta; ++i){\n                this._destroyDatasetMeta(i);\n            }\n            metasets.splice(numData, numMeta - numData);\n        }\n        this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n    }\n _removeUnreferencedMetasets() {\n        const { _metasets: metasets , data: { datasets  }  } = this;\n        if (metasets.length > datasets.length) {\n            delete this._stacks;\n        }\n        metasets.forEach((meta, index)=>{\n            if (datasets.filter((x)=>x === meta._dataset).length === 0) {\n                this._destroyDatasetMeta(index);\n            }\n        });\n    }\n    buildOrUpdateControllers() {\n        const newControllers = [];\n        const datasets = this.data.datasets;\n        let i, ilen;\n        this._removeUnreferencedMetasets();\n        for(i = 0, ilen = datasets.length; i < ilen; i++){\n            const dataset = datasets[i];\n            let meta = this.getDatasetMeta(i);\n            const type = dataset.type || this.config.type;\n            if (meta.type && meta.type !== type) {\n                this._destroyDatasetMeta(i);\n                meta = this.getDatasetMeta(i);\n            }\n            meta.type = type;\n            meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n            meta.order = dataset.order || 0;\n            meta.index = i;\n            meta.label = '' + dataset.label;\n            meta.visible = this.isDatasetVisible(i);\n            if (meta.controller) {\n                meta.controller.updateIndex(i);\n                meta.controller.linkScales();\n            } else {\n                const ControllerClass = registry.getController(type);\n                const { datasetElementType , dataElementType  } = defaults.datasets[type];\n                Object.assign(ControllerClass, {\n                    dataElementType: registry.getElement(dataElementType),\n                    datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n                });\n                meta.controller = new ControllerClass(this, i);\n                newControllers.push(meta.controller);\n            }\n        }\n        this._updateMetasets();\n        return newControllers;\n    }\n _resetElements() {\n        each(this.data.datasets, (dataset, datasetIndex)=>{\n            this.getDatasetMeta(datasetIndex).controller.reset();\n        }, this);\n    }\n reset() {\n        this._resetElements();\n        this.notifyPlugins('reset');\n    }\n    update(mode) {\n        const config = this.config;\n        config.update();\n        const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        const animsDisabled = this._animationsDisabled = !options.animation;\n        this._updateScales();\n        this._checkEventBindings();\n        this._updateHiddenIndices();\n        this._plugins.invalidate();\n        if (this.notifyPlugins('beforeUpdate', {\n            mode,\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const newControllers = this.buildOrUpdateControllers();\n        this.notifyPlugins('beforeElementsUpdate');\n        let minPadding = 0;\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; i++){\n            const { controller  } = this.getDatasetMeta(i);\n            const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n            controller.buildOrUpdateElements(reset);\n            minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n        }\n        minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n        this._updateLayout(minPadding);\n        if (!animsDisabled) {\n            each(newControllers, (controller)=>{\n                controller.reset();\n            });\n        }\n        this._updateDatasets(mode);\n        this.notifyPlugins('afterUpdate', {\n            mode\n        });\n        this._layers.sort(compare2Level('z', '_idx'));\n        const { _active , _lastEvent  } = this;\n        if (_lastEvent) {\n            this._eventHandler(_lastEvent, true);\n        } else if (_active.length) {\n            this._updateHoverStyles(_active, _active, true);\n        }\n        this.render();\n    }\n _updateScales() {\n        each(this.scales, (scale)=>{\n            layouts.removeBox(this, scale);\n        });\n        this.ensureScalesHaveIDs();\n        this.buildOrUpdateScales();\n    }\n _checkEventBindings() {\n        const options = this.options;\n        const existingEvents = new Set(Object.keys(this._listeners));\n        const newEvents = new Set(options.events);\n        if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n            this.unbindEvents();\n            this.bindEvents();\n        }\n    }\n _updateHiddenIndices() {\n        const { _hiddenIndices  } = this;\n        const changes = this._getUniformDataChanges() || [];\n        for (const { method , start , count  } of changes){\n            const move = method === '_removeElements' ? -count : count;\n            moveNumericKeys(_hiddenIndices, start, move);\n        }\n    }\n _getUniformDataChanges() {\n        const _dataChanges = this._dataChanges;\n        if (!_dataChanges || !_dataChanges.length) {\n            return;\n        }\n        this._dataChanges = [];\n        const datasetCount = this.data.datasets.length;\n        const makeSet = (idx)=>new Set(_dataChanges.filter((c)=>c[0] === idx).map((c, i)=>i + ',' + c.splice(1).join(',')));\n        const changeSet = makeSet(0);\n        for(let i = 1; i < datasetCount; i++){\n            if (!setsEqual(changeSet, makeSet(i))) {\n                return;\n            }\n        }\n        return Array.from(changeSet).map((c)=>c.split(',')).map((a)=>({\n                method: a[1],\n                start: +a[2],\n                count: +a[3]\n            }));\n    }\n _updateLayout(minPadding) {\n        if (this.notifyPlugins('beforeLayout', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        layouts.update(this, this.width, this.height, minPadding);\n        const area = this.chartArea;\n        const noArea = area.width <= 0 || area.height <= 0;\n        this._layers = [];\n        each(this.boxes, (box)=>{\n            if (noArea && box.position === 'chartArea') {\n                return;\n            }\n            if (box.configure) {\n                box.configure();\n            }\n            this._layers.push(...box._layers());\n        }, this);\n        this._layers.forEach((item, index)=>{\n            item._idx = index;\n        });\n        this.notifyPlugins('afterLayout');\n    }\n _updateDatasets(mode) {\n        if (this.notifyPlugins('beforeDatasetsUpdate', {\n            mode,\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this.getDatasetMeta(i).controller.configure();\n        }\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this._updateDataset(i, isFunction(mode) ? mode({\n                datasetIndex: i\n            }) : mode);\n        }\n        this.notifyPlugins('afterDatasetsUpdate', {\n            mode\n        });\n    }\n _updateDataset(index, mode) {\n        const meta = this.getDatasetMeta(index);\n        const args = {\n            meta,\n            index,\n            mode,\n            cancelable: true\n        };\n        if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n            return;\n        }\n        meta.controller._update(mode);\n        args.cancelable = false;\n        this.notifyPlugins('afterDatasetUpdate', args);\n    }\n    render() {\n        if (this.notifyPlugins('beforeRender', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        if (animator.has(this)) {\n            if (this.attached && !animator.running(this)) {\n                animator.start(this);\n            }\n        } else {\n            this.draw();\n            onAnimationsComplete({\n                chart: this\n            });\n        }\n    }\n    draw() {\n        let i;\n        if (this._resizeBeforeDraw) {\n            const { width , height  } = this._resizeBeforeDraw;\n            this._resizeBeforeDraw = null;\n            this._resize(width, height);\n        }\n        this.clear();\n        if (this.width <= 0 || this.height <= 0) {\n            return;\n        }\n        if (this.notifyPlugins('beforeDraw', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const layers = this._layers;\n        for(i = 0; i < layers.length && layers[i].z <= 0; ++i){\n            layers[i].draw(this.chartArea);\n        }\n        this._drawDatasets();\n        for(; i < layers.length; ++i){\n            layers[i].draw(this.chartArea);\n        }\n        this.notifyPlugins('afterDraw');\n    }\n _getSortedDatasetMetas(filterVisible) {\n        const metasets = this._sortedMetasets;\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metasets.length; i < ilen; ++i){\n            const meta = metasets[i];\n            if (!filterVisible || meta.visible) {\n                result.push(meta);\n            }\n        }\n        return result;\n    }\n getSortedVisibleDatasetMetas() {\n        return this._getSortedDatasetMetas(true);\n    }\n _drawDatasets() {\n        if (this.notifyPlugins('beforeDatasetsDraw', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const metasets = this.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i){\n            this._drawDataset(metasets[i]);\n        }\n        this.notifyPlugins('afterDatasetsDraw');\n    }\n _drawDataset(meta) {\n        const ctx = this.ctx;\n        const args = {\n            meta,\n            index: meta.index,\n            cancelable: true\n        };\n        const clip = getDatasetClipArea(this, meta);\n        if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n            return;\n        }\n        if (clip) {\n            clipArea(ctx, clip);\n        }\n        meta.controller.draw();\n        if (clip) {\n            unclipArea(ctx);\n        }\n        args.cancelable = false;\n        this.notifyPlugins('afterDatasetDraw', args);\n    }\n isPointInArea(point) {\n        return _isPointInArea(point, this.chartArea, this._minPadding);\n    }\n    getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n        const method = Interaction.modes[mode];\n        if (typeof method === 'function') {\n            return method(this, e, options, useFinalPosition);\n        }\n        return [];\n    }\n    getDatasetMeta(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        const metasets = this._metasets;\n        let meta = metasets.filter((x)=>x && x._dataset === dataset).pop();\n        if (!meta) {\n            meta = {\n                type: null,\n                data: [],\n                dataset: null,\n                controller: null,\n                hidden: null,\n                xAxisID: null,\n                yAxisID: null,\n                order: dataset && dataset.order || 0,\n                index: datasetIndex,\n                _dataset: dataset,\n                _parsed: [],\n                _sorted: false\n            };\n            metasets.push(meta);\n        }\n        return meta;\n    }\n    getContext() {\n        return this.$context || (this.$context = createContext(null, {\n            chart: this,\n            type: 'chart'\n        }));\n    }\n    getVisibleDatasetCount() {\n        return this.getSortedVisibleDatasetMetas().length;\n    }\n    isDatasetVisible(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        if (!dataset) {\n            return false;\n        }\n        const meta = this.getDatasetMeta(datasetIndex);\n        return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n    }\n    setDatasetVisibility(datasetIndex, visible) {\n        const meta = this.getDatasetMeta(datasetIndex);\n        meta.hidden = !visible;\n    }\n    toggleDataVisibility(index) {\n        this._hiddenIndices[index] = !this._hiddenIndices[index];\n    }\n    getDataVisibility(index) {\n        return !this._hiddenIndices[index];\n    }\n _updateVisibility(datasetIndex, dataIndex, visible) {\n        const mode = visible ? 'show' : 'hide';\n        const meta = this.getDatasetMeta(datasetIndex);\n        const anims = meta.controller._resolveAnimations(undefined, mode);\n        if (defined(dataIndex)) {\n            meta.data[dataIndex].hidden = !visible;\n            this.update();\n        } else {\n            this.setDatasetVisibility(datasetIndex, visible);\n            anims.update(meta, {\n                visible\n            });\n            this.update((ctx)=>ctx.datasetIndex === datasetIndex ? mode : undefined);\n        }\n    }\n    hide(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, false);\n    }\n    show(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, true);\n    }\n _destroyDatasetMeta(datasetIndex) {\n        const meta = this._metasets[datasetIndex];\n        if (meta && meta.controller) {\n            meta.controller._destroy();\n        }\n        delete this._metasets[datasetIndex];\n    }\n    _stop() {\n        let i, ilen;\n        this.stop();\n        animator.remove(this);\n        for(i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this._destroyDatasetMeta(i);\n        }\n    }\n    destroy() {\n        this.notifyPlugins('beforeDestroy');\n        const { canvas , ctx  } = this;\n        this._stop();\n        this.config.clearCache();\n        if (canvas) {\n            this.unbindEvents();\n            clearCanvas(canvas, ctx);\n            this.platform.releaseContext(ctx);\n            this.canvas = null;\n            this.ctx = null;\n        }\n        delete instances[this.id];\n        this.notifyPlugins('afterDestroy');\n    }\n    toBase64Image(...args) {\n        return this.canvas.toDataURL(...args);\n    }\n bindEvents() {\n        this.bindUserEvents();\n        if (this.options.responsive) {\n            this.bindResponsiveEvents();\n        } else {\n            this.attached = true;\n        }\n    }\n bindUserEvents() {\n        const listeners = this._listeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const listener = (e, x, y)=>{\n            e.offsetX = x;\n            e.offsetY = y;\n            this._eventHandler(e);\n        };\n        each(this.options.events, (type)=>_add(type, listener));\n    }\n bindResponsiveEvents() {\n        if (!this._responsiveListeners) {\n            this._responsiveListeners = {};\n        }\n        const listeners = this._responsiveListeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const _remove = (type, listener)=>{\n            if (listeners[type]) {\n                platform.removeEventListener(this, type, listener);\n                delete listeners[type];\n            }\n        };\n        const listener = (width, height)=>{\n            if (this.canvas) {\n                this.resize(width, height);\n            }\n        };\n        let detached;\n        const attached = ()=>{\n            _remove('attach', attached);\n            this.attached = true;\n            this.resize();\n            _add('resize', listener);\n            _add('detach', detached);\n        };\n        detached = ()=>{\n            this.attached = false;\n            _remove('resize', listener);\n            this._stop();\n            this._resize(0, 0);\n            _add('attach', attached);\n        };\n        if (platform.isAttached(this.canvas)) {\n            attached();\n        } else {\n            detached();\n        }\n    }\n unbindEvents() {\n        each(this._listeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._listeners = {};\n        each(this._responsiveListeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._responsiveListeners = undefined;\n    }\n    updateHoverStyle(items, mode, enabled) {\n        const prefix = enabled ? 'set' : 'remove';\n        let meta, item, i, ilen;\n        if (mode === 'dataset') {\n            meta = this.getDatasetMeta(items[0].datasetIndex);\n            meta.controller['_' + prefix + 'DatasetHoverStyle']();\n        }\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            item = items[i];\n            const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n            if (controller) {\n                controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n            }\n        }\n    }\n getActiveElements() {\n        return this._active || [];\n    }\n setActiveElements(activeElements) {\n        const lastActive = this._active || [];\n        const active = activeElements.map(({ datasetIndex , index  })=>{\n            const meta = this.getDatasetMeta(datasetIndex);\n            if (!meta) {\n                throw new Error('No dataset found at index ' + datasetIndex);\n            }\n            return {\n                datasetIndex,\n                element: meta.data[index],\n                index\n            };\n        });\n        const changed = !_elementsEqual(active, lastActive);\n        if (changed) {\n            this._active = active;\n            this._lastEvent = null;\n            this._updateHoverStyles(active, lastActive);\n        }\n    }\n notifyPlugins(hook, args, filter) {\n        return this._plugins.notify(this, hook, args, filter);\n    }\n isPluginEnabled(pluginId) {\n        return this._plugins._cache.filter((p)=>p.plugin.id === pluginId).length === 1;\n    }\n _updateHoverStyles(active, lastActive, replay) {\n        const hoverOptions = this.options.hover;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.datasetIndex === y.datasetIndex && x.index === y.index));\n        const deactivated = diff(lastActive, active);\n        const activated = replay ? active : diff(active, lastActive);\n        if (deactivated.length) {\n            this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n        }\n        if (activated.length && hoverOptions.mode) {\n            this.updateHoverStyle(activated, hoverOptions.mode, true);\n        }\n    }\n _eventHandler(e, replay) {\n        const args = {\n            event: e,\n            replay,\n            cancelable: true,\n            inChartArea: this.isPointInArea(e)\n        };\n        const eventFilter = (plugin)=>(plugin.options.events || this.options.events).includes(e.native.type);\n        if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n            return;\n        }\n        const changed = this._handleEvent(e, replay, args.inChartArea);\n        args.cancelable = false;\n        this.notifyPlugins('afterEvent', args, eventFilter);\n        if (changed || args.changed) {\n            this.render();\n        }\n        return this;\n    }\n _handleEvent(e, replay, inChartArea) {\n        const { _active: lastActive = [] , options  } = this;\n        const useFinalPosition = replay;\n        const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n        const isClick = _isClickEvent(e);\n        const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n        if (inChartArea) {\n            this._lastEvent = null;\n            callback(options.onHover, [\n                e,\n                active,\n                this\n            ], this);\n            if (isClick) {\n                callback(options.onClick, [\n                    e,\n                    active,\n                    this\n                ], this);\n            }\n        }\n        const changed = !_elementsEqual(active, lastActive);\n        if (changed || replay) {\n            this._active = active;\n            this._updateHoverStyles(active, lastActive, replay);\n        }\n        this._lastEvent = lastEvent;\n        return changed;\n    }\n _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n        if (e.type === 'mouseout') {\n            return [];\n        }\n        if (!inChartArea) {\n            return lastActive;\n        }\n        const hoverOptions = this.options.hover;\n        return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n    }\n}\nfunction invalidatePlugins() {\n    return each(Chart.instances, (chart)=>chart._plugins.invalidate());\n}\n\nfunction clipSelf(ctx, element, endAngle) {\n    const { startAngle , x , y , outerRadius , innerRadius , options  } = element;\n    const { borderWidth , borderJoinStyle  } = options;\n    const outerAngleClip = Math.min(borderWidth / outerRadius, _normalizeAngle(startAngle - endAngle));\n    ctx.beginPath();\n    ctx.arc(x, y, outerRadius - borderWidth / 2, startAngle + outerAngleClip / 2, endAngle - outerAngleClip / 2);\n    if (innerRadius > 0) {\n        const innerAngleClip = Math.min(borderWidth / innerRadius, _normalizeAngle(startAngle - endAngle));\n        ctx.arc(x, y, innerRadius + borderWidth / 2, endAngle - innerAngleClip / 2, startAngle + innerAngleClip / 2, true);\n    } else {\n        const clipWidth = Math.min(borderWidth / 2, outerRadius * _normalizeAngle(startAngle - endAngle));\n        if (borderJoinStyle === 'round') {\n            ctx.arc(x, y, clipWidth, endAngle - PI / 2, startAngle + PI / 2, true);\n        } else if (borderJoinStyle === 'bevel') {\n            const r = 2 * clipWidth * clipWidth;\n            const endX = -r * Math.cos(endAngle + PI / 2) + x;\n            const endY = -r * Math.sin(endAngle + PI / 2) + y;\n            const startX = r * Math.cos(startAngle + PI / 2) + x;\n            const startY = r * Math.sin(startAngle + PI / 2) + y;\n            ctx.lineTo(endX, endY);\n            ctx.lineTo(startX, startY);\n        }\n    }\n    ctx.closePath();\n    ctx.moveTo(0, 0);\n    ctx.rect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    ctx.clip('evenodd');\n}\nfunction clipArc(ctx, element, endAngle) {\n    const { startAngle , pixelMargin , x , y , outerRadius , innerRadius  } = element;\n    let angleMargin = pixelMargin / outerRadius;\n    // Draw an inner border by clipping the arc and drawing a double-width border\n    // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n    ctx.beginPath();\n    ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n    if (innerRadius > pixelMargin) {\n        angleMargin = pixelMargin / innerRadius;\n        ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n    } else {\n        ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n    }\n    ctx.closePath();\n    ctx.clip();\n}\nfunction toRadiusCorners(value) {\n    return _readValueToProps(value, [\n        'outerStart',\n        'outerEnd',\n        'innerStart',\n        'innerEnd'\n    ]);\n}\n/**\n * Parse border radius from the provided options\n */ function parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n    const o = toRadiusCorners(arc.options.borderRadius);\n    const halfThickness = (outerRadius - innerRadius) / 2;\n    const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n    // Outer limits are complicated. We want to compute the available angular distance at\n    // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n    // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n    //\n    // If the borderRadius is large, that value can become negative.\n    // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n    // we know that the thickness term will dominate and compute the limits at that point\n    const computeOuterLimit = (val)=>{\n        const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n        return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n    };\n    return {\n        outerStart: computeOuterLimit(o.outerStart),\n        outerEnd: computeOuterLimit(o.outerEnd),\n        innerStart: _limitValue(o.innerStart, 0, innerLimit),\n        innerEnd: _limitValue(o.innerEnd, 0, innerLimit)\n    };\n}\n/**\n * Convert (r, 𝜃) to (x, y)\n */ function rThetaToXY(r, theta, x, y) {\n    return {\n        x: x + r * Math.cos(theta),\n        y: y + r * Math.sin(theta)\n    };\n}\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */ function pathArc(ctx, element, offset, spacing, end, circular) {\n    const { x , y , startAngle: start , pixelMargin , innerRadius: innerR  } = element;\n    const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n    const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n    let spacingOffset = 0;\n    const alpha = end - start;\n    if (spacing) {\n        // When spacing is present, it is the same for all items\n        // So we adjust the start and end angle of the arc such that\n        // the distance is the same as it would be without the spacing\n        const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n        const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n        const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n        const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;\n        spacingOffset = (alpha - adjustedAngle) / 2;\n    }\n    const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n    const angleOffset = (alpha - beta) / 2;\n    const startAngle = start + angleOffset + spacingOffset;\n    const endAngle = end - angleOffset - spacingOffset;\n    const { outerStart , outerEnd , innerStart , innerEnd  } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\n    const outerStartAdjustedRadius = outerRadius - outerStart;\n    const outerEndAdjustedRadius = outerRadius - outerEnd;\n    const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n    const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n    const innerStartAdjustedRadius = innerRadius + innerStart;\n    const innerEndAdjustedRadius = innerRadius + innerEnd;\n    const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n    const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n    ctx.beginPath();\n    if (circular) {\n        // The first arc segments from point 1 to point a to point 2\n        const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n        ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n        ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n        // The corner segment from point 2 to point 3\n        if (outerEnd > 0) {\n            const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n        }\n        // The line from point 3 to point 4\n        const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n        ctx.lineTo(p4.x, p4.y);\n        // The corner segment from point 4 to point 5\n        if (innerEnd > 0) {\n            const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n        }\n        // The inner arc from point 5 to point b to point 6\n        const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;\n        ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);\n        ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);\n        // The corner segment from point 6 to point 7\n        if (innerStart > 0) {\n            const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n        }\n        // The line from point 7 to point 8\n        const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n        ctx.lineTo(p8.x, p8.y);\n        // The corner segment from point 8 to point 1\n        if (outerStart > 0) {\n            const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n        }\n    } else {\n        ctx.moveTo(x, y);\n        const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n        const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerStartX, outerStartY);\n        const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n        const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerEndX, outerEndY);\n    }\n    ctx.closePath();\n}\nfunction drawArc(ctx, element, offset, spacing, circular) {\n    const { fullCircles , startAngle , circumference  } = element;\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i){\n            ctx.fill();\n        }\n        if (!isNaN(circumference)) {\n            endAngle = startAngle + (circumference % TAU || TAU);\n        }\n    }\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.fill();\n    return endAngle;\n}\nfunction drawBorder(ctx, element, offset, spacing, circular) {\n    const { fullCircles , startAngle , circumference , options  } = element;\n    const { borderWidth , borderJoinStyle , borderDash , borderDashOffset , borderRadius  } = options;\n    const inner = options.borderAlign === 'inner';\n    if (!borderWidth) {\n        return;\n    }\n    ctx.setLineDash(borderDash || []);\n    ctx.lineDashOffset = borderDashOffset;\n    if (inner) {\n        ctx.lineWidth = borderWidth * 2;\n        ctx.lineJoin = borderJoinStyle || 'round';\n    } else {\n        ctx.lineWidth = borderWidth;\n        ctx.lineJoin = borderJoinStyle || 'bevel';\n    }\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i){\n            ctx.stroke();\n        }\n        if (!isNaN(circumference)) {\n            endAngle = startAngle + (circumference % TAU || TAU);\n        }\n    }\n    if (inner) {\n        clipArc(ctx, element, endAngle);\n    }\n    if (options.selfJoin && endAngle - startAngle >= PI && borderRadius === 0 && borderJoinStyle !== 'miter') {\n        clipSelf(ctx, element, endAngle);\n    }\n    if (!fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        ctx.stroke();\n    }\n}\nclass ArcElement extends Element {\n    static id = 'arc';\n    static defaults = {\n        borderAlign: 'center',\n        borderColor: '#fff',\n        borderDash: [],\n        borderDashOffset: 0,\n        borderJoinStyle: undefined,\n        borderRadius: 0,\n        borderWidth: 2,\n        offset: 0,\n        spacing: 0,\n        angle: undefined,\n        circular: true,\n        selfJoin: false\n    };\n    static defaultRoutes = {\n        backgroundColor: 'backgroundColor'\n    };\n    static descriptors = {\n        _scriptable: true,\n        _indexable: (name)=>name !== 'borderDash'\n    };\n    circumference;\n    endAngle;\n    fullCircles;\n    innerRadius;\n    outerRadius;\n    pixelMargin;\n    startAngle;\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.circumference = undefined;\n        this.startAngle = undefined;\n        this.endAngle = undefined;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.pixelMargin = 0;\n        this.fullCircles = 0;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    inRange(chartX, chartY, useFinalPosition) {\n        const point = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        const { angle , distance  } = getAngleFromPoint(point, {\n            x: chartX,\n            y: chartY\n        });\n        const { startAngle , endAngle , innerRadius , outerRadius , circumference  } = this.getProps([\n            'startAngle',\n            'endAngle',\n            'innerRadius',\n            'outerRadius',\n            'circumference'\n        ], useFinalPosition);\n        const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n        const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n        const nonZeroBetween = _angleBetween(angle, startAngle, endAngle) && startAngle !== endAngle;\n        const betweenAngles = _circumference >= TAU || nonZeroBetween;\n        const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n        return betweenAngles && withinRadius;\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y , startAngle , endAngle , innerRadius , outerRadius  } = this.getProps([\n            'x',\n            'y',\n            'startAngle',\n            'endAngle',\n            'innerRadius',\n            'outerRadius'\n        ], useFinalPosition);\n        const { offset , spacing  } = this.options;\n        const halfAngle = (startAngle + endAngle) / 2;\n        const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n        return {\n            x: x + Math.cos(halfAngle) * halfRadius,\n            y: y + Math.sin(halfAngle) * halfRadius\n        };\n    }\n    tooltipPosition(useFinalPosition) {\n        return this.getCenterPoint(useFinalPosition);\n    }\n    draw(ctx) {\n        const { options , circumference  } = this;\n        const offset = (options.offset || 0) / 4;\n        const spacing = (options.spacing || 0) / 2;\n        const circular = options.circular;\n        this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;\n        this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n        if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n            return;\n        }\n        ctx.save();\n        const halfAngle = (this.startAngle + this.endAngle) / 2;\n        ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n        const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n        const radiusOffset = offset * fix;\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        drawArc(ctx, this, radiusOffset, spacing, circular);\n        drawBorder(ctx, this, radiusOffset, spacing, circular);\n        ctx.restore();\n    }\n}\n\nfunction setStyle(ctx, options, style = options) {\n    ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n    ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n    ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n    ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n    ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n    ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\nfunction lineTo(ctx, previous, target) {\n    ctx.lineTo(target.x, target.y);\n}\n function getLineMethod(options) {\n    if (options.stepped) {\n        return _steppedLineTo;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n        return _bezierCurveTo;\n    }\n    return lineTo;\n}\nfunction pathVars(points, segment, params = {}) {\n    const count = points.length;\n    const { start: paramsStart = 0 , end: paramsEnd = count - 1  } = params;\n    const { start: segmentStart , end: segmentEnd  } = segment;\n    const start = Math.max(paramsStart, segmentStart);\n    const end = Math.min(paramsEnd, segmentEnd);\n    const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n    return {\n        count,\n        start,\n        loop: segment.loop,\n        ilen: end < start && !outside ? count + end - start : end - start\n    };\n}\n function pathSegment(ctx, line, segment, params) {\n    const { points , options  } = line;\n    const { count , start , loop , ilen  } = pathVars(points, segment, params);\n    const lineMethod = getLineMethod(options);\n    let { move =true , reverse  } = params || {};\n    let i, point, prev;\n    for(i = 0; i <= ilen; ++i){\n        point = points[(start + (reverse ? ilen - i : i)) % count];\n        if (point.skip) {\n            continue;\n        } else if (move) {\n            ctx.moveTo(point.x, point.y);\n            move = false;\n        } else {\n            lineMethod(ctx, prev, point, reverse, options.stepped);\n        }\n        prev = point;\n    }\n    if (loop) {\n        point = points[(start + (reverse ? ilen : 0)) % count];\n        lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n    return !!loop;\n}\n function fastPathSegment(ctx, line, segment, params) {\n    const points = line.points;\n    const { count , start , ilen  } = pathVars(points, segment, params);\n    const { move =true , reverse  } = params || {};\n    let avgX = 0;\n    let countX = 0;\n    let i, point, prevX, minY, maxY, lastY;\n    const pointIndex = (index)=>(start + (reverse ? ilen - index : index)) % count;\n    const drawX = ()=>{\n        if (minY !== maxY) {\n            ctx.lineTo(avgX, maxY);\n            ctx.lineTo(avgX, minY);\n            ctx.lineTo(avgX, lastY);\n        }\n    };\n    if (move) {\n        point = points[pointIndex(0)];\n        ctx.moveTo(point.x, point.y);\n    }\n    for(i = 0; i <= ilen; ++i){\n        point = points[pointIndex(i)];\n        if (point.skip) {\n            continue;\n        }\n        const x = point.x;\n        const y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) {\n                minY = y;\n            } else if (y > maxY) {\n                maxY = y;\n            }\n            avgX = (countX * avgX + x) / ++countX;\n        } else {\n            drawX();\n            ctx.lineTo(x, y);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n        }\n        lastY = y;\n    }\n    drawX();\n}\n function _getSegmentMethod(line) {\n    const opts = line.options;\n    const borderDash = opts.borderDash && opts.borderDash.length;\n    const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n    return useFastPath ? fastPathSegment : pathSegment;\n}\n function _getInterpolationMethod(options) {\n    if (options.stepped) {\n        return _steppedInterpolation;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n        return _bezierInterpolation;\n    }\n    return _pointInLine;\n}\nfunction strokePathWithCache(ctx, line, start, count) {\n    let path = line._path;\n    if (!path) {\n        path = line._path = new Path2D();\n        if (line.path(path, start, count)) {\n            path.closePath();\n        }\n    }\n    setStyle(ctx, line.options);\n    ctx.stroke(path);\n}\nfunction strokePathDirect(ctx, line, start, count) {\n    const { segments , options  } = line;\n    const segmentMethod = _getSegmentMethod(line);\n    for (const segment of segments){\n        setStyle(ctx, options, segment.style);\n        ctx.beginPath();\n        if (segmentMethod(ctx, line, segment, {\n            start,\n            end: start + count - 1\n        })) {\n            ctx.closePath();\n        }\n        ctx.stroke();\n    }\n}\nconst usePath2D = typeof Path2D === 'function';\nfunction draw(ctx, line, start, count) {\n    if (usePath2D && !line.options.segment) {\n        strokePathWithCache(ctx, line, start, count);\n    } else {\n        strokePathDirect(ctx, line, start, count);\n    }\n}\nclass LineElement extends Element {\n    static id = 'line';\n static defaults = {\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0,\n        borderJoinStyle: 'miter',\n        borderWidth: 3,\n        capBezierPoints: true,\n        cubicInterpolationMode: 'default',\n        fill: false,\n        spanGaps: false,\n        stepped: false,\n        tension: 0\n    };\n static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    static descriptors = {\n        _scriptable: true,\n        _indexable: (name)=>name !== 'borderDash' && name !== 'fill'\n    };\n    constructor(cfg){\n        super();\n        this.animated = true;\n        this.options = undefined;\n        this._chart = undefined;\n        this._loop = undefined;\n        this._fullLoop = undefined;\n        this._path = undefined;\n        this._points = undefined;\n        this._segments = undefined;\n        this._decimated = false;\n        this._pointsUpdated = false;\n        this._datasetIndex = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    updateControlPoints(chartArea, indexAxis) {\n        const options = this.options;\n        if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n            const loop = options.spanGaps ? this._loop : this._fullLoop;\n            _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n            this._pointsUpdated = true;\n        }\n    }\n    set points(points) {\n        this._points = points;\n        delete this._segments;\n        delete this._path;\n        this._pointsUpdated = false;\n    }\n    get points() {\n        return this._points;\n    }\n    get segments() {\n        return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n    }\n first() {\n        const segments = this.segments;\n        const points = this.points;\n        return segments.length && points[segments[0].start];\n    }\n last() {\n        const segments = this.segments;\n        const points = this.points;\n        const count = segments.length;\n        return count && points[segments[count - 1].end];\n    }\n interpolate(point, property) {\n        const options = this.options;\n        const value = point[property];\n        const points = this.points;\n        const segments = _boundSegments(this, {\n            property,\n            start: value,\n            end: value\n        });\n        if (!segments.length) {\n            return;\n        }\n        const result = [];\n        const _interpolate = _getInterpolationMethod(options);\n        let i, ilen;\n        for(i = 0, ilen = segments.length; i < ilen; ++i){\n            const { start , end  } = segments[i];\n            const p1 = points[start];\n            const p2 = points[end];\n            if (p1 === p2) {\n                result.push(p1);\n                continue;\n            }\n            const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n            const interpolated = _interpolate(p1, p2, t, options.stepped);\n            interpolated[property] = point[property];\n            result.push(interpolated);\n        }\n        return result.length === 1 ? result[0] : result;\n    }\n pathSegment(ctx, segment, params) {\n        const segmentMethod = _getSegmentMethod(this);\n        return segmentMethod(ctx, this, segment, params);\n    }\n path(ctx, start, count) {\n        const segments = this.segments;\n        const segmentMethod = _getSegmentMethod(this);\n        let loop = this._loop;\n        start = start || 0;\n        count = count || this.points.length - start;\n        for (const segment of segments){\n            loop &= segmentMethod(ctx, this, segment, {\n                start,\n                end: start + count - 1\n            });\n        }\n        return !!loop;\n    }\n draw(ctx, chartArea, start, count) {\n        const options = this.options || {};\n        const points = this.points || [];\n        if (points.length && options.borderWidth) {\n            ctx.save();\n            draw(ctx, this, start, count);\n            ctx.restore();\n        }\n        if (this.animated) {\n            this._pointsUpdated = false;\n            this._path = undefined;\n        }\n    }\n}\n\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n    const options = el.options;\n    const { [axis]: value  } = el.getProps([\n        axis\n    ], useFinalPosition);\n    return Math.abs(pos - value) < options.radius + options.hitRadius;\n}\nclass PointElement extends Element {\n    static id = 'point';\n    parsed;\n    skip;\n    stop;\n    /**\n   * @type {any}\n   */ static defaults = {\n        borderWidth: 1,\n        hitRadius: 1,\n        hoverBorderWidth: 1,\n        hoverRadius: 4,\n        pointStyle: 'circle',\n        radius: 3,\n        rotation: 0\n    };\n    /**\n   * @type {any}\n   */ static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.parsed = undefined;\n        this.skip = undefined;\n        this.stop = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        const options = this.options;\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return inRange$1(this, mouseX, 'x', useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return inRange$1(this, mouseY, 'y', useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return {\n            x,\n            y\n        };\n    }\n    size(options) {\n        options = options || this.options || {};\n        let radius = options.radius || 0;\n        radius = Math.max(radius, radius && options.hoverRadius || 0);\n        const borderWidth = radius && options.borderWidth || 0;\n        return (radius + borderWidth) * 2;\n    }\n    draw(ctx, area) {\n        const options = this.options;\n        if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n            return;\n        }\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.fillStyle = options.backgroundColor;\n        drawPoint(ctx, options, this.x, this.y);\n    }\n    getRange() {\n        const options = this.options || {};\n        // @ts-expect-error Fallbacks should never be hit in practice\n        return options.radius + options.hitRadius;\n    }\n}\n\nfunction getBarBounds(bar, useFinalPosition) {\n    const { x , y , base , width , height  } =  bar.getProps([\n        'x',\n        'y',\n        'base',\n        'width',\n        'height'\n    ], useFinalPosition);\n    let left, right, top, bottom, half;\n    if (bar.horizontal) {\n        half = height / 2;\n        left = Math.min(x, base);\n        right = Math.max(x, base);\n        top = y - half;\n        bottom = y + half;\n    } else {\n        half = width / 2;\n        left = x - half;\n        right = x + half;\n        top = Math.min(y, base);\n        bottom = Math.max(y, base);\n    }\n    return {\n        left,\n        top,\n        right,\n        bottom\n    };\n}\nfunction skipOrLimit(skip, value, min, max) {\n    return skip ? 0 : _limitValue(value, min, max);\n}\nfunction parseBorderWidth(bar, maxW, maxH) {\n    const value = bar.options.borderWidth;\n    const skip = bar.borderSkipped;\n    const o = toTRBL(value);\n    return {\n        t: skipOrLimit(skip.top, o.top, 0, maxH),\n        r: skipOrLimit(skip.right, o.right, 0, maxW),\n        b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n        l: skipOrLimit(skip.left, o.left, 0, maxW)\n    };\n}\nfunction parseBorderRadius(bar, maxW, maxH) {\n    const { enableBorderRadius  } = bar.getProps([\n        'enableBorderRadius'\n    ]);\n    const value = bar.options.borderRadius;\n    const o = toTRBLCorners(value);\n    const maxR = Math.min(maxW, maxH);\n    const skip = bar.borderSkipped;\n    const enableBorder = enableBorderRadius || isObject(value);\n    return {\n        topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n        topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n        bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n        bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n    };\n}\nfunction boundingRects(bar) {\n    const bounds = getBarBounds(bar);\n    const width = bounds.right - bounds.left;\n    const height = bounds.bottom - bounds.top;\n    const border = parseBorderWidth(bar, width / 2, height / 2);\n    const radius = parseBorderRadius(bar, width / 2, height / 2);\n    return {\n        outer: {\n            x: bounds.left,\n            y: bounds.top,\n            w: width,\n            h: height,\n            radius\n        },\n        inner: {\n            x: bounds.left + border.l,\n            y: bounds.top + border.t,\n            w: width - border.l - border.r,\n            h: height - border.t - border.b,\n            radius: {\n                topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n                topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n                bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n                bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))\n            }\n        }\n    };\n}\nfunction inRange(bar, x, y, useFinalPosition) {\n    const skipX = x === null;\n    const skipY = y === null;\n    const skipBoth = skipX && skipY;\n    const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n    return bounds && (skipX || _isBetween(x, bounds.left, bounds.right)) && (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\nfunction hasRadius(radius) {\n    return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n function addNormalRectPath(ctx, rect) {\n    ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\nfunction inflateRect(rect, amount, refRect = {}) {\n    const x = rect.x !== refRect.x ? -amount : 0;\n    const y = rect.y !== refRect.y ? -amount : 0;\n    const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n    const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n    return {\n        x: rect.x + x,\n        y: rect.y + y,\n        w: rect.w + w,\n        h: rect.h + h,\n        radius: rect.radius\n    };\n}\nclass BarElement extends Element {\n    static id = 'bar';\n static defaults = {\n        borderSkipped: 'start',\n        borderWidth: 0,\n        borderRadius: 0,\n        inflateAmount: 'auto',\n        pointStyle: undefined\n    };\n static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.horizontal = undefined;\n        this.base = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.inflateAmount = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    draw(ctx) {\n        const { inflateAmount , options: { borderColor , backgroundColor  }  } = this;\n        const { inner , outer  } = boundingRects(this);\n        const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n        ctx.save();\n        if (outer.w !== inner.w || outer.h !== inner.h) {\n            ctx.beginPath();\n            addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n            ctx.clip();\n            addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n            ctx.fillStyle = borderColor;\n            ctx.fill('evenodd');\n        }\n        ctx.beginPath();\n        addRectPath(ctx, inflateRect(inner, inflateAmount));\n        ctx.fillStyle = backgroundColor;\n        ctx.fill();\n        ctx.restore();\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        return inRange(this, mouseX, mouseY, useFinalPosition);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return inRange(this, mouseX, null, useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return inRange(this, null, mouseY, useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y , base , horizontal  } =  this.getProps([\n            'x',\n            'y',\n            'base',\n            'horizontal'\n        ], useFinalPosition);\n        return {\n            x: horizontal ? (x + base) / 2 : x,\n            y: horizontal ? y : (y + base) / 2\n        };\n    }\n    getRange(axis) {\n        return axis === 'x' ? this.width / 2 : this.height / 2;\n    }\n}\n\nvar elements = /*#__PURE__*/Object.freeze({\n__proto__: null,\nArcElement: ArcElement,\nBarElement: BarElement,\nLineElement: LineElement,\nPointElement: PointElement\n});\n\nconst BORDER_COLORS = [\n    'rgb(54, 162, 235)',\n    'rgb(255, 99, 132)',\n    'rgb(255, 159, 64)',\n    'rgb(255, 205, 86)',\n    'rgb(75, 192, 192)',\n    'rgb(153, 102, 255)',\n    'rgb(201, 203, 207)' // grey\n];\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map((color)=>color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\nfunction getBorderColor(i) {\n    return BORDER_COLORS[i % BORDER_COLORS.length];\n}\nfunction getBackgroundColor(i) {\n    return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\nfunction colorizeDefaultDataset(dataset, i) {\n    dataset.borderColor = getBorderColor(i);\n    dataset.backgroundColor = getBackgroundColor(i);\n    return ++i;\n}\nfunction colorizeDoughnutDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>getBorderColor(i++));\n    return i;\n}\nfunction colorizePolarAreaDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>getBackgroundColor(i++));\n    return i;\n}\nfunction getColorizer(chart) {\n    let i = 0;\n    return (dataset, datasetIndex)=>{\n        const controller = chart.getDatasetMeta(datasetIndex).controller;\n        if (controller instanceof DoughnutController) {\n            i = colorizeDoughnutDataset(dataset, i);\n        } else if (controller instanceof PolarAreaController) {\n            i = colorizePolarAreaDataset(dataset, i);\n        } else if (controller) {\n            i = colorizeDefaultDataset(dataset, i);\n        }\n    };\n}\nfunction containsColorsDefinitions(descriptors) {\n    let k;\n    for(k in descriptors){\n        if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction containsColorsDefinition(descriptor) {\n    return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\nfunction containsDefaultColorsDefenitions() {\n    return defaults.borderColor !== 'rgba(0,0,0,0.1)' || defaults.backgroundColor !== 'rgba(0,0,0,0.1)';\n}\nvar plugin_colors = {\n    id: 'colors',\n    defaults: {\n        enabled: true,\n        forceOverride: false\n    },\n    beforeLayout (chart, _args, options) {\n        if (!options.enabled) {\n            return;\n        }\n        const { data: { datasets  } , options: chartOptions  } = chart.config;\n        const { elements  } = chartOptions;\n        const containsColorDefenition = containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements && containsColorsDefinitions(elements) || containsDefaultColorsDefenitions();\n        if (!options.forceOverride && containsColorDefenition) {\n            return;\n        }\n        const colorizer = getColorizer(chart);\n        datasets.forEach(colorizer);\n    }\n};\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n const samples = options.samples || availableWidth;\n    if (samples >= count) {\n        return data.slice(start, start + count);\n    }\n    const decimated = [];\n    const bucketWidth = (count - 2) / (samples - 2);\n    let sampledIndex = 0;\n    const endIndex = start + count - 1;\n    let a = start;\n    let i, maxAreaPoint, maxArea, area, nextA;\n    decimated[sampledIndex++] = data[a];\n    for(i = 0; i < samples - 2; i++){\n        let avgX = 0;\n        let avgY = 0;\n        let j;\n        const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n        const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n        const avgRangeLength = avgRangeEnd - avgRangeStart;\n        for(j = avgRangeStart; j < avgRangeEnd; j++){\n            avgX += data[j].x;\n            avgY += data[j].y;\n        }\n        avgX /= avgRangeLength;\n        avgY /= avgRangeLength;\n        const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n        const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n        const { x: pointAx , y: pointAy  } = data[a];\n        maxArea = area = -1;\n        for(j = rangeOffs; j < rangeTo; j++){\n            area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));\n            if (area > maxArea) {\n                maxArea = area;\n                maxAreaPoint = data[j];\n                nextA = j;\n            }\n        }\n        decimated[sampledIndex++] = maxAreaPoint;\n        a = nextA;\n    }\n    decimated[sampledIndex++] = data[endIndex];\n    return decimated;\n}\nfunction minMaxDecimation(data, start, count, availableWidth) {\n    let avgX = 0;\n    let countX = 0;\n    let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n    const decimated = [];\n    const endIndex = start + count - 1;\n    const xMin = data[start].x;\n    const xMax = data[endIndex].x;\n    const dx = xMax - xMin;\n    for(i = start; i < start + count; ++i){\n        point = data[i];\n        x = (point.x - xMin) / dx * availableWidth;\n        y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) {\n                minY = y;\n                minIndex = i;\n            } else if (y > maxY) {\n                maxY = y;\n                maxIndex = i;\n            }\n            avgX = (countX * avgX + point.x) / ++countX;\n        } else {\n            const lastIndex = i - 1;\n            if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n                const intermediateIndex1 = Math.min(minIndex, maxIndex);\n                const intermediateIndex2 = Math.max(minIndex, maxIndex);\n                if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n                    decimated.push({\n                        ...data[intermediateIndex1],\n                        x: avgX\n                    });\n                }\n                if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n                    decimated.push({\n                        ...data[intermediateIndex2],\n                        x: avgX\n                    });\n                }\n            }\n            if (i > 0 && lastIndex !== startIndex) {\n                decimated.push(data[lastIndex]);\n            }\n            decimated.push(point);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n            minIndex = maxIndex = startIndex = i;\n        }\n    }\n    return decimated;\n}\nfunction cleanDecimatedDataset(dataset) {\n    if (dataset._decimated) {\n        const data = dataset._data;\n        delete dataset._decimated;\n        delete dataset._data;\n        Object.defineProperty(dataset, 'data', {\n            configurable: true,\n            enumerable: true,\n            writable: true,\n            value: data\n        });\n    }\n}\nfunction cleanDecimatedData(chart) {\n    chart.data.datasets.forEach((dataset)=>{\n        cleanDecimatedDataset(dataset);\n    });\n}\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n    const pointCount = points.length;\n    let start = 0;\n    let count;\n    const { iScale  } = meta;\n    const { min , max , minDefined , maxDefined  } = iScale.getUserBounds();\n    if (minDefined) {\n        start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n    }\n    if (maxDefined) {\n        count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n    } else {\n        count = pointCount - start;\n    }\n    return {\n        start,\n        count\n    };\n}\nvar plugin_decimation = {\n    id: 'decimation',\n    defaults: {\n        algorithm: 'min-max',\n        enabled: false\n    },\n    beforeElementsUpdate: (chart, args, options)=>{\n        if (!options.enabled) {\n            cleanDecimatedData(chart);\n            return;\n        }\n        const availableWidth = chart.width;\n        chart.data.datasets.forEach((dataset, datasetIndex)=>{\n            const { _data , indexAxis  } = dataset;\n            const meta = chart.getDatasetMeta(datasetIndex);\n            const data = _data || dataset.data;\n            if (resolve([\n                indexAxis,\n                chart.options.indexAxis\n            ]) === 'y') {\n                return;\n            }\n            if (!meta.controller.supportsDecimation) {\n                return;\n            }\n            const xAxis = chart.scales[meta.xAxisID];\n            if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n                return;\n            }\n            if (chart.options.parsing) {\n                return;\n            }\n            let { start , count  } = getStartAndCountOfVisiblePointsSimplified(meta, data);\n            const threshold = options.threshold || 4 * availableWidth;\n            if (count <= threshold) {\n                cleanDecimatedDataset(dataset);\n                return;\n            }\n            if (isNullOrUndef(_data)) {\n                dataset._data = data;\n                delete dataset.data;\n                Object.defineProperty(dataset, 'data', {\n                    configurable: true,\n                    enumerable: true,\n                    get: function() {\n                        return this._decimated;\n                    },\n                    set: function(d) {\n                        this._data = d;\n                    }\n                });\n            }\n            let decimated;\n            switch(options.algorithm){\n                case 'lttb':\n                    decimated = lttbDecimation(data, start, count, availableWidth, options);\n                    break;\n                case 'min-max':\n                    decimated = minMaxDecimation(data, start, count, availableWidth);\n                    break;\n                default:\n                    throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n            }\n            dataset._decimated = decimated;\n        });\n    },\n    destroy (chart) {\n        cleanDecimatedData(chart);\n    }\n};\n\nfunction _segments(line, target, property) {\n    const segments = line.segments;\n    const points = line.points;\n    const tpoints = target.points;\n    const parts = [];\n    for (const segment of segments){\n        let { start , end  } = segment;\n        end = _findSegmentEnd(start, end, points);\n        const bounds = _getBounds(property, points[start], points[end], segment.loop);\n        if (!target.segments) {\n            parts.push({\n                source: segment,\n                target: bounds,\n                start: points[start],\n                end: points[end]\n            });\n            continue;\n        }\n        const targetSegments = _boundSegments(target, bounds);\n        for (const tgt of targetSegments){\n            const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n            const fillSources = _boundSegment(segment, points, subBounds);\n            for (const fillSource of fillSources){\n                parts.push({\n                    source: fillSource,\n                    target: tgt,\n                    start: {\n                        [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n                    },\n                    end: {\n                        [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n                    }\n                });\n            }\n        }\n    }\n    return parts;\n}\nfunction _getBounds(property, first, last, loop) {\n    if (loop) {\n        return;\n    }\n    let start = first[property];\n    let end = last[property];\n    if (property === 'angle') {\n        start = _normalizeAngle(start);\n        end = _normalizeAngle(end);\n    }\n    return {\n        property,\n        start,\n        end\n    };\n}\nfunction _pointsFromSegments(boundary, line) {\n    const { x =null , y =null  } = boundary || {};\n    const linePoints = line.points;\n    const points = [];\n    line.segments.forEach(({ start , end  })=>{\n        end = _findSegmentEnd(start, end, linePoints);\n        const first = linePoints[start];\n        const last = linePoints[end];\n        if (y !== null) {\n            points.push({\n                x: first.x,\n                y\n            });\n            points.push({\n                x: last.x,\n                y\n            });\n        } else if (x !== null) {\n            points.push({\n                x,\n                y: first.y\n            });\n            points.push({\n                x,\n                y: last.y\n            });\n        }\n    });\n    return points;\n}\nfunction _findSegmentEnd(start, end, points) {\n    for(; end > start; end--){\n        const point = points[end];\n        if (!isNaN(point.x) && !isNaN(point.y)) {\n            break;\n        }\n    }\n    return end;\n}\nfunction _getEdge(a, b, prop, fn) {\n    if (a && b) {\n        return fn(a[prop], b[prop]);\n    }\n    return a ? a[prop] : b ? b[prop] : 0;\n}\n\nfunction _createBoundaryLine(boundary, line) {\n    let points = [];\n    let _loop = false;\n    if (isArray(boundary)) {\n        _loop = true;\n        points = boundary;\n    } else {\n        points = _pointsFromSegments(boundary, line);\n    }\n    return points.length ? new LineElement({\n        points,\n        options: {\n            tension: 0\n        },\n        _loop,\n        _fullLoop: _loop\n    }) : null;\n}\nfunction _shouldApplyFill(source) {\n    return source && source.fill !== false;\n}\n\nfunction _resolveTarget(sources, index, propagate) {\n    const source = sources[index];\n    let fill = source.fill;\n    const visited = [\n        index\n    ];\n    let target;\n    if (!propagate) {\n        return fill;\n    }\n    while(fill !== false && visited.indexOf(fill) === -1){\n        if (!isNumberFinite(fill)) {\n            return fill;\n        }\n        target = sources[fill];\n        if (!target) {\n            return false;\n        }\n        if (target.visible) {\n            return fill;\n        }\n        visited.push(fill);\n        fill = target.fill;\n    }\n    return false;\n}\n function _decodeFill(line, index, count) {\n     const fill = parseFillOption(line);\n    if (isObject(fill)) {\n        return isNaN(fill.value) ? false : fill;\n    }\n    let target = parseFloat(fill);\n    if (isNumberFinite(target) && Math.floor(target) === target) {\n        return decodeTargetIndex(fill[0], index, target, count);\n    }\n    return [\n        'origin',\n        'start',\n        'end',\n        'stack',\n        'shape'\n    ].indexOf(fill) >= 0 && fill;\n}\nfunction decodeTargetIndex(firstCh, index, target, count) {\n    if (firstCh === '-' || firstCh === '+') {\n        target = index + target;\n    }\n    if (target === index || target < 0 || target >= count) {\n        return false;\n    }\n    return target;\n}\n function _getTargetPixel(fill, scale) {\n    let pixel = null;\n    if (fill === 'start') {\n        pixel = scale.bottom;\n    } else if (fill === 'end') {\n        pixel = scale.top;\n    } else if (isObject(fill)) {\n        pixel = scale.getPixelForValue(fill.value);\n    } else if (scale.getBasePixel) {\n        pixel = scale.getBasePixel();\n    }\n    return pixel;\n}\n function _getTargetValue(fill, scale, startValue) {\n    let value;\n    if (fill === 'start') {\n        value = startValue;\n    } else if (fill === 'end') {\n        value = scale.options.reverse ? scale.min : scale.max;\n    } else if (isObject(fill)) {\n        value = fill.value;\n    } else {\n        value = scale.getBaseValue();\n    }\n    return value;\n}\n function parseFillOption(line) {\n    const options = line.options;\n    const fillOption = options.fill;\n    let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n    if (fill === undefined) {\n        fill = !!options.backgroundColor;\n    }\n    if (fill === false || fill === null) {\n        return false;\n    }\n    if (fill === true) {\n        return 'origin';\n    }\n    return fill;\n}\n\nfunction _buildStackLine(source) {\n    const { scale , index , line  } = source;\n    const points = [];\n    const segments = line.segments;\n    const sourcePoints = line.points;\n    const linesBelow = getLinesBelow(scale, index);\n    linesBelow.push(_createBoundaryLine({\n        x: null,\n        y: scale.bottom\n    }, line));\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        for(let j = segment.start; j <= segment.end; j++){\n            addPointsBelow(points, sourcePoints[j], linesBelow);\n        }\n    }\n    return new LineElement({\n        points,\n        options: {}\n    });\n}\n function getLinesBelow(scale, index) {\n    const below = [];\n    const metas = scale.getMatchingVisibleMetas('line');\n    for(let i = 0; i < metas.length; i++){\n        const meta = metas[i];\n        if (meta.index === index) {\n            break;\n        }\n        if (!meta.hidden) {\n            below.unshift(meta.dataset);\n        }\n    }\n    return below;\n}\n function addPointsBelow(points, sourcePoint, linesBelow) {\n    const postponed = [];\n    for(let j = 0; j < linesBelow.length; j++){\n        const line = linesBelow[j];\n        const { first , last , point  } = findPoint(line, sourcePoint, 'x');\n        if (!point || first && last) {\n            continue;\n        }\n        if (first) {\n            postponed.unshift(point);\n        } else {\n            points.push(point);\n            if (!last) {\n                break;\n            }\n        }\n    }\n    points.push(...postponed);\n}\n function findPoint(line, sourcePoint, property) {\n    const point = line.interpolate(sourcePoint, property);\n    if (!point) {\n        return {};\n    }\n    const pointValue = point[property];\n    const segments = line.segments;\n    const linePoints = line.points;\n    let first = false;\n    let last = false;\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        const firstValue = linePoints[segment.start][property];\n        const lastValue = linePoints[segment.end][property];\n        if (_isBetween(pointValue, firstValue, lastValue)) {\n            first = pointValue === firstValue;\n            last = pointValue === lastValue;\n            break;\n        }\n    }\n    return {\n        first,\n        last,\n        point\n    };\n}\n\nclass simpleArc {\n    constructor(opts){\n        this.x = opts.x;\n        this.y = opts.y;\n        this.radius = opts.radius;\n    }\n    pathSegment(ctx, bounds, opts) {\n        const { x , y , radius  } = this;\n        bounds = bounds || {\n            start: 0,\n            end: TAU\n        };\n        ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n        return !opts.bounds;\n    }\n    interpolate(point) {\n        const { x , y , radius  } = this;\n        const angle = point.angle;\n        return {\n            x: x + Math.cos(angle) * radius,\n            y: y + Math.sin(angle) * radius,\n            angle\n        };\n    }\n}\n\nfunction _getTarget(source) {\n    const { chart , fill , line  } = source;\n    if (isNumberFinite(fill)) {\n        return getLineByIndex(chart, fill);\n    }\n    if (fill === 'stack') {\n        return _buildStackLine(source);\n    }\n    if (fill === 'shape') {\n        return true;\n    }\n    const boundary = computeBoundary(source);\n    if (boundary instanceof simpleArc) {\n        return boundary;\n    }\n    return _createBoundaryLine(boundary, line);\n}\n function getLineByIndex(chart, index) {\n    const meta = chart.getDatasetMeta(index);\n    const visible = meta && chart.isDatasetVisible(index);\n    return visible ? meta.dataset : null;\n}\nfunction computeBoundary(source) {\n    const scale = source.scale || {};\n    if (scale.getPointPositionForValue) {\n        return computeCircularBoundary(source);\n    }\n    return computeLinearBoundary(source);\n}\nfunction computeLinearBoundary(source) {\n    const { scale ={} , fill  } = source;\n    const pixel = _getTargetPixel(fill, scale);\n    if (isNumberFinite(pixel)) {\n        const horizontal = scale.isHorizontal();\n        return {\n            x: horizontal ? pixel : null,\n            y: horizontal ? null : pixel\n        };\n    }\n    return null;\n}\nfunction computeCircularBoundary(source) {\n    const { scale , fill  } = source;\n    const options = scale.options;\n    const length = scale.getLabels().length;\n    const start = options.reverse ? scale.max : scale.min;\n    const value = _getTargetValue(fill, scale, start);\n    const target = [];\n    if (options.grid.circular) {\n        const center = scale.getPointPositionForValue(0, start);\n        return new simpleArc({\n            x: center.x,\n            y: center.y,\n            radius: scale.getDistanceFromCenterForValue(value)\n        });\n    }\n    for(let i = 0; i < length; ++i){\n        target.push(scale.getPointPositionForValue(i, value));\n    }\n    return target;\n}\n\nfunction _drawfill(ctx, source, area) {\n    const target = _getTarget(source);\n    const { chart , index , line , scale , axis  } = source;\n    const lineOpts = line.options;\n    const fillOption = lineOpts.fill;\n    const color = lineOpts.backgroundColor;\n    const { above =color , below =color  } = fillOption || {};\n    const meta = chart.getDatasetMeta(index);\n    const clip = getDatasetClipArea(chart, meta);\n    if (target && line.points.length) {\n        clipArea(ctx, area);\n        doFill(ctx, {\n            line,\n            target,\n            above,\n            below,\n            area,\n            scale,\n            axis,\n            clip\n        });\n        unclipArea(ctx);\n    }\n}\nfunction doFill(ctx, cfg) {\n    const { line , target , above , below , area , scale , clip  } = cfg;\n    const property = line._loop ? 'angle' : cfg.axis;\n    ctx.save();\n    let fillColor = below;\n    if (below !== above) {\n        if (property === 'x') {\n            clipVertical(ctx, target, area.top);\n            fill(ctx, {\n                line,\n                target,\n                color: above,\n                scale,\n                property,\n                clip\n            });\n            ctx.restore();\n            ctx.save();\n            clipVertical(ctx, target, area.bottom);\n        } else if (property === 'y') {\n            clipHorizontal(ctx, target, area.left);\n            fill(ctx, {\n                line,\n                target,\n                color: below,\n                scale,\n                property,\n                clip\n            });\n            ctx.restore();\n            ctx.save();\n            clipHorizontal(ctx, target, area.right);\n            fillColor = above;\n        }\n    }\n    fill(ctx, {\n        line,\n        target,\n        color: fillColor,\n        scale,\n        property,\n        clip\n    });\n    ctx.restore();\n}\nfunction clipVertical(ctx, target, clipY) {\n    const { segments , points  } = target;\n    let first = true;\n    let lineLoop = false;\n    ctx.beginPath();\n    for (const segment of segments){\n        const { start , end  } = segment;\n        const firstPoint = points[start];\n        const lastPoint = points[_findSegmentEnd(start, end, points)];\n        if (first) {\n            ctx.moveTo(firstPoint.x, firstPoint.y);\n            first = false;\n        } else {\n            ctx.lineTo(firstPoint.x, clipY);\n            ctx.lineTo(firstPoint.x, firstPoint.y);\n        }\n        lineLoop = !!target.pathSegment(ctx, segment, {\n            move: lineLoop\n        });\n        if (lineLoop) {\n            ctx.closePath();\n        } else {\n            ctx.lineTo(lastPoint.x, clipY);\n        }\n    }\n    ctx.lineTo(target.first().x, clipY);\n    ctx.closePath();\n    ctx.clip();\n}\nfunction clipHorizontal(ctx, target, clipX) {\n    const { segments , points  } = target;\n    let first = true;\n    let lineLoop = false;\n    ctx.beginPath();\n    for (const segment of segments){\n        const { start , end  } = segment;\n        const firstPoint = points[start];\n        const lastPoint = points[_findSegmentEnd(start, end, points)];\n        if (first) {\n            ctx.moveTo(firstPoint.x, firstPoint.y);\n            first = false;\n        } else {\n            ctx.lineTo(clipX, firstPoint.y);\n            ctx.lineTo(firstPoint.x, firstPoint.y);\n        }\n        lineLoop = !!target.pathSegment(ctx, segment, {\n            move: lineLoop\n        });\n        if (lineLoop) {\n            ctx.closePath();\n        } else {\n            ctx.lineTo(clipX, lastPoint.y);\n        }\n    }\n    ctx.lineTo(clipX, target.first().y);\n    ctx.closePath();\n    ctx.clip();\n}\nfunction fill(ctx, cfg) {\n    const { line , target , property , color , scale , clip  } = cfg;\n    const segments = _segments(line, target, property);\n    for (const { source: src , target: tgt , start , end  } of segments){\n        const { style: { backgroundColor =color  } = {}  } = src;\n        const notShape = target !== true;\n        ctx.save();\n        ctx.fillStyle = backgroundColor;\n        clipBounds(ctx, scale, clip, notShape && _getBounds(property, start, end));\n        ctx.beginPath();\n        const lineLoop = !!line.pathSegment(ctx, src);\n        let loop;\n        if (notShape) {\n            if (lineLoop) {\n                ctx.closePath();\n            } else {\n                interpolatedLineTo(ctx, target, end, property);\n            }\n            const targetLoop = !!target.pathSegment(ctx, tgt, {\n                move: lineLoop,\n                reverse: true\n            });\n            loop = lineLoop && targetLoop;\n            if (!loop) {\n                interpolatedLineTo(ctx, target, start, property);\n            }\n        }\n        ctx.closePath();\n        ctx.fill(loop ? 'evenodd' : 'nonzero');\n        ctx.restore();\n    }\n}\nfunction clipBounds(ctx, scale, clip, bounds) {\n    const chartArea = scale.chart.chartArea;\n    const { property , start , end  } = bounds || {};\n    if (property === 'x' || property === 'y') {\n        let left, top, right, bottom;\n        if (property === 'x') {\n            left = start;\n            top = chartArea.top;\n            right = end;\n            bottom = chartArea.bottom;\n        } else {\n            left = chartArea.left;\n            top = start;\n            right = chartArea.right;\n            bottom = end;\n        }\n        ctx.beginPath();\n        if (clip) {\n            left = Math.max(left, clip.left);\n            right = Math.min(right, clip.right);\n            top = Math.max(top, clip.top);\n            bottom = Math.min(bottom, clip.bottom);\n        }\n        ctx.rect(left, top, right - left, bottom - top);\n        ctx.clip();\n    }\n}\nfunction interpolatedLineTo(ctx, target, point, property) {\n    const interpolatedPoint = target.interpolate(point, property);\n    if (interpolatedPoint) {\n        ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n    }\n}\n\nvar index = {\n    id: 'filler',\n    afterDatasetsUpdate (chart, _args, options) {\n        const count = (chart.data.datasets || []).length;\n        const sources = [];\n        let meta, i, line, source;\n        for(i = 0; i < count; ++i){\n            meta = chart.getDatasetMeta(i);\n            line = meta.dataset;\n            source = null;\n            if (line && line.options && line instanceof LineElement) {\n                source = {\n                    visible: chart.isDatasetVisible(i),\n                    index: i,\n                    fill: _decodeFill(line, i, count),\n                    chart,\n                    axis: meta.controller.options.indexAxis,\n                    scale: meta.vScale,\n                    line\n                };\n            }\n            meta.$filler = source;\n            sources.push(source);\n        }\n        for(i = 0; i < count; ++i){\n            source = sources[i];\n            if (!source || source.fill === false) {\n                continue;\n            }\n            source.fill = _resolveTarget(sources, i, options.propagate);\n        }\n    },\n    beforeDraw (chart, _args, options) {\n        const draw = options.drawTime === 'beforeDraw';\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        const area = chart.chartArea;\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if (!source) {\n                continue;\n            }\n            source.line.updateControlPoints(area, source.axis);\n            if (draw && source.fill) {\n                _drawfill(chart.ctx, source, area);\n            }\n        }\n    },\n    beforeDatasetsDraw (chart, _args, options) {\n        if (options.drawTime !== 'beforeDatasetsDraw') {\n            return;\n        }\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if (_shouldApplyFill(source)) {\n                _drawfill(chart.ctx, source, chart.chartArea);\n            }\n        }\n    },\n    beforeDatasetDraw (chart, args, options) {\n        const source = args.meta.$filler;\n        if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n            return;\n        }\n        _drawfill(chart.ctx, source, chart.chartArea);\n    },\n    defaults: {\n        propagate: true,\n        drawTime: 'beforeDatasetDraw'\n    }\n};\n\nconst getBoxSize = (labelOpts, fontSize)=>{\n    let { boxHeight =fontSize , boxWidth =fontSize  } = labelOpts;\n    if (labelOpts.usePointStyle) {\n        boxHeight = Math.min(boxHeight, fontSize);\n        boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n    }\n    return {\n        boxWidth,\n        boxHeight,\n        itemHeight: Math.max(fontSize, boxHeight)\n    };\n};\nconst itemsEqual = (a, b)=>a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\nclass Legend extends Element {\n constructor(config){\n        super();\n        this._added = false;\n        this.legendHitBoxes = [];\n this._hoveredItem = null;\n        this.doughnutMode = false;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this.legendItems = undefined;\n        this.columnSizes = undefined;\n        this.lineWidths = undefined;\n        this.maxHeight = undefined;\n        this.maxWidth = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this._margins = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight, margins) {\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins;\n        this.setDimensions();\n        this.buildLabels();\n        this.fit();\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = this._margins.left;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = this._margins.top;\n            this.bottom = this.height;\n        }\n    }\n    buildLabels() {\n        const labelOpts = this.options.labels || {};\n        let legendItems = callback(labelOpts.generateLabels, [\n            this.chart\n        ], this) || [];\n        if (labelOpts.filter) {\n            legendItems = legendItems.filter((item)=>labelOpts.filter(item, this.chart.data));\n        }\n        if (labelOpts.sort) {\n            legendItems = legendItems.sort((a, b)=>labelOpts.sort(a, b, this.chart.data));\n        }\n        if (this.options.reverse) {\n            legendItems.reverse();\n        }\n        this.legendItems = legendItems;\n    }\n    fit() {\n        const { options , ctx  } = this;\n        if (!options.display) {\n            this.width = this.height = 0;\n            return;\n        }\n        const labelOpts = options.labels;\n        const labelFont = toFont(labelOpts.font);\n        const fontSize = labelFont.size;\n        const titleHeight = this._computeTitleHeight();\n        const { boxWidth , itemHeight  } = getBoxSize(labelOpts, fontSize);\n        let width, height;\n        ctx.font = labelFont.string;\n        if (this.isHorizontal()) {\n            width = this.maxWidth;\n            height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n        } else {\n            height = this.maxHeight;\n            width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n        }\n        this.width = Math.min(width, options.maxWidth || this.maxWidth);\n        this.height = Math.min(height, options.maxHeight || this.maxHeight);\n    }\n _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n        const { ctx , maxWidth , options: { labels: { padding  }  }  } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const lineWidths = this.lineWidths = [\n            0\n        ];\n        const lineHeight = itemHeight + padding;\n        let totalHeight = titleHeight;\n        ctx.textAlign = 'left';\n        ctx.textBaseline = 'middle';\n        let row = -1;\n        let top = -lineHeight;\n        this.legendItems.forEach((legendItem, i)=>{\n            const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n            if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n                totalHeight += lineHeight;\n                lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n                top += lineHeight;\n                row++;\n            }\n            hitboxes[i] = {\n                left: 0,\n                top,\n                row,\n                width: itemWidth,\n                height: itemHeight\n            };\n            lineWidths[lineWidths.length - 1] += itemWidth + padding;\n        });\n        return totalHeight;\n    }\n    _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n        const { ctx , maxHeight , options: { labels: { padding  }  }  } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const columnSizes = this.columnSizes = [];\n        const heightLimit = maxHeight - titleHeight;\n        let totalWidth = padding;\n        let currentColWidth = 0;\n        let currentColHeight = 0;\n        let left = 0;\n        let col = 0;\n        this.legendItems.forEach((legendItem, i)=>{\n            const { itemWidth , itemHeight  } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n            if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n                totalWidth += currentColWidth + padding;\n                columnSizes.push({\n                    width: currentColWidth,\n                    height: currentColHeight\n                });\n                left += currentColWidth + padding;\n                col++;\n                currentColWidth = currentColHeight = 0;\n            }\n            hitboxes[i] = {\n                left,\n                top: currentColHeight,\n                col,\n                width: itemWidth,\n                height: itemHeight\n            };\n            currentColWidth = Math.max(currentColWidth, itemWidth);\n            currentColHeight += itemHeight + padding;\n        });\n        totalWidth += currentColWidth;\n        columnSizes.push({\n            width: currentColWidth,\n            height: currentColHeight\n        });\n        return totalWidth;\n    }\n    adjustHitBoxes() {\n        if (!this.options.display) {\n            return;\n        }\n        const titleHeight = this._computeTitleHeight();\n        const { legendHitBoxes: hitboxes , options: { align , labels: { padding  } , rtl  }  } = this;\n        const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n        if (this.isHorizontal()) {\n            let row = 0;\n            let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n            for (const hitbox of hitboxes){\n                if (row !== hitbox.row) {\n                    row = hitbox.row;\n                    left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n                }\n                hitbox.top += this.top + titleHeight + padding;\n                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n                left += hitbox.width + padding;\n            }\n        } else {\n            let col = 0;\n            let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n            for (const hitbox of hitboxes){\n                if (hitbox.col !== col) {\n                    col = hitbox.col;\n                    top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n                }\n                hitbox.top = top;\n                hitbox.left += this.left + padding;\n                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n                top += hitbox.height + padding;\n            }\n        }\n    }\n    isHorizontal() {\n        return this.options.position === 'top' || this.options.position === 'bottom';\n    }\n    draw() {\n        if (this.options.display) {\n            const ctx = this.ctx;\n            clipArea(ctx, this);\n            this._draw();\n            unclipArea(ctx);\n        }\n    }\n _draw() {\n        const { options: opts , columnSizes , lineWidths , ctx  } = this;\n        const { align , labels: labelOpts  } = opts;\n        const defaultColor = defaults.color;\n        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n        const labelFont = toFont(labelOpts.font);\n        const { padding  } = labelOpts;\n        const fontSize = labelFont.size;\n        const halfFontSize = fontSize / 2;\n        let cursor;\n        this.drawTitle();\n        ctx.textAlign = rtlHelper.textAlign('left');\n        ctx.textBaseline = 'middle';\n        ctx.lineWidth = 0.5;\n        ctx.font = labelFont.string;\n        const { boxWidth , boxHeight , itemHeight  } = getBoxSize(labelOpts, fontSize);\n        const drawLegendBox = function(x, y, legendItem) {\n            if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n                return;\n            }\n            ctx.save();\n            const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n            ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n            ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n            ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n            ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n            ctx.lineWidth = lineWidth;\n            ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n            ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n            if (labelOpts.usePointStyle) {\n                const drawOptions = {\n                    radius: boxHeight * Math.SQRT2 / 2,\n                    pointStyle: legendItem.pointStyle,\n                    rotation: legendItem.rotation,\n                    borderWidth: lineWidth\n                };\n                const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n                const centerY = y + halfFontSize;\n                drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n            } else {\n                const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n                const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n                const borderRadius = toTRBLCorners(legendItem.borderRadius);\n                ctx.beginPath();\n                if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                    addRoundedRectPath(ctx, {\n                        x: xBoxLeft,\n                        y: yBoxTop,\n                        w: boxWidth,\n                        h: boxHeight,\n                        radius: borderRadius\n                    });\n                } else {\n                    ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n                }\n                ctx.fill();\n                if (lineWidth !== 0) {\n                    ctx.stroke();\n                }\n            }\n            ctx.restore();\n        };\n        const fillText = function(x, y, legendItem) {\n            renderText(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {\n                strikethrough: legendItem.hidden,\n                textAlign: rtlHelper.textAlign(legendItem.textAlign)\n            });\n        };\n        const isHorizontal = this.isHorizontal();\n        const titleHeight = this._computeTitleHeight();\n        if (isHorizontal) {\n            cursor = {\n                x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n                y: this.top + padding + titleHeight,\n                line: 0\n            };\n        } else {\n            cursor = {\n                x: this.left + padding,\n                y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n                line: 0\n            };\n        }\n        overrideTextDirection(this.ctx, opts.textDirection);\n        const lineHeight = itemHeight + padding;\n        this.legendItems.forEach((legendItem, i)=>{\n            ctx.strokeStyle = legendItem.fontColor;\n            ctx.fillStyle = legendItem.fontColor;\n            const textWidth = ctx.measureText(legendItem.text).width;\n            const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n            const width = boxWidth + halfFontSize + textWidth;\n            let x = cursor.x;\n            let y = cursor.y;\n            rtlHelper.setWidth(this.width);\n            if (isHorizontal) {\n                if (i > 0 && x + width + padding > this.right) {\n                    y = cursor.y += lineHeight;\n                    cursor.line++;\n                    x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n                }\n            } else if (i > 0 && y + lineHeight > this.bottom) {\n                x = cursor.x = x + columnSizes[cursor.line].width + padding;\n                cursor.line++;\n                y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n            }\n            const realX = rtlHelper.x(x);\n            drawLegendBox(realX, y, legendItem);\n            x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n            fillText(rtlHelper.x(x), y, legendItem);\n            if (isHorizontal) {\n                cursor.x += width + padding;\n            } else if (typeof legendItem.text !== 'string') {\n                const fontLineHeight = labelFont.lineHeight;\n                cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;\n            } else {\n                cursor.y += lineHeight;\n            }\n        });\n        restoreTextDirection(this.ctx, opts.textDirection);\n    }\n drawTitle() {\n        const opts = this.options;\n        const titleOpts = opts.title;\n        const titleFont = toFont(titleOpts.font);\n        const titlePadding = toPadding(titleOpts.padding);\n        if (!titleOpts.display) {\n            return;\n        }\n        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n        const ctx = this.ctx;\n        const position = titleOpts.position;\n        const halfFontSize = titleFont.size / 2;\n        const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n        let y;\n        let left = this.left;\n        let maxWidth = this.width;\n        if (this.isHorizontal()) {\n            maxWidth = Math.max(...this.lineWidths);\n            y = this.top + topPaddingPlusHalfFontSize;\n            left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n        } else {\n            const maxHeight = this.columnSizes.reduce((acc, size)=>Math.max(acc, size.height), 0);\n            y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n        }\n        const x = _alignStartEnd(position, left, left + maxWidth);\n        ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n        ctx.textBaseline = 'middle';\n        ctx.strokeStyle = titleOpts.color;\n        ctx.fillStyle = titleOpts.color;\n        ctx.font = titleFont.string;\n        renderText(ctx, titleOpts.text, x, y, titleFont);\n    }\n _computeTitleHeight() {\n        const titleOpts = this.options.title;\n        const titleFont = toFont(titleOpts.font);\n        const titlePadding = toPadding(titleOpts.padding);\n        return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n    }\n _getLegendItemAt(x, y) {\n        let i, hitBox, lh;\n        if (_isBetween(x, this.left, this.right) && _isBetween(y, this.top, this.bottom)) {\n            lh = this.legendHitBoxes;\n            for(i = 0; i < lh.length; ++i){\n                hitBox = lh[i];\n                if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n                    return this.legendItems[i];\n                }\n            }\n        }\n        return null;\n    }\n handleEvent(e) {\n        const opts = this.options;\n        if (!isListened(e.type, opts)) {\n            return;\n        }\n        const hoveredItem = this._getLegendItemAt(e.x, e.y);\n        if (e.type === 'mousemove' || e.type === 'mouseout') {\n            const previous = this._hoveredItem;\n            const sameItem = itemsEqual(previous, hoveredItem);\n            if (previous && !sameItem) {\n                callback(opts.onLeave, [\n                    e,\n                    previous,\n                    this\n                ], this);\n            }\n            this._hoveredItem = hoveredItem;\n            if (hoveredItem && !sameItem) {\n                callback(opts.onHover, [\n                    e,\n                    hoveredItem,\n                    this\n                ], this);\n            }\n        } else if (hoveredItem) {\n            callback(opts.onClick, [\n                e,\n                hoveredItem,\n                this\n            ], this);\n        }\n    }\n}\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n    const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n    const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n    return {\n        itemWidth,\n        itemHeight\n    };\n}\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n    let legendItemText = legendItem.text;\n    if (legendItemText && typeof legendItemText !== 'string') {\n        legendItemText = legendItemText.reduce((a, b)=>a.length > b.length ? a : b);\n    }\n    return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;\n}\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n    let itemHeight = _itemHeight;\n    if (typeof legendItem.text !== 'string') {\n        itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n    }\n    return itemHeight;\n}\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n    const labelHeight = legendItem.text ? legendItem.text.length : 0;\n    return fontLineHeight * labelHeight;\n}\nfunction isListened(type, opts) {\n    if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n        return true;\n    }\n    if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n        return true;\n    }\n    return false;\n}\nvar plugin_legend = {\n    id: 'legend',\n _element: Legend,\n    start (chart, _args, options) {\n        const legend = chart.legend = new Legend({\n            ctx: chart.ctx,\n            options,\n            chart\n        });\n        layouts.configure(chart, legend, options);\n        layouts.addBox(chart, legend);\n    },\n    stop (chart) {\n        layouts.removeBox(chart, chart.legend);\n        delete chart.legend;\n    },\n    beforeUpdate (chart, _args, options) {\n        const legend = chart.legend;\n        layouts.configure(chart, legend, options);\n        legend.options = options;\n    },\n    afterUpdate (chart) {\n        const legend = chart.legend;\n        legend.buildLabels();\n        legend.adjustHitBoxes();\n    },\n    afterEvent (chart, args) {\n        if (!args.replay) {\n            chart.legend.handleEvent(args.event);\n        }\n    },\n    defaults: {\n        display: true,\n        position: 'top',\n        align: 'center',\n        fullSize: true,\n        reverse: false,\n        weight: 1000,\n        onClick (e, legendItem, legend) {\n            const index = legendItem.datasetIndex;\n            const ci = legend.chart;\n            if (ci.isDatasetVisible(index)) {\n                ci.hide(index);\n                legendItem.hidden = true;\n            } else {\n                ci.show(index);\n                legendItem.hidden = false;\n            }\n        },\n        onHover: null,\n        onLeave: null,\n        labels: {\n            color: (ctx)=>ctx.chart.options.color,\n            boxWidth: 40,\n            padding: 10,\n            generateLabels (chart) {\n                const datasets = chart.data.datasets;\n                const { labels: { usePointStyle , pointStyle , textAlign , color , useBorderRadius , borderRadius  }  } = chart.legend.options;\n                return chart._getSortedDatasetMetas().map((meta)=>{\n                    const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n                    const borderWidth = toPadding(style.borderWidth);\n                    return {\n                        text: datasets[meta.index].label,\n                        fillStyle: style.backgroundColor,\n                        fontColor: color,\n                        hidden: !meta.visible,\n                        lineCap: style.borderCapStyle,\n                        lineDash: style.borderDash,\n                        lineDashOffset: style.borderDashOffset,\n                        lineJoin: style.borderJoinStyle,\n                        lineWidth: (borderWidth.width + borderWidth.height) / 4,\n                        strokeStyle: style.borderColor,\n                        pointStyle: pointStyle || style.pointStyle,\n                        rotation: style.rotation,\n                        textAlign: textAlign || style.textAlign,\n                        borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n                        datasetIndex: meta.index\n                    };\n                }, this);\n            }\n        },\n        title: {\n            color: (ctx)=>ctx.chart.options.color,\n            display: false,\n            position: 'center',\n            text: ''\n        }\n    },\n    descriptors: {\n        _scriptable: (name)=>!name.startsWith('on'),\n        labels: {\n            _scriptable: (name)=>![\n                    'generateLabels',\n                    'filter',\n                    'sort'\n                ].includes(name)\n        }\n    }\n};\n\nclass Title extends Element {\n constructor(config){\n        super();\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this._padding = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight) {\n        const opts = this.options;\n        this.left = 0;\n        this.top = 0;\n        if (!opts.display) {\n            this.width = this.height = this.right = this.bottom = 0;\n            return;\n        }\n        this.width = this.right = maxWidth;\n        this.height = this.bottom = maxHeight;\n        const lineCount = isArray(opts.text) ? opts.text.length : 1;\n        this._padding = toPadding(opts.padding);\n        const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n        if (this.isHorizontal()) {\n            this.height = textSize;\n        } else {\n            this.width = textSize;\n        }\n    }\n    isHorizontal() {\n        const pos = this.options.position;\n        return pos === 'top' || pos === 'bottom';\n    }\n    _drawArgs(offset) {\n        const { top , left , bottom , right , options  } = this;\n        const align = options.align;\n        let rotation = 0;\n        let maxWidth, titleX, titleY;\n        if (this.isHorizontal()) {\n            titleX = _alignStartEnd(align, left, right);\n            titleY = top + offset;\n            maxWidth = right - left;\n        } else {\n            if (options.position === 'left') {\n                titleX = left + offset;\n                titleY = _alignStartEnd(align, bottom, top);\n                rotation = PI * -0.5;\n            } else {\n                titleX = right - offset;\n                titleY = _alignStartEnd(align, top, bottom);\n                rotation = PI * 0.5;\n            }\n            maxWidth = bottom - top;\n        }\n        return {\n            titleX,\n            titleY,\n            maxWidth,\n            rotation\n        };\n    }\n    draw() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        if (!opts.display) {\n            return;\n        }\n        const fontOpts = toFont(opts.font);\n        const lineHeight = fontOpts.lineHeight;\n        const offset = lineHeight / 2 + this._padding.top;\n        const { titleX , titleY , maxWidth , rotation  } = this._drawArgs(offset);\n        renderText(ctx, opts.text, 0, 0, fontOpts, {\n            color: opts.color,\n            maxWidth,\n            rotation,\n            textAlign: _toLeftRightCenter(opts.align),\n            textBaseline: 'middle',\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n}\nfunction createTitle(chart, titleOpts) {\n    const title = new Title({\n        ctx: chart.ctx,\n        options: titleOpts,\n        chart\n    });\n    layouts.configure(chart, title, titleOpts);\n    layouts.addBox(chart, title);\n    chart.titleBlock = title;\n}\nvar plugin_title = {\n    id: 'title',\n _element: Title,\n    start (chart, _args, options) {\n        createTitle(chart, options);\n    },\n    stop (chart) {\n        const titleBlock = chart.titleBlock;\n        layouts.removeBox(chart, titleBlock);\n        delete chart.titleBlock;\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = chart.titleBlock;\n        layouts.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: 'center',\n        display: false,\n        font: {\n            weight: 'bold'\n        },\n        fullSize: true,\n        padding: 10,\n        position: 'top',\n        text: '',\n        weight: 2000\n    },\n    defaultRoutes: {\n        color: 'color'\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\n\nconst map = new WeakMap();\nvar plugin_subtitle = {\n    id: 'subtitle',\n    start (chart, _args, options) {\n        const title = new Title({\n            ctx: chart.ctx,\n            options,\n            chart\n        });\n        layouts.configure(chart, title, options);\n        layouts.addBox(chart, title);\n        map.set(chart, title);\n    },\n    stop (chart) {\n        layouts.removeBox(chart, map.get(chart));\n        map.delete(chart);\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = map.get(chart);\n        layouts.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: 'center',\n        display: false,\n        font: {\n            weight: 'normal'\n        },\n        fullSize: true,\n        padding: 0,\n        position: 'top',\n        text: '',\n        weight: 1500\n    },\n    defaultRoutes: {\n        color: 'color'\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\n\nconst positioners = {\n average (items) {\n        if (!items.length) {\n            return false;\n        }\n        let i, len;\n        let xSet = new Set();\n        let y = 0;\n        let count = 0;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const pos = el.tooltipPosition();\n                xSet.add(pos.x);\n                y += pos.y;\n                ++count;\n            }\n        }\n        if (count === 0 || xSet.size === 0) {\n            return false;\n        }\n        const xAverage = [\n            ...xSet\n        ].reduce((a, b)=>a + b) / xSet.size;\n        return {\n            x: xAverage,\n            y: y / count\n        };\n    },\n nearest (items, eventPosition) {\n        if (!items.length) {\n            return false;\n        }\n        let x = eventPosition.x;\n        let y = eventPosition.y;\n        let minDistance = Number.POSITIVE_INFINITY;\n        let i, len, nearestElement;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const center = el.getCenterPoint();\n                const d = distanceBetweenPoints(eventPosition, center);\n                if (d < minDistance) {\n                    minDistance = d;\n                    nearestElement = el;\n                }\n            }\n        }\n        if (nearestElement) {\n            const tp = nearestElement.tooltipPosition();\n            x = tp.x;\n            y = tp.y;\n        }\n        return {\n            x,\n            y\n        };\n    }\n};\nfunction pushOrConcat(base, toPush) {\n    if (toPush) {\n        if (isArray(toPush)) {\n            Array.prototype.push.apply(base, toPush);\n        } else {\n            base.push(toPush);\n        }\n    }\n    return base;\n}\n function splitNewlines(str) {\n    if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n        return str.split('\\n');\n    }\n    return str;\n}\n function createTooltipItem(chart, item) {\n    const { element , datasetIndex , index  } = item;\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n    const { label , value  } = controller.getLabelAndValue(index);\n    return {\n        chart,\n        label,\n        parsed: controller.getParsed(index),\n        raw: chart.data.datasets[datasetIndex].data[index],\n        formattedValue: value,\n        dataset: controller.getDataset(),\n        dataIndex: index,\n        datasetIndex,\n        element\n    };\n}\n function getTooltipSize(tooltip, options) {\n    const ctx = tooltip.chart.ctx;\n    const { body , footer , title  } = tooltip;\n    const { boxWidth , boxHeight  } = options;\n    const bodyFont = toFont(options.bodyFont);\n    const titleFont = toFont(options.titleFont);\n    const footerFont = toFont(options.footerFont);\n    const titleLineCount = title.length;\n    const footerLineCount = footer.length;\n    const bodyLineItemCount = body.length;\n    const padding = toPadding(options.padding);\n    let height = padding.height;\n    let width = 0;\n    let combinedBodyLength = body.reduce((count, bodyItem)=>count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n    combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n    if (titleLineCount) {\n        height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;\n    }\n    if (combinedBodyLength) {\n        const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n        height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;\n    }\n    if (footerLineCount) {\n        height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;\n    }\n    let widthPadding = 0;\n    const maxLineWidth = function(line) {\n        width = Math.max(width, ctx.measureText(line).width + widthPadding);\n    };\n    ctx.save();\n    ctx.font = titleFont.string;\n    each(tooltip.title, maxLineWidth);\n    ctx.font = bodyFont.string;\n    each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n    widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;\n    each(body, (bodyItem)=>{\n        each(bodyItem.before, maxLineWidth);\n        each(bodyItem.lines, maxLineWidth);\n        each(bodyItem.after, maxLineWidth);\n    });\n    widthPadding = 0;\n    ctx.font = footerFont.string;\n    each(tooltip.footer, maxLineWidth);\n    ctx.restore();\n    width += padding.width;\n    return {\n        width,\n        height\n    };\n}\nfunction determineYAlign(chart, size) {\n    const { y , height  } = size;\n    if (y < height / 2) {\n        return 'top';\n    } else if (y > chart.height - height / 2) {\n        return 'bottom';\n    }\n    return 'center';\n}\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n    const { x , width  } = size;\n    const caret = options.caretSize + options.caretPadding;\n    if (xAlign === 'left' && x + width + caret > chart.width) {\n        return true;\n    }\n    if (xAlign === 'right' && x - width - caret < 0) {\n        return true;\n    }\n}\nfunction determineXAlign(chart, options, size, yAlign) {\n    const { x , width  } = size;\n    const { width: chartWidth , chartArea: { left , right  }  } = chart;\n    let xAlign = 'center';\n    if (yAlign === 'center') {\n        xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n    } else if (x <= width / 2) {\n        xAlign = 'left';\n    } else if (x >= chartWidth - width / 2) {\n        xAlign = 'right';\n    }\n    if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n        xAlign = 'center';\n    }\n    return xAlign;\n}\n function determineAlignment(chart, options, size) {\n    const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n    return {\n        xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n        yAlign\n    };\n}\nfunction alignX(size, xAlign) {\n    let { x , width  } = size;\n    if (xAlign === 'right') {\n        x -= width;\n    } else if (xAlign === 'center') {\n        x -= width / 2;\n    }\n    return x;\n}\nfunction alignY(size, yAlign, paddingAndSize) {\n    let { y , height  } = size;\n    if (yAlign === 'top') {\n        y += paddingAndSize;\n    } else if (yAlign === 'bottom') {\n        y -= height + paddingAndSize;\n    } else {\n        y -= height / 2;\n    }\n    return y;\n}\n function getBackgroundPoint(options, size, alignment, chart) {\n    const { caretSize , caretPadding , cornerRadius  } = options;\n    const { xAlign , yAlign  } = alignment;\n    const paddingAndSize = caretSize + caretPadding;\n    const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);\n    let x = alignX(size, xAlign);\n    const y = alignY(size, yAlign, paddingAndSize);\n    if (yAlign === 'center') {\n        if (xAlign === 'left') {\n            x += paddingAndSize;\n        } else if (xAlign === 'right') {\n            x -= paddingAndSize;\n        }\n    } else if (xAlign === 'left') {\n        x -= Math.max(topLeft, bottomLeft) + caretSize;\n    } else if (xAlign === 'right') {\n        x += Math.max(topRight, bottomRight) + caretSize;\n    }\n    return {\n        x: _limitValue(x, 0, chart.width - size.width),\n        y: _limitValue(y, 0, chart.height - size.height)\n    };\n}\nfunction getAlignedX(tooltip, align, options) {\n    const padding = toPadding(options.padding);\n    return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;\n}\n function getBeforeAfterBodyLines(callback) {\n    return pushOrConcat([], splitNewlines(callback));\n}\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n    return createContext(parent, {\n        tooltip,\n        tooltipItems,\n        type: 'tooltip'\n    });\n}\nfunction overrideCallbacks(callbacks, context) {\n    const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n    return override ? callbacks.override(override) : callbacks;\n}\nconst defaultCallbacks = {\n    beforeTitle: noop,\n    title (tooltipItems) {\n        if (tooltipItems.length > 0) {\n            const item = tooltipItems[0];\n            const labels = item.chart.data.labels;\n            const labelCount = labels ? labels.length : 0;\n            if (this && this.options && this.options.mode === 'dataset') {\n                return item.dataset.label || '';\n            } else if (item.label) {\n                return item.label;\n            } else if (labelCount > 0 && item.dataIndex < labelCount) {\n                return labels[item.dataIndex];\n            }\n        }\n        return '';\n    },\n    afterTitle: noop,\n    beforeBody: noop,\n    beforeLabel: noop,\n    label (tooltipItem) {\n        if (this && this.options && this.options.mode === 'dataset') {\n            return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n        }\n        let label = tooltipItem.dataset.label || '';\n        if (label) {\n            label += ': ';\n        }\n        const value = tooltipItem.formattedValue;\n        if (!isNullOrUndef(value)) {\n            label += value;\n        }\n        return label;\n    },\n    labelColor (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            borderColor: options.borderColor,\n            backgroundColor: options.backgroundColor,\n            borderWidth: options.borderWidth,\n            borderDash: options.borderDash,\n            borderDashOffset: options.borderDashOffset,\n            borderRadius: 0\n        };\n    },\n    labelTextColor () {\n        return this.options.bodyColor;\n    },\n    labelPointStyle (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            pointStyle: options.pointStyle,\n            rotation: options.rotation\n        };\n    },\n    afterLabel: noop,\n    afterBody: noop,\n    beforeFooter: noop,\n    footer: noop,\n    afterFooter: noop\n};\n function invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n    const result = callbacks[name].call(ctx, arg);\n    if (typeof result === 'undefined') {\n        return defaultCallbacks[name].call(ctx, arg);\n    }\n    return result;\n}\nclass Tooltip extends Element {\n static positioners = positioners;\n    constructor(config){\n        super();\n        this.opacity = 0;\n        this._active = [];\n        this._eventPosition = undefined;\n        this._size = undefined;\n        this._cachedAnimations = undefined;\n        this._tooltipItems = [];\n        this.$animations = undefined;\n        this.$context = undefined;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.dataPoints = undefined;\n        this.title = undefined;\n        this.beforeBody = undefined;\n        this.body = undefined;\n        this.afterBody = undefined;\n        this.footer = undefined;\n        this.xAlign = undefined;\n        this.yAlign = undefined;\n        this.x = undefined;\n        this.y = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this.caretX = undefined;\n        this.caretY = undefined;\n        this.labelColors = undefined;\n        this.labelPointStyles = undefined;\n        this.labelTextColors = undefined;\n    }\n    initialize(options) {\n        this.options = options;\n        this._cachedAnimations = undefined;\n        this.$context = undefined;\n    }\n _resolveAnimations() {\n        const cached = this._cachedAnimations;\n        if (cached) {\n            return cached;\n        }\n        const chart = this.chart;\n        const options = this.options.setContext(this.getContext());\n        const opts = options.enabled && chart.options.animation && options.animations;\n        const animations = new Animations(this.chart, opts);\n        if (opts._cacheable) {\n            this._cachedAnimations = Object.freeze(animations);\n        }\n        return animations;\n    }\n getContext() {\n        return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n    }\n    getTitle(context, options) {\n        const { callbacks  } = options;\n        const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n        const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n        const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n        let lines = [];\n        lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n        lines = pushOrConcat(lines, splitNewlines(title));\n        lines = pushOrConcat(lines, splitNewlines(afterTitle));\n        return lines;\n    }\n    getBeforeBody(tooltipItems, options) {\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));\n    }\n    getBody(tooltipItems, options) {\n        const { callbacks  } = options;\n        const bodyItems = [];\n        each(tooltipItems, (context)=>{\n            const bodyItem = {\n                before: [],\n                lines: [],\n                after: []\n            };\n            const scoped = overrideCallbacks(callbacks, context);\n            pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n            pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n            pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n            bodyItems.push(bodyItem);\n        });\n        return bodyItems;\n    }\n    getAfterBody(tooltipItems, options) {\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));\n    }\n    getFooter(tooltipItems, options) {\n        const { callbacks  } = options;\n        const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n        const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n        const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n        let lines = [];\n        lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n        lines = pushOrConcat(lines, splitNewlines(footer));\n        lines = pushOrConcat(lines, splitNewlines(afterFooter));\n        return lines;\n    }\n _createItems(options) {\n        const active = this._active;\n        const data = this.chart.data;\n        const labelColors = [];\n        const labelPointStyles = [];\n        const labelTextColors = [];\n        let tooltipItems = [];\n        let i, len;\n        for(i = 0, len = active.length; i < len; ++i){\n            tooltipItems.push(createTooltipItem(this.chart, active[i]));\n        }\n        if (options.filter) {\n            tooltipItems = tooltipItems.filter((element, index, array)=>options.filter(element, index, array, data));\n        }\n        if (options.itemSort) {\n            tooltipItems = tooltipItems.sort((a, b)=>options.itemSort(a, b, data));\n        }\n        each(tooltipItems, (context)=>{\n            const scoped = overrideCallbacks(options.callbacks, context);\n            labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n            labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n            labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n        });\n        this.labelColors = labelColors;\n        this.labelPointStyles = labelPointStyles;\n        this.labelTextColors = labelTextColors;\n        this.dataPoints = tooltipItems;\n        return tooltipItems;\n    }\n    update(changed, replay) {\n        const options = this.options.setContext(this.getContext());\n        const active = this._active;\n        let properties;\n        let tooltipItems = [];\n        if (!active.length) {\n            if (this.opacity !== 0) {\n                properties = {\n                    opacity: 0\n                };\n            }\n        } else {\n            const position = positioners[options.position].call(this, active, this._eventPosition);\n            tooltipItems = this._createItems(options);\n            this.title = this.getTitle(tooltipItems, options);\n            this.beforeBody = this.getBeforeBody(tooltipItems, options);\n            this.body = this.getBody(tooltipItems, options);\n            this.afterBody = this.getAfterBody(tooltipItems, options);\n            this.footer = this.getFooter(tooltipItems, options);\n            const size = this._size = getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, size);\n            const alignment = determineAlignment(this.chart, options, positionAndSize);\n            const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n            this.xAlign = alignment.xAlign;\n            this.yAlign = alignment.yAlign;\n            properties = {\n                opacity: 1,\n                x: backgroundPoint.x,\n                y: backgroundPoint.y,\n                width: size.width,\n                height: size.height,\n                caretX: position.x,\n                caretY: position.y\n            };\n        }\n        this._tooltipItems = tooltipItems;\n        this.$context = undefined;\n        if (properties) {\n            this._resolveAnimations().update(this, properties);\n        }\n        if (changed && options.external) {\n            options.external.call(this, {\n                chart: this.chart,\n                tooltip: this,\n                replay\n            });\n        }\n    }\n    drawCaret(tooltipPoint, ctx, size, options) {\n        const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n        ctx.lineTo(caretPosition.x1, caretPosition.y1);\n        ctx.lineTo(caretPosition.x2, caretPosition.y2);\n        ctx.lineTo(caretPosition.x3, caretPosition.y3);\n    }\n    getCaretPosition(tooltipPoint, size, options) {\n        const { xAlign , yAlign  } = this;\n        const { caretSize , cornerRadius  } = options;\n        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);\n        const { x: ptX , y: ptY  } = tooltipPoint;\n        const { width , height  } = size;\n        let x1, x2, x3, y1, y2, y3;\n        if (yAlign === 'center') {\n            y2 = ptY + height / 2;\n            if (xAlign === 'left') {\n                x1 = ptX;\n                x2 = x1 - caretSize;\n                y1 = y2 + caretSize;\n                y3 = y2 - caretSize;\n            } else {\n                x1 = ptX + width;\n                x2 = x1 + caretSize;\n                y1 = y2 - caretSize;\n                y3 = y2 + caretSize;\n            }\n            x3 = x1;\n        } else {\n            if (xAlign === 'left') {\n                x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;\n            } else if (xAlign === 'right') {\n                x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n            } else {\n                x2 = this.caretX;\n            }\n            if (yAlign === 'top') {\n                y1 = ptY;\n                y2 = y1 - caretSize;\n                x1 = x2 - caretSize;\n                x3 = x2 + caretSize;\n            } else {\n                y1 = ptY + height;\n                y2 = y1 + caretSize;\n                x1 = x2 + caretSize;\n                x3 = x2 - caretSize;\n            }\n            y3 = y1;\n        }\n        return {\n            x1,\n            x2,\n            x3,\n            y1,\n            y2,\n            y3\n        };\n    }\n    drawTitle(pt, ctx, options) {\n        const title = this.title;\n        const length = title.length;\n        let titleFont, titleSpacing, i;\n        if (length) {\n            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n            pt.x = getAlignedX(this, options.titleAlign, options);\n            ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n            ctx.textBaseline = 'middle';\n            titleFont = toFont(options.titleFont);\n            titleSpacing = options.titleSpacing;\n            ctx.fillStyle = options.titleColor;\n            ctx.font = titleFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n                pt.y += titleFont.lineHeight + titleSpacing;\n                if (i + 1 === length) {\n                    pt.y += options.titleMarginBottom - titleSpacing;\n                }\n            }\n        }\n    }\n _drawColorBox(ctx, pt, i, rtlHelper, options) {\n        const labelColor = this.labelColors[i];\n        const labelPointStyle = this.labelPointStyles[i];\n        const { boxHeight , boxWidth  } = options;\n        const bodyFont = toFont(options.bodyFont);\n        const colorX = getAlignedX(this, 'left', options);\n        const rtlColorX = rtlHelper.x(colorX);\n        const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n        const colorY = pt.y + yOffSet;\n        if (options.usePointStyle) {\n            const drawOptions = {\n                radius: Math.min(boxWidth, boxHeight) / 2,\n                pointStyle: labelPointStyle.pointStyle,\n                rotation: labelPointStyle.rotation,\n                borderWidth: 1\n            };\n            const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n            const centerY = colorY + boxHeight / 2;\n            ctx.strokeStyle = options.multiKeyBackground;\n            ctx.fillStyle = options.multiKeyBackground;\n            drawPoint(ctx, drawOptions, centerX, centerY);\n            ctx.strokeStyle = labelColor.borderColor;\n            ctx.fillStyle = labelColor.backgroundColor;\n            drawPoint(ctx, drawOptions, centerX, centerY);\n        } else {\n            ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : labelColor.borderWidth || 1;\n            ctx.strokeStyle = labelColor.borderColor;\n            ctx.setLineDash(labelColor.borderDash || []);\n            ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n            const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n            const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n            const borderRadius = toTRBLCorners(labelColor.borderRadius);\n            if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                ctx.beginPath();\n                ctx.fillStyle = options.multiKeyBackground;\n                addRoundedRectPath(ctx, {\n                    x: outerX,\n                    y: colorY,\n                    w: boxWidth,\n                    h: boxHeight,\n                    radius: borderRadius\n                });\n                ctx.fill();\n                ctx.stroke();\n                ctx.fillStyle = labelColor.backgroundColor;\n                ctx.beginPath();\n                addRoundedRectPath(ctx, {\n                    x: innerX,\n                    y: colorY + 1,\n                    w: boxWidth - 2,\n                    h: boxHeight - 2,\n                    radius: borderRadius\n                });\n                ctx.fill();\n            } else {\n                ctx.fillStyle = options.multiKeyBackground;\n                ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.fillStyle = labelColor.backgroundColor;\n                ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n            }\n        }\n        ctx.fillStyle = this.labelTextColors[i];\n    }\n    drawBody(pt, ctx, options) {\n        const { body  } = this;\n        const { bodySpacing , bodyAlign , displayColors , boxHeight , boxWidth , boxPadding  } = options;\n        const bodyFont = toFont(options.bodyFont);\n        let bodyLineHeight = bodyFont.lineHeight;\n        let xLinePadding = 0;\n        const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n        const fillLineOfText = function(line) {\n            ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n            pt.y += bodyLineHeight + bodySpacing;\n        };\n        const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n        let bodyItem, textColor, lines, i, j, ilen, jlen;\n        ctx.textAlign = bodyAlign;\n        ctx.textBaseline = 'middle';\n        ctx.font = bodyFont.string;\n        pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n        ctx.fillStyle = options.bodyColor;\n        each(this.beforeBody, fillLineOfText);\n        xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;\n        for(i = 0, ilen = body.length; i < ilen; ++i){\n            bodyItem = body[i];\n            textColor = this.labelTextColors[i];\n            ctx.fillStyle = textColor;\n            each(bodyItem.before, fillLineOfText);\n            lines = bodyItem.lines;\n            if (displayColors && lines.length) {\n                this._drawColorBox(ctx, pt, i, rtlHelper, options);\n                bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n            }\n            for(j = 0, jlen = lines.length; j < jlen; ++j){\n                fillLineOfText(lines[j]);\n                bodyLineHeight = bodyFont.lineHeight;\n            }\n            each(bodyItem.after, fillLineOfText);\n        }\n        xLinePadding = 0;\n        bodyLineHeight = bodyFont.lineHeight;\n        each(this.afterBody, fillLineOfText);\n        pt.y -= bodySpacing;\n    }\n    drawFooter(pt, ctx, options) {\n        const footer = this.footer;\n        const length = footer.length;\n        let footerFont, i;\n        if (length) {\n            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n            pt.x = getAlignedX(this, options.footerAlign, options);\n            pt.y += options.footerMarginTop;\n            ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n            ctx.textBaseline = 'middle';\n            footerFont = toFont(options.footerFont);\n            ctx.fillStyle = options.footerColor;\n            ctx.font = footerFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n                pt.y += footerFont.lineHeight + options.footerSpacing;\n            }\n        }\n    }\n    drawBackground(pt, ctx, tooltipSize, options) {\n        const { xAlign , yAlign  } = this;\n        const { x , y  } = pt;\n        const { width , height  } = tooltipSize;\n        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(options.cornerRadius);\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.beginPath();\n        ctx.moveTo(x + topLeft, y);\n        if (yAlign === 'top') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + width - topRight, y);\n        ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n        if (yAlign === 'center' && xAlign === 'right') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + width, y + height - bottomRight);\n        ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n        if (yAlign === 'bottom') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + bottomLeft, y + height);\n        ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n        if (yAlign === 'center' && xAlign === 'left') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x, y + topLeft);\n        ctx.quadraticCurveTo(x, y, x + topLeft, y);\n        ctx.closePath();\n        ctx.fill();\n        if (options.borderWidth > 0) {\n            ctx.stroke();\n        }\n    }\n _updateAnimationTarget(options) {\n        const chart = this.chart;\n        const anims = this.$animations;\n        const animX = anims && anims.x;\n        const animY = anims && anims.y;\n        if (animX || animY) {\n            const position = positioners[options.position].call(this, this._active, this._eventPosition);\n            if (!position) {\n                return;\n            }\n            const size = this._size = getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, this._size);\n            const alignment = determineAlignment(chart, options, positionAndSize);\n            const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n            if (animX._to !== point.x || animY._to !== point.y) {\n                this.xAlign = alignment.xAlign;\n                this.yAlign = alignment.yAlign;\n                this.width = size.width;\n                this.height = size.height;\n                this.caretX = position.x;\n                this.caretY = position.y;\n                this._resolveAnimations().update(this, point);\n            }\n        }\n    }\n _willRender() {\n        return !!this.opacity;\n    }\n    draw(ctx) {\n        const options = this.options.setContext(this.getContext());\n        let opacity = this.opacity;\n        if (!opacity) {\n            return;\n        }\n        this._updateAnimationTarget(options);\n        const tooltipSize = {\n            width: this.width,\n            height: this.height\n        };\n        const pt = {\n            x: this.x,\n            y: this.y\n        };\n        opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n        const padding = toPadding(options.padding);\n        const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n        if (options.enabled && hasTooltipContent) {\n            ctx.save();\n            ctx.globalAlpha = opacity;\n            this.drawBackground(pt, ctx, tooltipSize, options);\n            overrideTextDirection(ctx, options.textDirection);\n            pt.y += padding.top;\n            this.drawTitle(pt, ctx, options);\n            this.drawBody(pt, ctx, options);\n            this.drawFooter(pt, ctx, options);\n            restoreTextDirection(ctx, options.textDirection);\n            ctx.restore();\n        }\n    }\n getActiveElements() {\n        return this._active || [];\n    }\n setActiveElements(activeElements, eventPosition) {\n        const lastActive = this._active;\n        const active = activeElements.map(({ datasetIndex , index  })=>{\n            const meta = this.chart.getDatasetMeta(datasetIndex);\n            if (!meta) {\n                throw new Error('Cannot find a dataset at index ' + datasetIndex);\n            }\n            return {\n                datasetIndex,\n                element: meta.data[index],\n                index\n            };\n        });\n        const changed = !_elementsEqual(lastActive, active);\n        const positionChanged = this._positionChanged(active, eventPosition);\n        if (changed || positionChanged) {\n            this._active = active;\n            this._eventPosition = eventPosition;\n            this._ignoreReplayEvents = true;\n            this.update(true);\n        }\n    }\n handleEvent(e, replay, inChartArea = true) {\n        if (replay && this._ignoreReplayEvents) {\n            return false;\n        }\n        this._ignoreReplayEvents = false;\n        const options = this.options;\n        const lastActive = this._active || [];\n        const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n        const positionChanged = this._positionChanged(active, e);\n        const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n        if (changed) {\n            this._active = active;\n            if (options.enabled || options.external) {\n                this._eventPosition = {\n                    x: e.x,\n                    y: e.y\n                };\n                this.update(true, replay);\n            }\n        }\n        return changed;\n    }\n _getActiveElements(e, lastActive, replay, inChartArea) {\n        const options = this.options;\n        if (e.type === 'mouseout') {\n            return [];\n        }\n        if (!inChartArea) {\n            return lastActive.filter((i)=>this.chart.data.datasets[i.datasetIndex] && this.chart.getDatasetMeta(i.datasetIndex).controller.getParsed(i.index) !== undefined);\n        }\n        const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n        if (options.reverse) {\n            active.reverse();\n        }\n        return active;\n    }\n _positionChanged(active, e) {\n        const { caretX , caretY , options  } = this;\n        const position = positioners[options.position].call(this, active, e);\n        return position !== false && (caretX !== position.x || caretY !== position.y);\n    }\n}\nvar plugin_tooltip = {\n    id: 'tooltip',\n    _element: Tooltip,\n    positioners,\n    afterInit (chart, _args, options) {\n        if (options) {\n            chart.tooltip = new Tooltip({\n                chart,\n                options\n            });\n        }\n    },\n    beforeUpdate (chart, _args, options) {\n        if (chart.tooltip) {\n            chart.tooltip.initialize(options);\n        }\n    },\n    reset (chart, _args, options) {\n        if (chart.tooltip) {\n            chart.tooltip.initialize(options);\n        }\n    },\n    afterDraw (chart) {\n        const tooltip = chart.tooltip;\n        if (tooltip && tooltip._willRender()) {\n            const args = {\n                tooltip\n            };\n            if (chart.notifyPlugins('beforeTooltipDraw', {\n                ...args,\n                cancelable: true\n            }) === false) {\n                return;\n            }\n            tooltip.draw(chart.ctx);\n            chart.notifyPlugins('afterTooltipDraw', args);\n        }\n    },\n    afterEvent (chart, args) {\n        if (chart.tooltip) {\n            const useFinalPosition = args.replay;\n            if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n                args.changed = true;\n            }\n        }\n    },\n    defaults: {\n        enabled: true,\n        external: null,\n        position: 'average',\n        backgroundColor: 'rgba(0,0,0,0.8)',\n        titleColor: '#fff',\n        titleFont: {\n            weight: 'bold'\n        },\n        titleSpacing: 2,\n        titleMarginBottom: 6,\n        titleAlign: 'left',\n        bodyColor: '#fff',\n        bodySpacing: 2,\n        bodyFont: {},\n        bodyAlign: 'left',\n        footerColor: '#fff',\n        footerSpacing: 2,\n        footerMarginTop: 6,\n        footerFont: {\n            weight: 'bold'\n        },\n        footerAlign: 'left',\n        padding: 6,\n        caretPadding: 2,\n        caretSize: 5,\n        cornerRadius: 6,\n        boxHeight: (ctx, opts)=>opts.bodyFont.size,\n        boxWidth: (ctx, opts)=>opts.bodyFont.size,\n        multiKeyBackground: '#fff',\n        displayColors: true,\n        boxPadding: 0,\n        borderColor: 'rgba(0,0,0,0)',\n        borderWidth: 0,\n        animation: {\n            duration: 400,\n            easing: 'easeOutQuart'\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'width',\n                    'height',\n                    'caretX',\n                    'caretY'\n                ]\n            },\n            opacity: {\n                easing: 'linear',\n                duration: 200\n            }\n        },\n        callbacks: defaultCallbacks\n    },\n    defaultRoutes: {\n        bodyFont: 'font',\n        footerFont: 'font',\n        titleFont: 'font'\n    },\n    descriptors: {\n        _scriptable: (name)=>name !== 'filter' && name !== 'itemSort' && name !== 'external',\n        _indexable: false,\n        callbacks: {\n            _scriptable: false,\n            _indexable: false\n        },\n        animation: {\n            _fallback: false\n        },\n        animations: {\n            _fallback: 'animation'\n        }\n    },\n    additionalOptionScopes: [\n        'interaction'\n    ]\n};\n\nvar plugins = /*#__PURE__*/Object.freeze({\n__proto__: null,\nColors: plugin_colors,\nDecimation: plugin_decimation,\nFiller: index,\nLegend: plugin_legend,\nSubTitle: plugin_subtitle,\nTitle: plugin_title,\nTooltip: plugin_tooltip\n});\n\nconst addIfString = (labels, raw, index, addedLabels)=>{\n    if (typeof raw === 'string') {\n        index = labels.push(raw) - 1;\n        addedLabels.unshift({\n            index,\n            label: raw\n        });\n    } else if (isNaN(raw)) {\n        index = null;\n    }\n    return index;\n};\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n    const first = labels.indexOf(raw);\n    if (first === -1) {\n        return addIfString(labels, raw, index, addedLabels);\n    }\n    const last = labels.lastIndexOf(raw);\n    return first !== last ? index : first;\n}\nconst validIndex = (index, max)=>index === null ? null : _limitValue(Math.round(index), 0, max);\nfunction _getLabelForValue(value) {\n    const labels = this.getLabels();\n    if (value >= 0 && value < labels.length) {\n        return labels[value];\n    }\n    return value;\n}\nclass CategoryScale extends Scale {\n    static id = 'category';\n static defaults = {\n        ticks: {\n            callback: _getLabelForValue\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this._startValue = undefined;\n        this._valueRange = 0;\n        this._addedLabels = [];\n    }\n    init(scaleOptions) {\n        const added = this._addedLabels;\n        if (added.length) {\n            const labels = this.getLabels();\n            for (const { index , label  } of added){\n                if (labels[index] === label) {\n                    labels.splice(index, 1);\n                }\n            }\n            this._addedLabels = [];\n        }\n        super.init(scaleOptions);\n    }\n    parse(raw, index) {\n        if (isNullOrUndef(raw)) {\n            return null;\n        }\n        const labels = this.getLabels();\n        index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n        return validIndex(index, labels.length - 1);\n    }\n    determineDataLimits() {\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let { min , max  } = this.getMinMax(true);\n        if (this.options.bounds === 'ticks') {\n            if (!minDefined) {\n                min = 0;\n            }\n            if (!maxDefined) {\n                max = this.getLabels().length - 1;\n            }\n        }\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const min = this.min;\n        const max = this.max;\n        const offset = this.options.offset;\n        const ticks = [];\n        let labels = this.getLabels();\n        labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);\n        this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n        this._startValue = this.min - (offset ? 0.5 : 0);\n        for(let value = min; value <= max; value++){\n            ticks.push({\n                value\n            });\n        }\n        return ticks;\n    }\n    getLabelForValue(value) {\n        return _getLabelForValue.call(this, value);\n    }\n configure() {\n        super.configure();\n        if (!this.isHorizontal()) {\n            this._reversePixels = !this._reversePixels;\n        }\n    }\n    getPixelForValue(value) {\n        if (typeof value !== 'number') {\n            value = this.parse(value);\n        }\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) {\n            return null;\n        }\n        return this.getPixelForValue(ticks[index].value);\n    }\n    getValueForPixel(pixel) {\n        return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n    }\n    getBasePixel() {\n        return this.bottom;\n    }\n}\n\nfunction generateTicks$1(generationOptions, dataRange) {\n    const ticks = [];\n    const MIN_SPACING = 1e-14;\n    const { bounds , step , min , max , precision , count , maxTicks , maxDigits , includeBounds  } = generationOptions;\n    const unit = step || 1;\n    const maxSpaces = maxTicks - 1;\n    const { min: rmin , max: rmax  } = dataRange;\n    const minDefined = !isNullOrUndef(min);\n    const maxDefined = !isNullOrUndef(max);\n    const countDefined = !isNullOrUndef(count);\n    const minSpacing = (rmax - rmin) / (maxDigits + 1);\n    let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n    let factor, niceMin, niceMax, numSpaces;\n    if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n        return [\n            {\n                value: rmin\n            },\n            {\n                value: rmax\n            }\n        ];\n    }\n    numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n    if (numSpaces > maxSpaces) {\n        spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n    }\n    if (!isNullOrUndef(precision)) {\n        factor = Math.pow(10, precision);\n        spacing = Math.ceil(spacing * factor) / factor;\n    }\n    if (bounds === 'ticks') {\n        niceMin = Math.floor(rmin / spacing) * spacing;\n        niceMax = Math.ceil(rmax / spacing) * spacing;\n    } else {\n        niceMin = rmin;\n        niceMax = rmax;\n    }\n    if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n        numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n        spacing = (max - min) / numSpaces;\n        niceMin = min;\n        niceMax = max;\n    } else if (countDefined) {\n        niceMin = minDefined ? min : niceMin;\n        niceMax = maxDefined ? max : niceMax;\n        numSpaces = count - 1;\n        spacing = (niceMax - niceMin) / numSpaces;\n    } else {\n        numSpaces = (niceMax - niceMin) / spacing;\n        if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n            numSpaces = Math.round(numSpaces);\n        } else {\n            numSpaces = Math.ceil(numSpaces);\n        }\n    }\n    const decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));\n    factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n    niceMin = Math.round(niceMin * factor) / factor;\n    niceMax = Math.round(niceMax * factor) / factor;\n    let j = 0;\n    if (minDefined) {\n        if (includeBounds && niceMin !== min) {\n            ticks.push({\n                value: min\n            });\n            if (niceMin < min) {\n                j++;\n            }\n            if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n                j++;\n            }\n        } else if (niceMin < min) {\n            j++;\n        }\n    }\n    for(; j < numSpaces; ++j){\n        const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n        if (maxDefined && tickValue > max) {\n            break;\n        }\n        ticks.push({\n            value: tickValue\n        });\n    }\n    if (maxDefined && includeBounds && niceMax !== max) {\n        if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n            ticks[ticks.length - 1].value = max;\n        } else {\n            ticks.push({\n                value: max\n            });\n        }\n    } else if (!maxDefined || niceMax === max) {\n        ticks.push({\n            value: niceMax\n        });\n    }\n    return ticks;\n}\nfunction relativeLabelSize(value, minSpacing, { horizontal , minRotation  }) {\n    const rad = toRadians(minRotation);\n    const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n    const length = 0.75 * minSpacing * ('' + value).length;\n    return Math.min(minSpacing / ratio, length);\n}\nclass LinearScaleBase extends Scale {\n    constructor(cfg){\n        super(cfg);\n         this.start = undefined;\n         this.end = undefined;\n         this._startValue = undefined;\n         this._endValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        if (isNullOrUndef(raw)) {\n            return null;\n        }\n        if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n            return null;\n        }\n        return +raw;\n    }\n    handleTickRangeOptions() {\n        const { beginAtZero  } = this.options;\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let { min , max  } = this;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (beginAtZero) {\n            const minSign = sign(min);\n            const maxSign = sign(max);\n            if (minSign < 0 && maxSign < 0) {\n                setMax(0);\n            } else if (minSign > 0 && maxSign > 0) {\n                setMin(0);\n            }\n        }\n        if (min === max) {\n            let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n            setMax(max + offset);\n            if (!beginAtZero) {\n                setMin(min - offset);\n            }\n        }\n        this.min = min;\n        this.max = max;\n    }\n    getTickLimit() {\n        const tickOpts = this.options.ticks;\n        let { maxTicksLimit , stepSize  } = tickOpts;\n        let maxTicks;\n        if (stepSize) {\n            maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n            if (maxTicks > 1000) {\n                console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n                maxTicks = 1000;\n            }\n        } else {\n            maxTicks = this.computeTickLimit();\n            maxTicksLimit = maxTicksLimit || 11;\n        }\n        if (maxTicksLimit) {\n            maxTicks = Math.min(maxTicksLimit, maxTicks);\n        }\n        return maxTicks;\n    }\n computeTickLimit() {\n        return Number.POSITIVE_INFINITY;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        let maxTicks = this.getTickLimit();\n        maxTicks = Math.max(2, maxTicks);\n        const numericGeneratorOptions = {\n            maxTicks,\n            bounds: opts.bounds,\n            min: opts.min,\n            max: opts.max,\n            precision: tickOpts.precision,\n            step: tickOpts.stepSize,\n            count: tickOpts.count,\n            maxDigits: this._maxDigits(),\n            horizontal: this.isHorizontal(),\n            minRotation: tickOpts.minRotation || 0,\n            includeBounds: tickOpts.includeBounds !== false\n        };\n        const dataRange = this._range || this;\n        const ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n        if (opts.bounds === 'ticks') {\n            _setMinAndMaxByKey(ticks, this, 'value');\n        }\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n configure() {\n        const ticks = this.ticks;\n        let start = this.min;\n        let end = this.max;\n        super.configure();\n        if (this.options.offset && ticks.length) {\n            const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n            start -= offset;\n            end += offset;\n        }\n        this._startValue = start;\n        this._endValue = end;\n        this._valueRange = end - start;\n    }\n    getLabelForValue(value) {\n        return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n}\n\nclass LinearScale extends LinearScaleBase {\n    static id = 'linear';\n static defaults = {\n        ticks: {\n            callback: Ticks.formatters.numeric\n        }\n    };\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(true);\n        this.min = isNumberFinite(min) ? min : 0;\n        this.max = isNumberFinite(max) ? max : 1;\n        this.handleTickRangeOptions();\n    }\n computeTickLimit() {\n        const horizontal = this.isHorizontal();\n        const length = horizontal ? this.width : this.height;\n        const minRotation = toRadians(this.options.ticks.minRotation);\n        const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n        const tickFont = this._resolveTickFontOptions(0);\n        return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n    }\n    getPixelForValue(value) {\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n    }\n}\n\nconst log10Floor = (v)=>Math.floor(log10(v));\nconst changeExponent = (v, m)=>Math.pow(10, log10Floor(v) + m);\nfunction isMajor(tickVal) {\n    const remain = tickVal / Math.pow(10, log10Floor(tickVal));\n    return remain === 1;\n}\nfunction steps(min, max, rangeExp) {\n    const rangeStep = Math.pow(10, rangeExp);\n    const start = Math.floor(min / rangeStep);\n    const end = Math.ceil(max / rangeStep);\n    return end - start;\n}\nfunction startExp(min, max) {\n    const range = max - min;\n    let rangeExp = log10Floor(range);\n    while(steps(min, max, rangeExp) > 10){\n        rangeExp++;\n    }\n    while(steps(min, max, rangeExp) < 10){\n        rangeExp--;\n    }\n    return Math.min(rangeExp, log10Floor(min));\n}\n function generateTicks(generationOptions, { min , max  }) {\n    min = finiteOrDefault(generationOptions.min, min);\n    const ticks = [];\n    const minExp = log10Floor(min);\n    let exp = startExp(min, max);\n    let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n    const stepSize = Math.pow(10, exp);\n    const base = minExp > exp ? Math.pow(10, minExp) : 0;\n    const start = Math.round((min - base) * precision) / precision;\n    const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n    let significand = Math.floor((start - offset) / Math.pow(10, exp));\n    let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n    while(value < max){\n        ticks.push({\n            value,\n            major: isMajor(value),\n            significand\n        });\n        if (significand >= 10) {\n            significand = significand < 15 ? 15 : 20;\n        } else {\n            significand++;\n        }\n        if (significand >= 20) {\n            exp++;\n            significand = 2;\n            precision = exp >= 0 ? 1 : precision;\n        }\n        value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n    }\n    const lastTick = finiteOrDefault(generationOptions.max, value);\n    ticks.push({\n        value: lastTick,\n        major: isMajor(lastTick),\n        significand\n    });\n    return ticks;\n}\nclass LogarithmicScale extends Scale {\n    static id = 'logarithmic';\n static defaults = {\n        ticks: {\n            callback: Ticks.formatters.logarithmic,\n            major: {\n                enabled: true\n            }\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this.start = undefined;\n         this.end = undefined;\n         this._startValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        const value = LinearScaleBase.prototype.parse.apply(this, [\n            raw,\n            index\n        ]);\n        if (value === 0) {\n            this._zero = true;\n            return undefined;\n        }\n        return isNumberFinite(value) && value > 0 ? value : null;\n    }\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(true);\n        this.min = isNumberFinite(min) ? Math.max(0, min) : null;\n        this.max = isNumberFinite(max) ? Math.max(0, max) : null;\n        if (this.options.beginAtZero) {\n            this._zero = true;\n        }\n        if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {\n            this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n        }\n        this.handleTickRangeOptions();\n    }\n    handleTickRangeOptions() {\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let min = this.min;\n        let max = this.max;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (min === max) {\n            if (min <= 0) {\n                setMin(1);\n                setMax(10);\n            } else {\n                setMin(changeExponent(min, -1));\n                setMax(changeExponent(max, +1));\n            }\n        }\n        if (min <= 0) {\n            setMin(changeExponent(max, -1));\n        }\n        if (max <= 0) {\n            setMax(changeExponent(min, +1));\n        }\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const generationOptions = {\n            min: this._userMin,\n            max: this._userMax\n        };\n        const ticks = generateTicks(generationOptions, this);\n        if (opts.bounds === 'ticks') {\n            _setMinAndMaxByKey(ticks, this, 'value');\n        }\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n getLabelForValue(value) {\n        return value === undefined ? '0' : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n configure() {\n        const start = this.min;\n        super.configure();\n        this._startValue = log10(start);\n        this._valueRange = log10(this.max) - log10(start);\n    }\n    getPixelForValue(value) {\n        if (value === undefined || value === 0) {\n            value = this.min;\n        }\n        if (value === null || isNaN(value)) {\n            return NaN;\n        }\n        return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        const decimal = this.getDecimalForPixel(pixel);\n        return Math.pow(10, this._startValue + decimal * this._valueRange);\n    }\n}\n\nfunction getTickBackdropHeight(opts) {\n    const tickOpts = opts.ticks;\n    if (tickOpts.display && opts.display) {\n        const padding = toPadding(tickOpts.backdropPadding);\n        return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n    }\n    return 0;\n}\nfunction measureLabelSize(ctx, font, label) {\n    label = isArray(label) ? label : [\n        label\n    ];\n    return {\n        w: _longestText(ctx, font.string, label),\n        h: label.length * font.lineHeight\n    };\n}\nfunction determineLimits(angle, pos, size, min, max) {\n    if (angle === min || angle === max) {\n        return {\n            start: pos - size / 2,\n            end: pos + size / 2\n        };\n    } else if (angle < min || angle > max) {\n        return {\n            start: pos - size,\n            end: pos\n        };\n    }\n    return {\n        start: pos,\n        end: pos + size\n    };\n}\n function fitWithPointLabels(scale) {\n    const orig = {\n        l: scale.left + scale._padding.left,\n        r: scale.right - scale._padding.right,\n        t: scale.top + scale._padding.top,\n        b: scale.bottom - scale._padding.bottom\n    };\n    const limits = Object.assign({}, orig);\n    const labelSizes = [];\n    const padding = [];\n    const valueCount = scale._pointLabels.length;\n    const pointLabelOpts = scale.options.pointLabels;\n    const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n    for(let i = 0; i < valueCount; i++){\n        const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n        padding[i] = opts.padding;\n        const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n        const plFont = toFont(opts.font);\n        const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n        labelSizes[i] = textSize;\n        const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n        const angle = Math.round(toDegrees(angleRadians));\n        const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n        const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n        updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n    }\n    scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);\n    scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n    const sin = Math.abs(Math.sin(angle));\n    const cos = Math.abs(Math.cos(angle));\n    let x = 0;\n    let y = 0;\n    if (hLimits.start < orig.l) {\n        x = (orig.l - hLimits.start) / sin;\n        limits.l = Math.min(limits.l, orig.l - x);\n    } else if (hLimits.end > orig.r) {\n        x = (hLimits.end - orig.r) / sin;\n        limits.r = Math.max(limits.r, orig.r + x);\n    }\n    if (vLimits.start < orig.t) {\n        y = (orig.t - vLimits.start) / cos;\n        limits.t = Math.min(limits.t, orig.t - y);\n    } else if (vLimits.end > orig.b) {\n        y = (vLimits.end - orig.b) / cos;\n        limits.b = Math.max(limits.b, orig.b + y);\n    }\n}\nfunction createPointLabelItem(scale, index, itemOpts) {\n    const outerDistance = scale.drawingArea;\n    const { extra , additionalAngle , padding , size  } = itemOpts;\n    const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n    const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n    const y = yForAngle(pointLabelPosition.y, size.h, angle);\n    const textAlign = getTextAlignForAngle(angle);\n    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n    return {\n        visible: true,\n        x: pointLabelPosition.x,\n        y,\n        textAlign,\n        left,\n        top: y,\n        right: left + size.w,\n        bottom: y + size.h\n    };\n}\nfunction isNotOverlapped(item, area) {\n    if (!area) {\n        return true;\n    }\n    const { left , top , right , bottom  } = item;\n    const apexesInArea = _isPointInArea({\n        x: left,\n        y: top\n    }, area) || _isPointInArea({\n        x: left,\n        y: bottom\n    }, area) || _isPointInArea({\n        x: right,\n        y: top\n    }, area) || _isPointInArea({\n        x: right,\n        y: bottom\n    }, area);\n    return !apexesInArea;\n}\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n    const items = [];\n    const valueCount = scale._pointLabels.length;\n    const opts = scale.options;\n    const { centerPointLabels , display  } = opts.pointLabels;\n    const itemOpts = {\n        extra: getTickBackdropHeight(opts) / 2,\n        additionalAngle: centerPointLabels ? PI / valueCount : 0\n    };\n    let area;\n    for(let i = 0; i < valueCount; i++){\n        itemOpts.padding = padding[i];\n        itemOpts.size = labelSizes[i];\n        const item = createPointLabelItem(scale, i, itemOpts);\n        items.push(item);\n        if (display === 'auto') {\n            item.visible = isNotOverlapped(item, area);\n            if (item.visible) {\n                area = item;\n            }\n        }\n    }\n    return items;\n}\nfunction getTextAlignForAngle(angle) {\n    if (angle === 0 || angle === 180) {\n        return 'center';\n    } else if (angle < 180) {\n        return 'left';\n    }\n    return 'right';\n}\nfunction leftForTextAlign(x, w, align) {\n    if (align === 'right') {\n        x -= w;\n    } else if (align === 'center') {\n        x -= w / 2;\n    }\n    return x;\n}\nfunction yForAngle(y, h, angle) {\n    if (angle === 90 || angle === 270) {\n        y -= h / 2;\n    } else if (angle > 270 || angle < 90) {\n        y -= h;\n    }\n    return y;\n}\nfunction drawPointLabelBox(ctx, opts, item) {\n    const { left , top , right , bottom  } = item;\n    const { backdropColor  } = opts;\n    if (!isNullOrUndef(backdropColor)) {\n        const borderRadius = toTRBLCorners(opts.borderRadius);\n        const padding = toPadding(opts.backdropPadding);\n        ctx.fillStyle = backdropColor;\n        const backdropLeft = left - padding.left;\n        const backdropTop = top - padding.top;\n        const backdropWidth = right - left + padding.width;\n        const backdropHeight = bottom - top + padding.height;\n        if (Object.values(borderRadius).some((v)=>v !== 0)) {\n            ctx.beginPath();\n            addRoundedRectPath(ctx, {\n                x: backdropLeft,\n                y: backdropTop,\n                w: backdropWidth,\n                h: backdropHeight,\n                radius: borderRadius\n            });\n            ctx.fill();\n        } else {\n            ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n        }\n    }\n}\nfunction drawPointLabels(scale, labelCount) {\n    const { ctx , options: { pointLabels  }  } = scale;\n    for(let i = labelCount - 1; i >= 0; i--){\n        const item = scale._pointLabelItems[i];\n        if (!item.visible) {\n            continue;\n        }\n        const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n        drawPointLabelBox(ctx, optsAtIndex, item);\n        const plFont = toFont(optsAtIndex.font);\n        const { x , y , textAlign  } = item;\n        renderText(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {\n            color: optsAtIndex.color,\n            textAlign: textAlign,\n            textBaseline: 'middle'\n        });\n    }\n}\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n    const { ctx  } = scale;\n    if (circular) {\n        ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n    } else {\n        let pointPosition = scale.getPointPosition(0, radius);\n        ctx.moveTo(pointPosition.x, pointPosition.y);\n        for(let i = 1; i < labelCount; i++){\n            pointPosition = scale.getPointPosition(i, radius);\n            ctx.lineTo(pointPosition.x, pointPosition.y);\n        }\n    }\n}\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n    const ctx = scale.ctx;\n    const circular = gridLineOpts.circular;\n    const { color , lineWidth  } = gridLineOpts;\n    if (!circular && !labelCount || !color || !lineWidth || radius < 0) {\n        return;\n    }\n    ctx.save();\n    ctx.strokeStyle = color;\n    ctx.lineWidth = lineWidth;\n    ctx.setLineDash(borderOpts.dash || []);\n    ctx.lineDashOffset = borderOpts.dashOffset;\n    ctx.beginPath();\n    pathRadiusLine(scale, radius, circular, labelCount);\n    ctx.closePath();\n    ctx.stroke();\n    ctx.restore();\n}\nfunction createPointLabelContext(parent, index, label) {\n    return createContext(parent, {\n        label,\n        index,\n        type: 'pointLabel'\n    });\n}\nclass RadialLinearScale extends LinearScaleBase {\n    static id = 'radialLinear';\n static defaults = {\n        display: true,\n        animate: true,\n        position: 'chartArea',\n        angleLines: {\n            display: true,\n            lineWidth: 1,\n            borderDash: [],\n            borderDashOffset: 0.0\n        },\n        grid: {\n            circular: false\n        },\n        startAngle: 0,\n        ticks: {\n            showLabelBackdrop: true,\n            callback: Ticks.formatters.numeric\n        },\n        pointLabels: {\n            backdropColor: undefined,\n            backdropPadding: 2,\n            display: true,\n            font: {\n                size: 10\n            },\n            callback (label) {\n                return label;\n            },\n            padding: 5,\n            centerPointLabels: false\n        }\n    };\n    static defaultRoutes = {\n        'angleLines.color': 'borderColor',\n        'pointLabels.color': 'color',\n        'ticks.color': 'color'\n    };\n    static descriptors = {\n        angleLines: {\n            _fallback: 'grid'\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this.xCenter = undefined;\n         this.yCenter = undefined;\n         this.drawingArea = undefined;\n         this._pointLabels = [];\n        this._pointLabelItems = [];\n    }\n    setDimensions() {\n        const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n        const w = this.width = this.maxWidth - padding.width;\n        const h = this.height = this.maxHeight - padding.height;\n        this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n        this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n        this.drawingArea = Math.floor(Math.min(w, h) / 2);\n    }\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(false);\n        this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;\n        this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;\n        this.handleTickRangeOptions();\n    }\n computeTickLimit() {\n        return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n    }\n    generateTickLabels(ticks) {\n        LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n        this._pointLabels = this.getLabels().map((value, index)=>{\n            const label = callback(this.options.pointLabels.callback, [\n                value,\n                index\n            ], this);\n            return label || label === 0 ? label : '';\n        }).filter((v, i)=>this.chart.getDataVisibility(i));\n    }\n    fit() {\n        const opts = this.options;\n        if (opts.display && opts.pointLabels.display) {\n            fitWithPointLabels(this);\n        } else {\n            this.setCenterPoint(0, 0, 0, 0);\n        }\n    }\n    setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n        this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n        this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n        this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n    }\n    getIndexAngle(index) {\n        const angleMultiplier = TAU / (this._pointLabels.length || 1);\n        const startAngle = this.options.startAngle || 0;\n        return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n    }\n    getDistanceFromCenterForValue(value) {\n        if (isNullOrUndef(value)) {\n            return NaN;\n        }\n        const scalingFactor = this.drawingArea / (this.max - this.min);\n        if (this.options.reverse) {\n            return (this.max - value) * scalingFactor;\n        }\n        return (value - this.min) * scalingFactor;\n    }\n    getValueForDistanceFromCenter(distance) {\n        if (isNullOrUndef(distance)) {\n            return NaN;\n        }\n        const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n        return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n    }\n    getPointLabelContext(index) {\n        const pointLabels = this._pointLabels || [];\n        if (index >= 0 && index < pointLabels.length) {\n            const pointLabel = pointLabels[index];\n            return createPointLabelContext(this.getContext(), index, pointLabel);\n        }\n    }\n    getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n        const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n        return {\n            x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n            y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n            angle\n        };\n    }\n    getPointPositionForValue(index, value) {\n        return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n    }\n    getBasePosition(index) {\n        return this.getPointPositionForValue(index || 0, this.getBaseValue());\n    }\n    getPointLabelPosition(index) {\n        const { left , top , right , bottom  } = this._pointLabelItems[index];\n        return {\n            left,\n            top,\n            right,\n            bottom\n        };\n    }\n drawBackground() {\n        const { backgroundColor , grid: { circular  }  } = this.options;\n        if (backgroundColor) {\n            const ctx = this.ctx;\n            ctx.save();\n            ctx.beginPath();\n            pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n            ctx.closePath();\n            ctx.fillStyle = backgroundColor;\n            ctx.fill();\n            ctx.restore();\n        }\n    }\n drawGrid() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const { angleLines , grid , border  } = opts;\n        const labelCount = this._pointLabels.length;\n        let i, offset, position;\n        if (opts.pointLabels.display) {\n            drawPointLabels(this, labelCount);\n        }\n        if (grid.display) {\n            this.ticks.forEach((tick, index)=>{\n                if (index !== 0 || index === 0 && this.min < 0) {\n                    offset = this.getDistanceFromCenterForValue(tick.value);\n                    const context = this.getContext(index);\n                    const optsAtIndex = grid.setContext(context);\n                    const optsAtIndexBorder = border.setContext(context);\n                    drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n                }\n            });\n        }\n        if (angleLines.display) {\n            ctx.save();\n            for(i = labelCount - 1; i >= 0; i--){\n                const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n                const { color , lineWidth  } = optsAtIndex;\n                if (!lineWidth || !color) {\n                    continue;\n                }\n                ctx.lineWidth = lineWidth;\n                ctx.strokeStyle = color;\n                ctx.setLineDash(optsAtIndex.borderDash);\n                ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n                offset = this.getDistanceFromCenterForValue(opts.reverse ? this.min : this.max);\n                position = this.getPointPosition(i, offset);\n                ctx.beginPath();\n                ctx.moveTo(this.xCenter, this.yCenter);\n                ctx.lineTo(position.x, position.y);\n                ctx.stroke();\n            }\n            ctx.restore();\n        }\n    }\n drawBorder() {}\n drawLabels() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        if (!tickOpts.display) {\n            return;\n        }\n        const startAngle = this.getIndexAngle(0);\n        let offset, width;\n        ctx.save();\n        ctx.translate(this.xCenter, this.yCenter);\n        ctx.rotate(startAngle);\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        this.ticks.forEach((tick, index)=>{\n            if (index === 0 && this.min >= 0 && !opts.reverse) {\n                return;\n            }\n            const optsAtIndex = tickOpts.setContext(this.getContext(index));\n            const tickFont = toFont(optsAtIndex.font);\n            offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n            if (optsAtIndex.showLabelBackdrop) {\n                ctx.font = tickFont.string;\n                width = ctx.measureText(tick.label).width;\n                ctx.fillStyle = optsAtIndex.backdropColor;\n                const padding = toPadding(optsAtIndex.backdropPadding);\n                ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);\n            }\n            renderText(ctx, tick.label, 0, -offset, tickFont, {\n                color: optsAtIndex.color,\n                strokeColor: optsAtIndex.textStrokeColor,\n                strokeWidth: optsAtIndex.textStrokeWidth\n            });\n        });\n        ctx.restore();\n    }\n drawTitle() {}\n}\n\nconst INTERVALS = {\n    millisecond: {\n        common: true,\n        size: 1,\n        steps: 1000\n    },\n    second: {\n        common: true,\n        size: 1000,\n        steps: 60\n    },\n    minute: {\n        common: true,\n        size: 60000,\n        steps: 60\n    },\n    hour: {\n        common: true,\n        size: 3600000,\n        steps: 24\n    },\n    day: {\n        common: true,\n        size: 86400000,\n        steps: 30\n    },\n    week: {\n        common: false,\n        size: 604800000,\n        steps: 4\n    },\n    month: {\n        common: true,\n        size: 2.628e9,\n        steps: 12\n    },\n    quarter: {\n        common: false,\n        size: 7.884e9,\n        steps: 4\n    },\n    year: {\n        common: true,\n        size: 3.154e10\n    }\n};\n const UNITS =  /* #__PURE__ */ Object.keys(INTERVALS);\n function sorter(a, b) {\n    return a - b;\n}\n function parse(scale, input) {\n    if (isNullOrUndef(input)) {\n        return null;\n    }\n    const adapter = scale._adapter;\n    const { parser , round , isoWeekday  } = scale._parseOpts;\n    let value = input;\n    if (typeof parser === 'function') {\n        value = parser(value);\n    }\n    if (!isNumberFinite(value)) {\n        value = typeof parser === 'string' ? adapter.parse(value, parser) : adapter.parse(value);\n    }\n    if (value === null) {\n        return null;\n    }\n    if (round) {\n        value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);\n    }\n    return +value;\n}\n function determineUnitForAutoTicks(minUnit, min, max, capacity) {\n    const ilen = UNITS.length;\n    for(let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i){\n        const interval = INTERVALS[UNITS[i]];\n        const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n        if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n            return UNITS[i];\n        }\n    }\n    return UNITS[ilen - 1];\n}\n function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n    for(let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--){\n        const unit = UNITS[i];\n        if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n            return unit;\n        }\n    }\n    return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n function determineMajorUnit(unit) {\n    for(let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i){\n        if (INTERVALS[UNITS[i]].common) {\n            return UNITS[i];\n        }\n    }\n}\n function addTick(ticks, time, timestamps) {\n    if (!timestamps) {\n        ticks[time] = true;\n    } else if (timestamps.length) {\n        const { lo , hi  } = _lookup(timestamps, time);\n        const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n        ticks[timestamp] = true;\n    }\n}\n function setMajorTicks(scale, ticks, map, majorUnit) {\n    const adapter = scale._adapter;\n    const first = +adapter.startOf(ticks[0].value, majorUnit);\n    const last = ticks[ticks.length - 1].value;\n    let major, index;\n    for(major = first; major <= last; major = +adapter.add(major, 1, majorUnit)){\n        index = map[major];\n        if (index >= 0) {\n            ticks[index].major = true;\n        }\n    }\n    return ticks;\n}\n function ticksFromTimestamps(scale, values, majorUnit) {\n    const ticks = [];\n     const map = {};\n    const ilen = values.length;\n    let i, value;\n    for(i = 0; i < ilen; ++i){\n        value = values[i];\n        map[value] = i;\n        ticks.push({\n            value,\n            major: false\n        });\n    }\n    return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\nclass TimeScale extends Scale {\n    static id = 'time';\n static defaults = {\n bounds: 'data',\n        adapters: {},\n        time: {\n            parser: false,\n            unit: false,\n            round: false,\n            isoWeekday: false,\n            minUnit: 'millisecond',\n            displayFormats: {}\n        },\n        ticks: {\n source: 'auto',\n            callback: false,\n            major: {\n                enabled: false\n            }\n        }\n    };\n constructor(props){\n        super(props);\n         this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n         this._unit = 'day';\n         this._majorUnit = undefined;\n        this._offsets = {};\n        this._normalized = false;\n        this._parseOpts = undefined;\n    }\n    init(scaleOpts, opts = {}) {\n        const time = scaleOpts.time || (scaleOpts.time = {});\n         const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n        adapter.init(opts);\n        mergeIf(time.displayFormats, adapter.formats());\n        this._parseOpts = {\n            parser: time.parser,\n            round: time.round,\n            isoWeekday: time.isoWeekday\n        };\n        super.init(scaleOpts);\n        this._normalized = opts.normalized;\n    }\n parse(raw, index) {\n        if (raw === undefined) {\n            return null;\n        }\n        return parse(this, raw);\n    }\n    beforeLayout() {\n        super.beforeLayout();\n        this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n    }\n    determineDataLimits() {\n        const options = this.options;\n        const adapter = this._adapter;\n        const unit = options.time.unit || 'day';\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n function _applyBounds(bounds) {\n            if (!minDefined && !isNaN(bounds.min)) {\n                min = Math.min(min, bounds.min);\n            }\n            if (!maxDefined && !isNaN(bounds.max)) {\n                max = Math.max(max, bounds.max);\n            }\n        }\n        if (!minDefined || !maxDefined) {\n            _applyBounds(this._getLabelBounds());\n            if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n                _applyBounds(this.getMinMax(false));\n            }\n        }\n        min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n        max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n        this.min = Math.min(min, max - 1);\n        this.max = Math.max(min + 1, max);\n    }\n _getLabelBounds() {\n        const arr = this.getLabelTimestamps();\n        let min = Number.POSITIVE_INFINITY;\n        let max = Number.NEGATIVE_INFINITY;\n        if (arr.length) {\n            min = arr[0];\n            max = arr[arr.length - 1];\n        }\n        return {\n            min,\n            max\n        };\n    }\n buildTicks() {\n        const options = this.options;\n        const timeOpts = options.time;\n        const tickOpts = options.ticks;\n        const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n        if (options.bounds === 'ticks' && timestamps.length) {\n            this.min = this._userMin || timestamps[0];\n            this.max = this._userMax || timestamps[timestamps.length - 1];\n        }\n        const min = this.min;\n        const max = this.max;\n        const ticks = _filterBetween(timestamps, min, max);\n        this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n        this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);\n        this.initOffsets(timestamps);\n        if (options.reverse) {\n            ticks.reverse();\n        }\n        return ticksFromTimestamps(this, ticks, this._majorUnit);\n    }\n    afterAutoSkip() {\n        if (this.options.offsetAfterAutoskip) {\n            this.initOffsets(this.ticks.map((tick)=>+tick.value));\n        }\n    }\n initOffsets(timestamps = []) {\n        let start = 0;\n        let end = 0;\n        let first, last;\n        if (this.options.offset && timestamps.length) {\n            first = this.getDecimalForValue(timestamps[0]);\n            if (timestamps.length === 1) {\n                start = 1 - first;\n            } else {\n                start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n            }\n            last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n            if (timestamps.length === 1) {\n                end = last;\n            } else {\n                end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n            }\n        }\n        const limit = timestamps.length < 3 ? 0.5 : 0.25;\n        start = _limitValue(start, 0, limit);\n        end = _limitValue(end, 0, limit);\n        this._offsets = {\n            start,\n            end,\n            factor: 1 / (start + 1 + end)\n        };\n    }\n _generate() {\n        const adapter = this._adapter;\n        const min = this.min;\n        const max = this.max;\n        const options = this.options;\n        const timeOpts = options.time;\n        const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n        const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n        const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n        const hasWeekday = isNumber(weekday) || weekday === true;\n        const ticks = {};\n        let first = min;\n        let time, count;\n        if (hasWeekday) {\n            first = +adapter.startOf(first, 'isoWeek', weekday);\n        }\n        first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n        if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n            throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n        }\n        const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n        for(time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++){\n            addTick(ticks, time, timestamps);\n        }\n        if (time === max || options.bounds === 'ticks' || count === 1) {\n            addTick(ticks, time, timestamps);\n        }\n        return Object.keys(ticks).sort(sorter).map((x)=>+x);\n    }\n getLabelForValue(value) {\n        const adapter = this._adapter;\n        const timeOpts = this.options.time;\n        if (timeOpts.tooltipFormat) {\n            return adapter.format(value, timeOpts.tooltipFormat);\n        }\n        return adapter.format(value, timeOpts.displayFormats.datetime);\n    }\n format(value, format) {\n        const options = this.options;\n        const formats = options.time.displayFormats;\n        const unit = this._unit;\n        const fmt = format || formats[unit];\n        return this._adapter.format(value, fmt);\n    }\n _tickFormatFunction(time, index, ticks, format) {\n        const options = this.options;\n        const formatter = options.ticks.callback;\n        if (formatter) {\n            return callback(formatter, [\n                time,\n                index,\n                ticks\n            ], this);\n        }\n        const formats = options.time.displayFormats;\n        const unit = this._unit;\n        const majorUnit = this._majorUnit;\n        const minorFormat = unit && formats[unit];\n        const majorFormat = majorUnit && formats[majorUnit];\n        const tick = ticks[index];\n        const major = majorUnit && majorFormat && tick && tick.major;\n        return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n    }\n generateTickLabels(ticks) {\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            tick.label = this._tickFormatFunction(tick.value, i, ticks);\n        }\n    }\n getDecimalForValue(value) {\n        return value === null ? NaN : (value - this.min) / (this.max - this.min);\n    }\n getPixelForValue(value) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForValue(value);\n        return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n    }\n getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return this.min + pos * (this.max - this.min);\n    }\n _getLabelSize(label) {\n        const ticksOpts = this.options.ticks;\n        const tickLabelWidth = this.ctx.measureText(label).width;\n        const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n        const cosRotation = Math.cos(angle);\n        const sinRotation = Math.sin(angle);\n        const tickFontSize = this._resolveTickFontOptions(0).size;\n        return {\n            w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,\n            h: tickLabelWidth * sinRotation + tickFontSize * cosRotation\n        };\n    }\n _getLabelCapacity(exampleTime) {\n        const timeOpts = this.options.time;\n        const displayFormats = timeOpts.displayFormats;\n        const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n        const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [\n            exampleTime\n        ], this._majorUnit), format);\n        const size = this._getLabelSize(exampleLabel);\n        const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n        return capacity > 0 ? capacity : 1;\n    }\n getDataTimestamps() {\n        let timestamps = this._cache.data || [];\n        let i, ilen;\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const metas = this.getMatchingVisibleMetas();\n        if (this._normalized && metas.length) {\n            return this._cache.data = metas[0].controller.getAllParsedValues(this);\n        }\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\n            timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n        }\n        return this._cache.data = this.normalize(timestamps);\n    }\n getLabelTimestamps() {\n        const timestamps = this._cache.labels || [];\n        let i, ilen;\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const labels = this.getLabels();\n        for(i = 0, ilen = labels.length; i < ilen; ++i){\n            timestamps.push(parse(this, labels[i]));\n        }\n        return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);\n    }\n normalize(values) {\n        return _arrayUnique(values.sort(sorter));\n    }\n}\n\nfunction interpolate(table, val, reverse) {\n    let lo = 0;\n    let hi = table.length - 1;\n    let prevSource, nextSource, prevTarget, nextTarget;\n    if (reverse) {\n        if (val >= table[lo].pos && val <= table[hi].pos) {\n            ({ lo , hi  } = _lookupByKey(table, 'pos', val));\n        }\n        ({ pos: prevSource , time: prevTarget  } = table[lo]);\n        ({ pos: nextSource , time: nextTarget  } = table[hi]);\n    } else {\n        if (val >= table[lo].time && val <= table[hi].time) {\n            ({ lo , hi  } = _lookupByKey(table, 'time', val));\n        }\n        ({ time: prevSource , pos: prevTarget  } = table[lo]);\n        ({ time: nextSource , pos: nextTarget  } = table[hi]);\n    }\n    const span = nextSource - prevSource;\n    return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\nclass TimeSeriesScale extends TimeScale {\n    static id = 'timeseries';\n static defaults = TimeScale.defaults;\n constructor(props){\n        super(props);\n         this._table = [];\n         this._minPos = undefined;\n         this._tableRange = undefined;\n    }\n initOffsets() {\n        const timestamps = this._getTimestampsForTable();\n        const table = this._table = this.buildLookupTable(timestamps);\n        this._minPos = interpolate(table, this.min);\n        this._tableRange = interpolate(table, this.max) - this._minPos;\n        super.initOffsets(timestamps);\n    }\n buildLookupTable(timestamps) {\n        const { min , max  } = this;\n        const items = [];\n        const table = [];\n        let i, ilen, prev, curr, next;\n        for(i = 0, ilen = timestamps.length; i < ilen; ++i){\n            curr = timestamps[i];\n            if (curr >= min && curr <= max) {\n                items.push(curr);\n            }\n        }\n        if (items.length < 2) {\n            return [\n                {\n                    time: min,\n                    pos: 0\n                },\n                {\n                    time: max,\n                    pos: 1\n                }\n            ];\n        }\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            next = items[i + 1];\n            prev = items[i - 1];\n            curr = items[i];\n            if (Math.round((next + prev) / 2) !== curr) {\n                table.push({\n                    time: curr,\n                    pos: i / (ilen - 1)\n                });\n            }\n        }\n        return table;\n    }\n _generate() {\n        const min = this.min;\n        const max = this.max;\n        let timestamps = super.getDataTimestamps();\n        if (!timestamps.includes(min) || !timestamps.length) {\n            timestamps.splice(0, 0, min);\n        }\n        if (!timestamps.includes(max) || timestamps.length === 1) {\n            timestamps.push(max);\n        }\n        return timestamps.sort((a, b)=>a - b);\n    }\n _getTimestampsForTable() {\n        let timestamps = this._cache.all || [];\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const data = this.getDataTimestamps();\n        const label = this.getLabelTimestamps();\n        if (data.length && label.length) {\n            timestamps = this.normalize(data.concat(label));\n        } else {\n            timestamps = data.length ? data : label;\n        }\n        timestamps = this._cache.all = timestamps;\n        return timestamps;\n    }\n getDecimalForValue(value) {\n        return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n    }\n getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n    }\n}\n\nvar scales = /*#__PURE__*/Object.freeze({\n__proto__: null,\nCategoryScale: CategoryScale,\nLinearScale: LinearScale,\nLogarithmicScale: LogarithmicScale,\nRadialLinearScale: RadialLinearScale,\nTimeScale: TimeScale,\nTimeSeriesScale: TimeSeriesScale\n});\n\nconst registerables = [\n    controllers,\n    elements,\n    plugins,\n    scales\n];\n\nexport { Animation, Animations, ArcElement, BarController, BarElement, BasePlatform, BasicPlatform, BubbleController, CategoryScale, Chart, plugin_colors as Colors, DatasetController, plugin_decimation as Decimation, DomPlatform, DoughnutController, Element, index as Filler, Interaction, plugin_legend as Legend, LineController, LineElement, LinearScale, LogarithmicScale, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, Scale, ScatterController, plugin_subtitle as SubTitle, Ticks, TimeScale, TimeSeriesScale, plugin_title as Title, plugin_tooltip as Tooltip, adapters as _adapters, _detectPlatform, animator, controllers, defaults, elements, layouts, plugins, registerables, registry, scales };\n//# sourceMappingURL=chart.js.map\n"],"names":["round","v","lim","l","h","Math","max","min","p2b","n2b","b2n","n2p","map$1","A","B","C","D","E","F","a","b","c","d","e","f","hex","h1","h2","eq","isShort","r","g","hexParse","str","ret","len","length","alpha","hexString","undefined","HUE_RE","hsl2rgbn","s","n","k","hsv2rgbn","hwb2rgbn","w","rgb","i","hueValue","rgb2hsl","range","calln","Array","isArray","map","hsl2rgb","hwb2rgb","hsv2rgb","hue","hueParse","m","exec","p1","p2","rotate","deg","hslString","x","Z","Y","X","W","V","U","T","S","R","Q","P","O","N","M","L","K","G","H","I","J","names$1","OiceXe","antiquewEte","aqua","aquamarRe","azuY","beige","bisque","black","blanKedOmond","Xe","XeviTet","bPwn","burlywood","caMtXe","KartYuse","KocTate","cSO","cSnflowerXe","cSnsilk","crimson","cyan","xXe","xcyan","xgTMnPd","xWay","xgYF","xgYy","xkhaki","xmagFta","xTivegYF","xSange","xScEd","xYd","xsOmon","xsHgYF","xUXe","xUWay","xUgYy","xQe","xviTet","dAppRk","dApskyXe","dimWay","dimgYy","dodgerXe","fiYbrick","flSOwEte","foYstWAn","fuKsia","gaRsbSo","ghostwEte","gTd","gTMnPd","Way","gYF","gYFLw","gYy","honeyMw","hotpRk","RdianYd","Rdigo","ivSy","khaki","lavFMr","lavFMrXsh","lawngYF","NmoncEffon","ZXe","ZcSO","Zcyan","ZgTMnPdLw","ZWay","ZgYF","ZgYy","ZpRk","ZsOmon","ZsHgYF","ZskyXe","ZUWay","ZUgYy","ZstAlXe","ZLw","lime","limegYF","lRF","magFta","maPon","VaquamarRe","VXe","VScEd","VpurpN","VsHgYF","VUXe","VsprRggYF","VQe","VviTetYd","midnightXe","mRtcYam","mistyPse","moccasR","navajowEte","navy","Tdlace","Tive","TivedBb","Sange","SangeYd","ScEd","pOegTMnPd","pOegYF","pOeQe","pOeviTetYd","papayawEp","pHKpuff","peru","pRk","plum","powMrXe","purpN","YbeccapurpN","Yd","Psybrown","PyOXe","saddNbPwn","sOmon","sandybPwn","sHgYF","sHshell","siFna","silver","skyXe","UXe","UWay","UgYy","snow","sprRggYF","stAlXe","tan","teO","tEstN","tomato","Qe","viTet","JHt","wEte","wEtesmoke","Lw","LwgYF","unpack","unpacked","keys","Object","tkeys","j","ok","nk","replace","parseInt","names","nameParse","transparent","toLowerCase","RGB_RE","rgbParse","rgbString","to","pow","from","interpolate","rgb1","rgb2","t","modHSL","ratio","tmp","clone","proto","assign","fromObject","input","functionParse","charAt","Color","constructor","type","this","_rgb","_valid","valid","obj","mix","color","weight","c1","c2","w2","p","w1","clearer","greyscale","val","opaquer","negate","lighten","darken","saturate","desaturate","noop","uid","id","isNullOrUndef","value","prototype","toString","call","slice","isObject","isNumberFinite","Number","isFinite","finiteOrDefault","defaultValue","valueOrDefault","toDimension","dimension","endsWith","parseFloat","callback","fn","args","thisArg","apply","each","loopable","reverse","_elementsEqual","a0","a1","ilen","v0","v1","datasetIndex","index","source","target","create","klen","isValidKey","key","indexOf","_merger","options","tval","sval","merge","sources","merger","current","mergeIf","_mergerIf","hasOwnProperty","keyResolvers","o","y","_splitKey","parts","split","part","push","_getKeyResolver","resolveObjectKey","resolver","_capitalize","toUpperCase","defined","isFunction","setsEqual","size","item","has","_isClickEvent","PI","TAU","PITAU","INFINITY","POSITIVE_INFINITY","RAD_PER_DEG","HALF_PI","QUARTER_PI","TWO_THIRDS_PI","log10","sign","almostEquals","epsilon","abs","niceNum","roundedRange","niceRange","floor","fraction","niceFraction","_factorize","result","sqrt","sort","pop","isNonPrimitive","Symbol","toPrimitive","isNumber","isNaN","almostWhole","rounded","_setMinAndMaxByKey","array","property","toRadians","degrees","toDegrees","radians","_decimalPlaces","getAngleFromPoint","centrePoint","anglePoint","distanceFromXCenter","distanceFromYCenter","radialDistanceFromCenter","angle","atan2","distance","distanceBetweenPoints","pt1","pt2","_angleDiff","_normalizeAngle","_angleBetween","start","end","sameAngleIsFullCircle","angleToStart","angleToEnd","startToAngle","endToAngle","_limitValue","_int16Range","_isBetween","_lookup","table","cmp","mid","hi","lo","_lookupByKey","last","ti","_rlookupByKey","_filterBetween","values","arrayEvents","listenArrayEvents","listener","_chartjs","listeners","defineProperty","configurable","enumerable","forEach","method","base","res","object","unlistenArrayEvents","stub","splice","_arrayUnique","items","set","Set","requestAnimFrame","window","requestAnimationFrame","throttled","argsToUse","ticking","debounce","delay","timeout","clearTimeout","setTimeout","_toLeftRightCenter","align","_alignStartEnd","_textX","left","right","rtl","check","_getStartAndCountOfVisiblePoints","meta","points","animationsDisabled","pointCount","count","_sorted","iScale","vScale","_parsed","spanGaps","dataset","axis","minDefined","maxDefined","getUserBounds","getPixelForValue","distanceToDefinedLo","findIndex","point","distanceToDefinedHi","_scaleRangesChanged","xScale","yScale","_scaleRanges","newRanges","xmin","xmax","ymin","ymax","changed","atEdge","elasticIn","sin","elasticOut","effects","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeInSine","cos","easeOutSine","easeInOutSine","easeInExpo","easeOutExpo","easeInOutExpo","easeInCirc","easeOutCirc","easeInOutCirc","easeInElastic","easeOutElastic","easeInOutElastic","easeInBack","easeOutBack","easeInOutBack","easeInBounce","easeOutBounce","easeInOutBounce","isPatternOrGradient","getHoverColor","numbers","colors","applyAnimationsDefaults","defaults","duration","easing","loop","describe","_fallback","_indexable","_scriptable","name","properties","active","animation","resize","show","animations","visible","hide","applyLayoutsDefaults","autoPadding","padding","top","bottom","intlCache","Map","getNumberFormat","locale","cacheKey","JSON","stringify","formatter","get","Intl","NumberFormat","formatNumber","num","format","formatters","numeric","tickValue","ticks","chart","notation","delta","maxTick","calculateDelta","logDelta","numDecimal","minimumFractionDigits","maximumFractionDigits","logarithmic","remain","significand","includes","Ticks","applyScaleDefaults","display","offset","beginAtZero","bounds","clip","grace","grid","lineWidth","drawOnChartArea","drawTicks","tickLength","tickWidth","_ctx","tickColor","border","dash","dashOffset","width","title","text","minRotation","maxRotation","mirror","textStrokeWidth","textStrokeColor","autoSkip","autoSkipPadding","labelOffset","minor","major","crossAlign","showLabelBackdrop","backdropColor","backdropPadding","route","startsWith","overrides","descriptors","getScope$1","node","root","scope","Defaults","_descriptors","_appliers","backgroundColor","borderColor","datasets","devicePixelRatio","context","platform","getDevicePixelRatio","elements","events","font","family","style","lineHeight","hover","hoverBackgroundColor","ctx","hoverBorderColor","hoverColor","indexAxis","interaction","mode","intersect","includeInvisible","maintainAspectRatio","onHover","onClick","parsing","plugins","responsive","scale","scales","showLine","drawActiveElementsOnTop","override","targetScope","targetName","scopeObject","targetScopeObject","privateName","defineProperties","writable","local","appliers","toFontString","_measureText","data","gc","longest","string","textWidth","measureText","_alignPixel","pixel","currentDevicePixelRatio","halfWidth","clearCanvas","canvas","getContext","save","resetTransform","clearRect","height","restore","drawPoint","drawPointLegend","xOffset","yOffset","cornerRadius","xOffsetW","yOffsetW","pointStyle","rotation","radius","rad","translate","drawImage","beginPath","ellipse","arc","closePath","moveTo","lineTo","SQRT1_2","rect","fill","borderWidth","stroke","_isPointInArea","area","margin","clipArea","unclipArea","_steppedLineTo","previous","flip","midpoint","_bezierCurveTo","bezierCurveTo","cp1x","cp2x","cp1y","cp2y","setRenderOpts","opts","translation","fillStyle","textAlign","textBaseline","decorateText","line","strikethrough","underline","metrics","actualBoundingBoxLeft","actualBoundingBoxRight","actualBoundingBoxAscent","actualBoundingBoxDescent","yDecoration","strokeStyle","decorationWidth","drawBackdrop","oldColor","fillRect","renderText","lines","strokeWidth","strokeColor","backdrop","strokeText","maxWidth","fillText","addRoundedRectPath","topLeft","bottomLeft","bottomRight","topRight","LINE_HEIGHT","FONT_STYLE","toLineHeight","matches","match","numberOrZero","_readValueToProps","props","objProps","read","prop","toTRBL","toTRBLCorners","toPadding","toFont","fallback","console","warn","resolve","inputs","info","cacheable","_addGrace","minmax","change","keepZero","add","createContext","parentContext","_createResolver","scopes","prefixes","rootScopes","getTarget","finalRootScopes","_resolve","cache","toStringTag","_cacheable","_scopes","_rootScopes","_getTarget","Proxy","deleteProperty","_keys","_cached","_resolveWithPrefixes","getOwnPropertyDescriptor","Reflect","getPrototypeOf","getKeysFromAllScopes","ownKeys","storage","_storage","_attachContext","proxy","subProxy","descriptorDefaults","_proxy","_context","_subProxy","_stack","setContext","receiver","_resolveWithContext","allKeys","scriptable","indexable","_allKeys","isScriptable","isIndexable","readKey","prefix","needsSubResolver","_resolveScriptable","_resolveArray","getValue","Error","join","delete","createSubResolver","arr","filter","resolveFallback","getScope","parent","addScopes","parentScopes","parentFallback","allScopes","addScopesFromKey","subGetTarget","resolveKeysFromAllScopes","EPSILON","getPoint","skip","getValueAxis","splineCurve","firstPoint","middlePoint","afterPoint","next","d01","d12","s01","s12","fa","fb","monotoneAdjust","deltaK","mK","pointsLen","alphaK","betaK","tauK","squaredMagnitude","pointCurrent","pointAfter","monotoneCompute","valueAxis","pointBefore","iPixel","vPixel","splineCurveMonotone","slopeDelta","capControlPoint","pt","capBezierPoints","inArea","inAreaPrev","inAreaNext","_updateBezierControlPoints","controlPoints","cubicInterpolationMode","prev","tension","_isDomSupported","document","_getParentNode","domNode","parentNode","host","parseMaxStyle","styleValue","parentProperty","valueInPixels","getComputedStyle","element","ownerDocument","defaultView","getStyle","el","getPropertyValue","positions","getPositionedStyle","styles","suffix","pos","useOffsetPos","shadowRoot","getCanvasPosition","touches","offsetX","offsetY","box","getBoundingClientRect","clientX","clientY","getRelativePosition","event","borderBox","boxSizing","paddings","borders","getContainerSize","maxHeight","container","containerStyle","containerBorder","containerPadding","clientWidth","clientHeight","round1","getMaximumSize","bbWidth","bbHeight","aspectRatio","margins","containerSize","maintainHeight","retinaScale","forceRatio","forceStyle","pixelRatio","deviceHeight","deviceWidth","setTransform","supportsEventListenerOptions","passiveSupported","passive","addEventListener","removeEventListener","readUsedSize","_pointInLine","_steppedInterpolation","_bezierInterpolation","cp1","cp2","getRightToLeftAdapter","rectX","setWidth","xPlus","leftForLtr","itemWidth","getLeftToRightAdapter","_itemWidth","getRtlAdapter","overrideTextDirection","direction","original","getPropertyPriority","setProperty","prevTextDirection","restoreTextDirection","propertyFn","between","compare","normalize","normalizeSegment","getSegment","segment","startBound","endBound","_boundSegment","prevValue","inside","subStart","startIsBefore","endIsBefore","shouldStart","shouldStop","_boundSegments","segments","sub","findStartAndEnd","solidSegments","cur","stop","_computeSegments","segmentOptions","_loop","splitByStyles","completeLoop","_fullLoop","doSplitByStyles","chartContext","_chart","baseStyle","readStyle","_datasetIndex","prevStyle","addStyle","st","dir","p0","p0DataIndex","p1DataIndex","styleChanged","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","replacer","getSizeForArea","chartArea","field","getDatasetArea","getDatasetClipArea","_clip","disabled","Animator","_request","_charts","_running","_lastDate","_notify","anims","date","callbacks","numSteps","initial","currentStep","_refresh","_update","Date","now","remaining","running","draw","_active","_total","tick","_getAnims","charts","complete","progress","listen","cb","reduce","acc","_duration","cancel","remove","animator","interpolators","boolean","factor","c0","number","Animation","cfg","currentValue","_fn","_easing","_start","_target","_prop","_from","_to","_promises","update","elapsed","wait","promises","Promise","rej","resolved","Animations","config","_properties","configure","animationOptions","animatedProps","getOwnPropertyNames","option","_animateOptions","newOptions","resolveTargetOptions","_createAnimations","$shared","awaitAll","$animations","then","anim","all","scaleClip","allowedOverflow","defaultClip","toClip","getSortedDatasetIndices","filterVisible","metasets","_getSortedDatasetMetas","applyStack","stack","dsIndex","singleMode","otherValue","found","convertObjectDataToArray","iAxisKey","vAxisKey","adata","isStacked","stacked","getStackKey","indexScale","valueScale","NEGATIVE_INFINITY","getOrCreateStack","stacks","stackKey","indexValue","subStack","getLastIndexInStack","positive","getMatchingVisibleMetas","updateStacks","controller","parsed","_cachedMeta","_stacks","iAxis","vAxis","itemStacks","_top","_bottom","visualValues","_visualValues","getFirstScaleId","shift","createDatasetContext","createDataContext","dataIndex","raw","clearStacks","isDirectUpdateMode","cloneIfNotShared","cached","shared","createStack","canStack","hidden","_stacked","DatasetController","static","_cachedDataOpts","getMeta","_type","_parsing","_data","_objectData","_sharedOptions","_drawStart","_drawCount","enableOptionSharing","supportsDecimation","$context","_syncList","datasetElementType","dataElementType","initialize","linkScales","addElements","isPluginEnabled","updateIndex","getDataset","chooseId","xid","xAxisID","yid","yAxisID","rid","rAxisID","iid","iAxisID","vid","vAxisID","getScaleForId","rScale","getDatasetMeta","scaleID","_getOtherScale","reset","_destroy","_dataCheck","isExtensible","buildOrUpdateElements","resetNewElements","stackChanged","oldStacked","_resyncElements","scopeKeys","datasetScopeKeys","getOptionScopes","createResolver","parse","sorted","parseArrayData","parseObjectData","parsePrimitiveData","isNotInOrderComparedToPrev","labels","getLabels","singleScale","xAxisKey","yAxisKey","getParsed","getDataElement","updateRangeFromParsed","parsedValue","NaN","getMinMax","otherScale","otherMin","otherMax","_skip","getAllParsedValues","getMaxOverflow","getLabelAndValue","label","getLabelForValue","resolveDatasetElementOptions","resolveDataElementOptions","_resolveElementOptions","elementType","sharing","datasetElementScopeKeys","resolveNamedOptions","freeze","_resolveAnimations","transition","datasetAnimationScopeKeys","getSharedOptions","includeOptions","sharedOptions","_animationsDisabled","_getSharedOptions","firstOpts","previouslySharedOptions","updateSharedOptions","updateElement","_setStyle","removeHoverStyle","setHoverStyle","_removeDatasetHoverStyle","_setDatasetHoverStyle","arg1","arg2","numMeta","numData","_insertElements","_removeElements","move","updateElements","removed","_sync","_dataChanges","_onDataPush","arguments","_onDataPop","_onDataShift","_onDataSplice","newCount","_onDataUnshift","LineController","_index_","_value_","super","_dataset","_decimated","animated","maxGapLength","directUpdate","pointsCount","prevParsed","nullData","getBasePixel","lastPoint","updateControlPoints","DateAdapterBase","members","init","formats","diff","startOf","endOf","adapters","_date","binarySearch","metaset","lookupMethod","_reversePixels","getRange","evaluateInteractionItems","position","handler","getSortedVisibleDatasetMetas","getDistanceMetricForAxis","useX","useY","deltaX","deltaY","getIntersectItems","useFinalPosition","isPointInArea","evaluationFunc","inRange","getNearestRadialItems","startAngle","endAngle","getProps","getNearestCartesianItems","distanceMetric","minDistance","center","getCenterPoint","pointInArea","getNearestItems","getAxisItems","rangeMethod","intersectsItem","Interaction","modes","nearest","STATIC_POSITIONS","filterByPosition","filterDynamicPositionByAxis","sortByWeight","wrapBoxes","boxes","layoutBoxes","stackWeight","horizontal","isHorizontal","buildStacks","layouts","wrap","placed","setLayoutDims","params","vBoxMaxWidth","hBoxMaxHeight","layout","fullSize","availableWidth","availableHeight","buildLayoutBoxes","centerHorizontal","centerVertical","leftAndTop","concat","rightAndBottom","vertical","getCombinedMax","maxPadding","updateMaxPadding","boxPadding","updateDims","getPadding","newWidth","outerWidth","newHeight","outerHeight","widthChanged","heightChanged","same","other","handleMaxPadding","updatePos","getMargins","marginForPositions","fitBoxes","refitBoxes","refit","setBoxDims","placeBoxes","userPadding","addBox","_layers","z","removeBox","layoutItem","minPadding","verticalBoxes","horizontalBoxes","beforeLayout","visibleVerticalBoxCount","total","BasePlatform","acquireContext","releaseContext","isAttached","updateConfig","BasicPlatform","EXPANDO_KEY","EVENT_TYPES","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","isNullOrEmpty","initCanvas","renderHeight","getAttribute","renderWidth","displayWidth","displayHeight","eventListenerOptions","addListener","removeListener","fromNativeEvent","native","nodeListContains","nodeList","contains","createAttachObserver","observer","MutationObserver","entries","trigger","entry","addedNodes","removedNodes","observe","childList","subtree","createDetachObserver","drpListeningCharts","oldDevicePixelRatio","onWindowResize","dpr","listenDevicePixelRatioChanges","unlistenDevicePixelRatioChanges","createResizeObserver","ResizeObserver","contentRect","releaseObserver","disconnect","createProxyAndListen","DomPlatform","removeAttribute","setAttribute","proxies","$proxies","handlers","attach","detach","isConnected","_detectPlatform","OffscreenCanvas","Element","tooltipPosition","hasValue","final","tickOpts","determinedMaxTicks","determineMaxTicks","ticksLimit","maxTicksLimit","majorIndices","enabled","getMajorIndices","numMajorIndices","first","newTicks","skipMajors","spacing","calculateSpacing","avgMajorSpacing","_tickSize","maxScale","_length","maxChart","_maxLength","evenMajorSpacing","getEvenSpacing","factors","ceil","majorStart","majorEnd","reverseAlign","offsetFromEdge","edge","getTicksLimit","ticksLength","sample","numItems","increment","getPixelForGridLine","offsetGridLines","validIndex","_startPixel","_endPixel","lineValue","getPixelForTick","garbageCollect","caches","gcLen","getTickMarkLength","getTitleHeight","createScaleContext","createTickContext","titleAlign","titleArgs","titleX","titleY","positionAxisID","Scale","_margins","paddingTop","paddingBottom","paddingLeft","paddingRight","labelRotation","_range","_gridLineItems","_labelItems","_labelSizes","_longestTextCache","_userMax","_userMin","_suggestedMax","_suggestedMin","_ticksLength","_borderValue","_cache","_dataLimitsCached","suggestedMin","suggestedMax","metas","getTicks","xLabels","yLabels","getLabelItems","_computeLabelItems","beforeUpdate","sampleSize","beforeSetDimensions","setDimensions","afterSetDimensions","beforeDataLimits","determineDataLimits","afterDataLimits","beforeBuildTicks","buildTicks","afterBuildTicks","samplingEnabled","_convertTicksToLabels","beforeCalculateLabelRotation","calculateLabelRotation","afterCalculateLabelRotation","afterAutoSkip","beforeFit","fit","afterFit","afterUpdate","startPixel","endPixel","reversePixels","_alignToPixels","alignToPixels","_callHooks","notifyPlugins","beforeTickToLabelConversion","generateTickLabels","afterTickToLabelConversion","numTicks","maxLabelDiagonal","_isVisible","labelSizes","_getLabelSizes","maxLabelWidth","widest","maxLabelHeight","highest","asin","minSize","titleOpts","gridOpts","titleHeight","tickPadding","angleRadians","labelHeight","labelWidth","_calculatePadding","_handleMargins","isRotated","labelsBelowTicks","offsetLeft","offsetRight","isFullSize","_computeLabelSizes","widths","heights","jlen","tickFont","fontString","nestedLabel","widestLabelSize","highestLabelSize","_resolveTickFontOptions","valueAt","idx","getValueForPixel","getPixelForDecimal","decimal","getDecimalForPixel","getBaseValue","optionTicks","rot","_computeGridLineItems","tl","borderOpts","axisWidth","axisHalfWidth","alignBorderValue","borderValue","alignedLineValue","tx1","ty1","tx2","ty2","x1","y1","x2","y2","limit","step","optsAtIndex","optsAtIndexBorder","lineColor","tickBorderDash","tickBorderDashOffset","tickAndPadding","hTickAndPadding","lineCount","textOffset","_getXAxisLabelAlignment","_getYAxisLabelAlignment","halfCount","tickTextAlign","labelPadding","_computeLabelArea","drawBackground","getLineWidthForValue","drawGrid","drawLine","setLineDash","lineDashOffset","drawBorder","lastLineWidth","drawLabels","renderTextOptions","drawTitle","tz","gz","bz","axisID","_maxDigits","fontSize","TypedRegistry","isForType","isPrototypeOf","register","parentScope","isIChartComponent","registerDefaults","unregister","itemDefaults","defaultRoutes","routeDefaults","routes","propertyParts","sourceName","sourceScope","Registry","controllers","_typedRegistries","_each","addControllers","addPlugins","addScales","getController","_get","getElement","getPlugin","getScale","removeControllers","removeElements","removePlugins","removeScales","typedRegistry","arg","reg","_getRegistryForType","_exec","itemReg","registry","component","camelMethod","PluginService","_init","notify","hook","_createDescriptors","descriptor","plugin","cancelable","invalidate","_oldCache","_notifyStateChanges","allPlugins","createDescriptors","previousDescriptors","some","localIds","getOpts","pluginOpts","pluginScopeKeys","getIndexAxis","datasetDefaults","datasetOptions","getAxisFromDefaultScaleID","getDefaultScaleIDFromAxis","idMatchesAxis","axisFromPosition","determineAxis","scaleOptions","getAxisFromDataset","retrieveAxisFromDatasets","boundDs","mergeScaleConfig","chartDefaults","configScales","chartIndexAxis","scaleConf","error","defaultId","defaultScaleOptions","defaultID","initOptions","initData","initConfig","keyCache","keysCached","cachedKeys","generate","addIfFound","Config","_config","_scopeCache","_resolverCache","clearCache","clear","datasetType","additionalOptionScopes","_cachedScopes","mainScope","resetCache","keyLists","chartOptionScopes","subPrefixes","getResolver","needContext","subResolver","resolverCache","hasFunction","version","KNOWN_POSITIONS","positionIsHorizontal","compare2Level","l1","l2","onAnimationsComplete","onComplete","onAnimationProgress","onProgress","getCanvas","getElementById","instances","getChart","moveNumericKeys","intKey","determineLastEvent","lastEvent","inChartArea","isClick","Chart","invalidatePlugins","userConfig","initialCanvas","existingChart","_options","_aspectRatio","_metasets","_lastEvent","_listeners","_responsiveListeners","_sortedMetasets","_plugins","_hiddenIndices","attached","_doResize","resizeDelay","_initialize","bindEvents","_resizeBeforeDraw","_resize","newSize","newRatio","onResize","render","ensureScalesHaveIDs","scalesOptions","axisOptions","buildOrUpdateScales","scaleOpts","updated","isRadial","dposition","dtype","scaleType","scaleClass","hasUpdated","_updateMetasets","_destroyDatasetMeta","_removeUnreferencedMetasets","buildOrUpdateControllers","newControllers","order","isDatasetVisible","ControllerClass","_resetElements","animsDisabled","_updateScales","_checkEventBindings","_updateHiddenIndices","_minPadding","_updateLayout","_updateDatasets","_eventHandler","_updateHoverStyles","existingEvents","newEvents","unbindEvents","changes","_getUniformDataChanges","datasetCount","makeSet","changeSet","noArea","_idx","_updateDataset","layers","_drawDatasets","_drawDataset","getElementsAtEventForMode","getVisibleDatasetCount","setDatasetVisibility","toggleDataVisibility","getDataVisibility","_updateVisibility","_stop","destroy","toBase64Image","toDataURL","bindUserEvents","bindResponsiveEvents","_add","_remove","detached","updateHoverStyle","getActiveElements","setActiveElements","activeElements","lastActive","pluginId","replay","hoverOptions","deactivated","activated","eventFilter","_handleEvent","_getActiveElements","setStyle","lineCap","lineJoin","getLineMethod","stepped","pathVars","paramsStart","paramsEnd","segmentStart","segmentEnd","outside","pathSegment","lineMethod","fastPathSegment","prevX","minY","maxY","lastY","avgX","countX","pointIndex","drawX","truncX","_getSegmentMethod","useFastPath","_getInterpolationMethod","strokePathWithCache","path","_path","Path2D","strokePathDirect","segmentMethod","usePath2D","LineElement","_points","_segments","_pointsUpdated","_interpolate","interpolated","inRange$1","hitRadius","PointElement","hoverBorderWidth","hoverRadius","mouseX","mouseY","inXRange","inYRange","getBoxSize","labelOpts","boxHeight","boxWidth","usePointStyle","pointStyleWidth","itemHeight","itemsEqual","Legend","_added","legendHitBoxes","_hoveredItem","doughnutMode","legendItems","columnSizes","lineWidths","buildLabels","generateLabels","labelFont","_computeTitleHeight","_fitRows","_fitCols","hitboxes","totalHeight","row","legendItem","_itemHeight","heightLimit","totalWidth","currentColWidth","currentColHeight","col","calculateItemSize","adjustHitBoxes","rtlHelper","hitbox","_draw","defaultColor","halfFontSize","cursor","drawLegendBox","lineDash","drawOptions","SQRT2","centerX","centerY","yBoxTop","xBoxLeft","borderRadius","textDirection","fontColor","realX","fontLineHeight","calculateLegendItemHeight","titleFont","titlePadding","topPaddingPlusHalfFontSize","_getLegendItemAt","hitBox","lh","handleEvent","isListened","hoveredItem","sameItem","onLeave","calculateItemWidth","calculateItemHeight","legendItemText","plugin_legend","_element","_args","legend","afterEvent","ci","useBorderRadius","WeakMap","positioners","average","xSet","xAverage","eventPosition","nearestElement","tp","pushOrConcat","toPush","splitNewlines","String","createTooltipItem","formattedValue","getTooltipSize","tooltip","body","footer","bodyFont","footerFont","titleLineCount","footerLineCount","bodyLineItemCount","combinedBodyLength","bodyItem","before","after","beforeBody","afterBody","titleSpacing","titleMarginBottom","bodyLineHeight","displayColors","bodySpacing","footerMarginTop","footerSpacing","widthPadding","maxLineWidth","determineYAlign","doesNotFitWithAlign","xAlign","caret","caretSize","caretPadding","determineXAlign","yAlign","chartWidth","determineAlignment","alignX","alignY","paddingAndSize","getBackgroundPoint","alignment","getAlignedX","getBeforeAfterBodyLines","createTooltipContext","tooltipItems","overrideCallbacks","defaultCallbacks","beforeTitle","labelCount","afterTitle","beforeLabel","tooltipItem","labelColor","labelTextColor","bodyColor","labelPointStyle","afterLabel","beforeFooter","afterFooter","invokeCallbackWithFallback","Tooltip","opacity","_eventPosition","_size","_cachedAnimations","_tooltipItems","dataPoints","caretX","caretY","labelColors","labelPointStyles","labelTextColors","getTitle","getBeforeBody","getBody","bodyItems","scoped","getAfterBody","getFooter","_createItems","itemSort","positionAndSize","backgroundPoint","external","drawCaret","tooltipPoint","caretPosition","getCaretPosition","x3","y3","ptX","ptY","titleColor","_drawColorBox","colorX","rtlColorX","yOffSet","colorY","multiKeyBackground","outerX","innerX","strokeRect","drawBody","bodyAlign","xLinePadding","fillLineOfText","bodyAlignForCalculation","textColor","drawFooter","footerAlign","footerColor","tooltipSize","quadraticCurveTo","_updateAnimationTarget","animX","animY","_willRender","hasTooltipContent","globalAlpha","positionChanged","_positionChanged","_ignoreReplayEvents","plugin_tooltip","afterInit","afterDraw","addIfString","addedLabels","unshift","findOrAddLabel","lastIndexOf","_getLabelForValue","CategoryScale","_startValue","_valueRange","_addedLabels","added","generateTicks$1","generationOptions","dataRange","MIN_SPACING","precision","maxTicks","maxDigits","includeBounds","unit","maxSpaces","rmin","rmax","countDefined","minSpacing","niceMin","niceMax","numSpaces","decimalPlaces","relativeLabelSize","LinearScaleBase","_endValue","handleTickRangeOptions","setMin","setMax","minSign","maxSign","getTickLimit","stepSize","computeTickLimit","numericGeneratorOptions","LinearScale","INTERVALS","millisecond","common","steps","second","minute","hour","day","week","month","quarter","year","UNITS","sorter","adapter","_adapter","parser","isoWeekday","_parseOpts","determineUnitForAutoTicks","minUnit","capacity","interval","MAX_SAFE_INTEGER","determineUnitForFormatting","determineMajorUnit","addTick","time","timestamps","timestamp","setMajorTicks","majorUnit","ticksFromTimestamps","TimeScale","displayFormats","_unit","_majorUnit","_offsets","_normalized","normalized","_applyBounds","_getLabelBounds","getLabelTimestamps","timeOpts","_generate","_getLabelCapacity","initOffsets","offsetAfterAutoskip","getDecimalForValue","weekday","hasWeekday","getDataTimestamps","tooltipFormat","datetime","fmt","_tickFormatFunction","minorFormat","majorFormat","offsets","_getLabelSize","ticksOpts","tickLabelWidth","cosRotation","sinRotation","tickFontSize","exampleTime","exampleLabel"],"sourceRoot":""}